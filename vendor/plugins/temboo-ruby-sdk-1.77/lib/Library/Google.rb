require "temboo"

module Google




  module Analytics



    ##############################################################################
    #
    # ClientLoginAuthentication
    #
    # Request an authorization token for Google Analytics.
    #
    ##############################################################################

    class ClientLoginAuthentication < Choreography

      ####
      #  Create a new instance of the ClientLoginAuthentication Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Analytics/ClientLoginAuthentication")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return ClientLoginAuthenticationInputSet
      ####
      def new_input_set()
        return ClientLoginAuthenticationInputSet.new()
      end

      def make_result_set()
        return ClientLoginAuthenticationResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = ClientLoginAuthenticationResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the ClientLoginAuthentication
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class ClientLoginAuthenticationInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the ClientLoginAuthentication Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class ClientLoginAuthenticationResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AuthorizationKey" output from this Choreo execution
      	#
      	# @return String - (string) The authorization key which is parsed from the Google response.
      	####
      	def get_AuthorizationKey()
      	  return @outputs["AuthorizationKey"]
      	end
      end

    end # class ClientLoginAuthentication



    ##############################################################################
    #
    # GetMetrics
    #
    # Retrieves metrics such as visits, page views, bounces within a specified time frame.
    #
    ##############################################################################

    class GetMetrics < Choreography

      ####
      #  Create a new instance of the GetMetrics Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Analytics/GetMetrics")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetMetricsInputSet
      ####
      def new_input_set()
        return GetMetricsInputSet.new()
      end

      def make_result_set()
        return GetMetricsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetMetricsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetMetrics
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetMetricsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Dimensions input for this Choreo. 
        # 
        # @param String - (optional, string) Defines the primary data keys for your Analytics report. Use dimensions to segment your web property metrics (e.g.  ga:browser or ga:city).
        ###

        def set_Dimensions(value)
          set_input("Dimensions", value)
        end
        #### 
        # Set the value of the EndDate input for this Choreo. 
        # 
        # @param String - (required, date) The end date for the range of data you want to retrieve. Epoch timestamp in milliseconds or formatted as yyyy-MM-dd.
        ###

        def set_EndDate(value)
          set_input("EndDate", value)
        end
        #### 
        # Set the value of the Filters input for this Choreo. 
        # 
        # @param String - (optional, string) Restricts the data returned by a dimension or metric you want to filter by using an expression (i.e. ga:timeOnPage==10).
        ###

        def set_Filters(value)
          set_input("Filters", value)
        end
        #### 
        # Set the value of the MaxResults input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The max results to be returned in the feed. Defaults to 50.
        ###

        def set_MaxResults(value)
          set_input("MaxResults", value)
        end
        #### 
        # Set the value of the Metrics input for this Choreo. 
        # 
        # @param String - (optional, string) This is a comma separated list of metrics you want to retrieve. Defaults to: ga:visits,ga:bounces,ga:pageviews.
        ###

        def set_Metrics(value)
          set_input("Metrics", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) The password for your Google analytics account.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ProfileId input for this Choreo. 
        # 
        # @param Integer - (required, integer) The Google Analytics profile ID to access (this can be found under Profile Settings).
        ###

        def set_ProfileId(value)
          set_input("ProfileId", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: XML (the default) and JSON.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Segment input for this Choreo. 
        # 
        # @param String - (optional, string) Used to segment your data by dimensions and/or metrics. You can use expressions for segments just as you would for the Filters parameter.
        ###

        def set_Segment(value)
          set_input("Segment", value)
        end
        #### 
        # Set the value of the Sort input for this Choreo. 
        # 
        # @param String - (optional, string) Indicates the sorting order and direction for the returned data. Values can be separated by commas (i.e. ga:browser,ga:pageviews).
        ###

        def set_Sort(value)
          set_input("Sort", value)
        end
        #### 
        # Set the value of the StartDate input for this Choreo. 
        # 
        # @param String - (required, date) The start date for the range of data to retrieve. Use epoch timestamp in milliseconds or formatted as yyyy-MM-dd.
        ###

        def set_StartDate(value)
          set_input("StartDate", value)
        end
        #### 
        # Set the value of the StartIndex input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The starting entry for the feed. Defaults to 1.
        ###

        def set_StartIndex(value)
          set_input("StartIndex", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetMetrics Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetMetricsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "PageViews" output from this Choreo execution
      	#
      	# @return String - (integer) The page views parsed from the Google Analytics response
      	####
      	def get_PageViews()
      	  return @outputs["PageViews"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "Visits" output from this Choreo execution
      	#
      	# @return String - (integer) The visits metrics parsed from the Google Analytics response.
      	####
      	def get_Visits()
      	  return @outputs["Visits"]
      	end
      	####
      	# Retrieve the value for the "Bounces" output from this Choreo execution
      	#
      	# @return String - (integer) The bounces metrics parsed from the Google Analytics response
      	####
      	def get_Bounces()
      	  return @outputs["Bounces"]
      	end
      end

    end # class GetMetrics




    module Utils



      ##############################################################################
      #
      # ExportDoc
      #
      # 
      #
      ##############################################################################

      class ExportDoc < Choreography

        ####
        #  Create a new instance of the ExportDoc Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Analytics/Utils/ExportDoc")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ExportDocInputSet
        ####
        def new_input_set()
          return ExportDocInputSet.new()
        end

        def make_result_set()
          return ExportDocResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ExportDocResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ExportDoc
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ExportDocInputSet < Choreography::InputSet


        end

        ####
        # A ResultSet with methods tailored to the values returned by the ExportDoc Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ExportDocResultSet < Choreography::ResultSet
        end

      end # class ExportDoc




    end # module Utils

  end # module Analytics

  module Calendar



    ##############################################################################
    #
    # CreateCalendar
    #
    # Create a new secondary calendar.
    #
    ##############################################################################

    class CreateCalendar < Choreography

      ####
      #  Create a new instance of the CreateCalendar Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/CreateCalendar")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return CreateCalendarInputSet
      ####
      def new_input_set()
        return CreateCalendarInputSet.new()
      end

      def make_result_set()
        return CreateCalendarResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = CreateCalendarResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the CreateCalendar
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class CreateCalendarInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the Description input for this Choreo. 
        # 
        # @param String - (optional, string) A description of the calendar.
        ###

        def set_Description(value)
          set_input("Description", value)
        end
        #### 
        # Set the value of the Location input for this Choreo. 
        # 
        # @param String - (optional, string) Geographic location of the calendar such as "Los Angeles" or "New York".
        ###

        def set_Location(value)
          set_input("Location", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Timezone input for this Choreo. 
        # 
        # @param String - (optional, string) The timezone for the new calendar, such as "America/Los_Angeles". Defaults to UTC if left blank.
        ###

        def set_Timezone(value)
          set_input("Timezone", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The name for the new calendar.
        ###

        def set_Title(value)
          set_input("Title", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the CreateCalendar Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class CreateCalendarResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class CreateCalendar



    ##############################################################################
    #
    # CreateEvent
    #
    # Create a new event in a specified calendar.
    #
    ##############################################################################

    class CreateEvent < Choreography

      ####
      #  Create a new instance of the CreateEvent Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/CreateEvent")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return CreateEventInputSet
      ####
      def new_input_set()
        return CreateEventInputSet.new()
      end

      def make_result_set()
        return CreateEventResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = CreateEventResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the CreateEvent
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class CreateEventInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the CalendarID input for this Choreo. 
        # 
        # @param String - (required, string) The ID for the calendar in which to add the event.
        ###

        def set_CalendarID(value)
          set_input("CalendarID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the EndDate input for this Choreo. 
        # 
        # @param String - (required, string) The end date of the event, in the format "2012-04-10".
        ###

        def set_EndDate(value)
          set_input("EndDate", value)
        end
        #### 
        # Set the value of the EndTime input for this Choreo. 
        # 
        # @param String - (required, string) The end time for the event, in the format "10:30:00".
        ###

        def set_EndTime(value)
          set_input("EndTime", value)
        end
        #### 
        # Set the value of the EventDescription input for this Choreo. 
        # 
        # @param String - (optional, string) A short description of the event.
        ###

        def set_EventDescription(value)
          set_input("EventDescription", value)
        end
        #### 
        # Set the value of the EventLocation input for this Choreo. 
        # 
        # @param String - (optional, string) The location for the new event.
        ###

        def set_EventLocation(value)
          set_input("EventLocation", value)
        end
        #### 
        # Set the value of the EventTitle input for this Choreo. 
        # 
        # @param String - (required, string) The title for the new event.
        ###

        def set_EventTitle(value)
          set_input("EventTitle", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the StartDate input for this Choreo. 
        # 
        # @param String - (required, string) The start date of the event, in the format "2012-11-03".
        ###

        def set_StartDate(value)
          set_input("StartDate", value)
        end
        #### 
        # Set the value of the StartTime input for this Choreo. 
        # 
        # @param String - (required, string) The start time for the event, in the format "10:00:00".
        ###

        def set_StartTime(value)
          set_input("StartTime", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the CreateEvent Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class CreateEventResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "TimezoneSetting" output from this Choreo execution
      	#
      	# @return String - (string) The timezone setting retrieved from the specified calendar.
      	####
      	def get_TimezoneSetting()
      	  return @outputs["TimezoneSetting"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      	####
      	# Retrieve the value for the "CreateEvent" output from this Choreo execution
      	#
      	# @return String - The request template with appropriate inputs passed.
      	####
      	def get_CreateEvent()
      	  return @outputs["CreateEvent"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class CreateEvent



    ##############################################################################
    #
    # DeleteAllEvents
    #
    # Delete all events from a primary calendar of an account. Note that this operation can't be undone.
    #
    ##############################################################################

    class DeleteAllEvents < Choreography

      ####
      #  Create a new instance of the DeleteAllEvents Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/DeleteAllEvents")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DeleteAllEventsInputSet
      ####
      def new_input_set()
        return DeleteAllEventsInputSet.new()
      end

      def make_result_set()
        return DeleteAllEventsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DeleteAllEventsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DeleteAllEvents
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DeleteAllEventsInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DeleteAllEvents Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DeleteAllEventsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - No content is returned for delete calendar operations.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class DeleteAllEvents



    ##############################################################################
    #
    # DeleteCalendar
    #
    # Delete a secondary calendar.
    #
    ##############################################################################

    class DeleteCalendar < Choreography

      ####
      #  Create a new instance of the DeleteCalendar Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/DeleteCalendar")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DeleteCalendarInputSet
      ####
      def new_input_set()
        return DeleteCalendarInputSet.new()
      end

      def make_result_set()
        return DeleteCalendarResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DeleteCalendarResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DeleteCalendar
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DeleteCalendarInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the CalendarID input for this Choreo. 
        # 
        # @param String - (required, string) The ID for the calendar to delete.
        ###

        def set_CalendarID(value)
          set_input("CalendarID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (required, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DeleteCalendar Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DeleteCalendarResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - No content is returned for delete calendar operations.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class DeleteCalendar



    ##############################################################################
    #
    # DeleteEvent
    #
    # Delete a specific event from a specified calendar.
    #
    ##############################################################################

    class DeleteEvent < Choreography

      ####
      #  Create a new instance of the DeleteEvent Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/DeleteEvent")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DeleteEventInputSet
      ####
      def new_input_set()
        return DeleteEventInputSet.new()
      end

      def make_result_set()
        return DeleteEventResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DeleteEventResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DeleteEvent
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DeleteEventInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the CalendarID input for this Choreo. 
        # 
        # @param String - (required, string) The ID for the calendar to delete.
        ###

        def set_CalendarID(value)
          set_input("CalendarID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The name of the calendar that you want to retrieve information for. Note that if there are multiple calendars with the same name, only the first one will be returned.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the EventID input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID for the event to delete.
        ###

        def set_EventID(value)
          set_input("EventID", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DeleteEvent Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DeleteEventResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - No content is returned for delete calendar operations.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class DeleteEvent



    ##############################################################################
    #
    # GetAllCalendars
    #
    # Retrieve data for all calendars.
    #
    ##############################################################################

    class GetAllCalendars < Choreography

      ####
      #  Create a new instance of the GetAllCalendars Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/GetAllCalendars")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetAllCalendarsInputSet
      ####
      def new_input_set()
        return GetAllCalendarsInputSet.new()
      end

      def make_result_set()
        return GetAllCalendarsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetAllCalendarsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetAllCalendars
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetAllCalendarsInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the Count input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The maximum number of calendars to return. The default is 15.
        ###

        def set_Count(value)
          set_input("Count", value)
        end
        #### 
        # Set the value of the Fields input for this Choreo. 
        # 
        # @param String - (optional, string) The calendar fields to return. Accepted values are "etag", "items", "kind", and "nextPageToken". All calendar items are returned by default.
        ###

        def set_Fields(value)
          set_input("Fields", value)
        end
        #### 
        # Set the value of the Hidden input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Enter "1" to return hidden calendars in the results, or "0" (the default) to not return them.
        ###

        def set_Hidden(value)
          set_input("Hidden", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetAllCalendars Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetAllCalendarsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class GetAllCalendars



    ##############################################################################
    #
    # GetAllEvents
    #
    # Retrieve data for all events in a specified calendar.
    #
    ##############################################################################

    class GetAllEvents < Choreography

      ####
      #  Create a new instance of the GetAllEvents Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/GetAllEvents")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetAllEventsInputSet
      ####
      def new_input_set()
        return GetAllEventsInputSet.new()
      end

      def make_result_set()
        return GetAllEventsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetAllEventsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetAllEvents
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetAllEventsInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the CalendarID input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID for the calendar with the events to retrieve.
        ###

        def set_CalendarID(value)
          set_input("CalendarID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetAllEvents Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetAllEventsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class GetAllEvents



    ##############################################################################
    #
    # GetAllSettings
    #
    # Retrieves all settings for a Google Calendar account.
    #
    ##############################################################################

    class GetAllSettings < Choreography

      ####
      #  Create a new instance of the GetAllSettings Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/GetAllSettings")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetAllSettingsInputSet
      ####
      def new_input_set()
        return GetAllSettingsInputSet.new()
      end

      def make_result_set()
        return GetAllSettingsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetAllSettingsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetAllSettings
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetAllSettingsInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the Fields input for this Choreo. 
        # 
        # @param String - (optional, string) The settings fields to return. Returns etag, item IDs, and item values by default.
        ###

        def set_Fields(value)
          set_input("Fields", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetAllSettings Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetAllSettingsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class GetAllSettings



    ##############################################################################
    #
    # GetCalendar
    #
    # Retrieve data for a specific calendar in a Google account.
    #
    ##############################################################################

    class GetCalendar < Choreography

      ####
      #  Create a new instance of the GetCalendar Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/GetCalendar")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetCalendarInputSet
      ####
      def new_input_set()
        return GetCalendarInputSet.new()
      end

      def make_result_set()
        return GetCalendarResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetCalendarResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetCalendar
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetCalendarInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the CalendarID input for this Choreo. 
        # 
        # @param String - (required, string) The ID for the calendar to retrieve.
        ###

        def set_CalendarID(value)
          set_input("CalendarID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetCalendar Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetCalendarResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class GetCalendar



    ##############################################################################
    #
    # GetEvent
    #
    # Retrieve data for all calendars in an account.
    #
    ##############################################################################

    class GetEvent < Choreography

      ####
      #  Create a new instance of the GetEvent Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/GetEvent")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetEventInputSet
      ####
      def new_input_set()
        return GetEventInputSet.new()
      end

      def make_result_set()
        return GetEventResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetEventResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetEvent
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetEventInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the CalendarID input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID for the calendar with the events to retrieve.
        ###

        def set_CalendarID(value)
          set_input("CalendarID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the EventID input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID for the event to retrieve.
        ###

        def set_EventID(value)
          set_input("EventID", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetEvent Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetEventResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetEvent



    ##############################################################################
    #
    # GetNextEvent
    #
    # Retrieves the next upcoming event in a Google calendar based on the current timestamp and the specified calendar's timezone setting.
    #
    ##############################################################################

    class GetNextEvent < Choreography

      ####
      #  Create a new instance of the GetNextEvent Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/GetNextEvent")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetNextEventInputSet
      ####
      def new_input_set()
        return GetNextEventInputSet.new()
      end

      def make_result_set()
        return GetNextEventResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetNextEventResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetNextEvent
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetNextEventInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the CalendarID input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID for the calendar that contains the next event to retrieve.
        ###

        def set_CalendarID(value)
          set_input("CalendarID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetNextEvent Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetNextEventResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class GetNextEvent



    ##############################################################################
    #
    # GetSetting
    #
    # Retrieves a specifed setting for a Google Calendar account.
    #
    ##############################################################################

    class GetSetting < Choreography

      ####
      #  Create a new instance of the GetSetting Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/GetSetting")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetSettingInputSet
      ####
      def new_input_set()
        return GetSettingInputSet.new()
      end

      def make_result_set()
        return GetSettingResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetSettingResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetSetting
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetSettingInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the SettingID input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID for the setting to retrieve. Use the GetAllSettings Choreo to retrieve settings IDs.
        ###

        def set_SettingID(value)
          set_input("SettingID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetSetting Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetSettingResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class GetSetting



    ##############################################################################
    #
    # RefreshToken
    #
    # Retrieves a new access token when the provided access token is expired.
    #
    ##############################################################################

    class RefreshToken < Choreography

      ####
      #  Create a new instance of the RefreshToken Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/RefreshToken")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RefreshTokenInputSet
      ####
      def new_input_set()
        return RefreshTokenInputSet.new()
      end

      def make_result_set()
        return RefreshTokenResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RefreshTokenResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RefreshToken
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RefreshTokenInputSet < Choreography::InputSet

        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (required, string) The client ID provided by Google when you sign up for an account.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The client secret provided by Google when you sign up for an account.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the OAuth process to be used when your access token expires.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RefreshToken Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RefreshTokenResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (string) The access token that is parsed from the request to refresh the token.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      end

    end # class RefreshToken



    ##############################################################################
    #
    # SearchCalendarsByName
    #
    # Retrieves information about a calendar including the id with a given calendar name.
    #
    ##############################################################################

    class SearchCalendarsByName < Choreography

      ####
      #  Create a new instance of the SearchCalendarsByName Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/SearchCalendarsByName")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return SearchCalendarsByNameInputSet
      ####
      def new_input_set()
        return SearchCalendarsByNameInputSet.new()
      end

      def make_result_set()
        return SearchCalendarsByNameResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = SearchCalendarsByNameResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the SearchCalendarsByName
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class SearchCalendarsByNameInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the CalendarName input for this Choreo. 
        # 
        # @param String - (required, string) The name of the calendar that you want to retrieve information for. Note that if there are multiple calendars with the same name, only the first one will be returned.
        ###

        def set_CalendarName(value)
          set_input("CalendarName", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the Count input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The maximum number of calendars to search by name. The default is 15.
        ###

        def set_Count(value)
          set_input("Count", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the SearchCalendarsByName Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class SearchCalendarsByNameResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "CalendarSummary" output from this Choreo execution
      	#
      	# @return String - (string) The summary or calendar name parsed from the Google response.
      	####
      	def get_CalendarSummary()
      	  return @outputs["CalendarSummary"]
      	end
      	####
      	# Retrieve the value for the "CalendarDescription" output from this Choreo execution
      	#
      	# @return String - (string) The calendar description parsed from the Google response.
      	####
      	def get_CalendarDescription()
      	  return @outputs["CalendarDescription"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      	####
      	# Retrieve the value for the "CalendarTimezone" output from this Choreo execution
      	#
      	# @return String - (string) The calendar timezone parsed from the Google response.
      	####
      	def get_CalendarTimezone()
      	  return @outputs["CalendarTimezone"]
      	end
      	####
      	# Retrieve the value for the "CalendarId" output from this Choreo execution
      	#
      	# @return String - (string) The calendar id parsed from the Google response.
      	####
      	def get_CalendarId()
      	  return @outputs["CalendarId"]
      	end
      end

    end # class SearchCalendarsByName



    ##############################################################################
    #
    # SearchEvents
    #
    # Allows you to search for events using a variety of search parameters.
    #
    ##############################################################################

    class SearchEvents < Choreography

      ####
      #  Create a new instance of the SearchEvents Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/SearchEvents")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return SearchEventsInputSet
      ####
      def new_input_set()
        return SearchEventsInputSet.new()
      end

      def make_result_set()
        return SearchEventsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = SearchEventsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the SearchEvents
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class SearchEventsInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the CalendarID input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID for the calendar with the events to retrieve.
        ###

        def set_CalendarID(value)
          set_input("CalendarID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the LastModified input for this Choreo. 
        # 
        # @param String - (optional, date) An event's last modification time (as a RFC 3339 timestamp) to filter by.
        ###

        def set_LastModified(value)
          set_input("LastModified", value)
        end
        #### 
        # Set the value of the MaxAttendees input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned.
        ###

        def set_MaxAttendees(value)
          set_input("MaxAttendees", value)
        end
        #### 
        # Set the value of the MaxResults input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The maximum number of events to return on one result page.
        ###

        def set_MaxResults(value)
          set_input("MaxResults", value)
        end
        #### 
        # Set the value of the MaxTime input for this Choreo. 
        # 
        # @param String - (optional, date) The max start time to filter by (formatted like 2012-05-22T00:47:43.000Z).
        ###

        def set_MaxTime(value)
          set_input("MaxTime", value)
        end
        #### 
        # Set the value of the MinTime input for this Choreo. 
        # 
        # @param String - (optional, date) The minimum start time to filter by (formatted like 2012-05-22T00:47:43.000Z).
        ###

        def set_MinTime(value)
          set_input("MinTime", value)
        end
        #### 
        # Set the value of the OrderBy input for this Choreo. 
        # 
        # @param String - (optional, string) The order of the events returned in the result. Accepted values are: "startTime" (ordered by start date/time. Must set SingleEvents to 1 to use this) or "updated" (ordered by modification date/time).
        ###

        def set_OrderBy(value)
          set_input("OrderBy", value)
        end
        #### 
        # Set the value of the PageToken input for this Choreo. 
        # 
        # @param Integer - (optional, integer) Indicates which result page to return. Used for paging through results.
        ###

        def set_PageToken(value)
          set_input("PageToken", value)
        end
        #### 
        # Set the value of the Query input for this Choreo. 
        # 
        # @param String - (optional, string) A keyword search to find events.
        ###

        def set_Query(value)
          set_input("Query", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the ShowDeleted input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Whether to include deleted events. Set to 1 (true) to include deleted events. Defaults to 0 (false).
        ###

        def set_ShowDeleted(value)
          set_input("ShowDeleted", value)
        end
        #### 
        # Set the value of the ShowHiddenInvitations input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Whether to include hidden invitations in the result. Set to 1 (true) to enable. The default is 0 (false).
        ###

        def set_ShowHiddenInvitations(value)
          set_input("ShowHiddenInvitations", value)
        end
        #### 
        # Set the value of the SingleEvent input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Whether to expand recurring events into instances and only return single one-off events and instances of recurring events. Defaults to 0 (false).
        ###

        def set_SingleEvent(value)
          set_input("SingleEvent", value)
        end
        #### 
        # Set the value of the Timezone input for this Choreo. 
        # 
        # @param String - (optional, string) The time zone used in the response (i.e. America/Los_Angeles). The default is the time zone of the calendar.
        ###

        def set_Timezone(value)
          set_input("Timezone", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the SearchEvents Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class SearchEventsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class SearchEvents



    ##############################################################################
    #
    # UpdateCalendar
    #
    # Updates the metadata for a calendar.
    #
    ##############################################################################

    class UpdateCalendar < Choreography

      ####
      #  Create a new instance of the UpdateCalendar Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Calendar/UpdateCalendar")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return UpdateCalendarInputSet
      ####
      def new_input_set()
        return UpdateCalendarInputSet.new()
      end

      def make_result_set()
        return UpdateCalendarResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = UpdateCalendarResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the UpdateCalendar
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class UpdateCalendarInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the CalendarID input for this Choreo. 
        # 
        # @param String - (required, string) The ID for the calendar to update.
        ###

        def set_CalendarID(value)
          set_input("CalendarID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the NewDescription input for this Choreo. 
        # 
        # @param String - (optional, string) The new description for the calendar to update.
        ###

        def set_NewDescription(value)
          set_input("NewDescription", value)
        end
        #### 
        # Set the value of the NewLocation input for this Choreo. 
        # 
        # @param String - (optional, string) The new location for the calendar to update.
        ###

        def set_NewLocation(value)
          set_input("NewLocation", value)
        end
        #### 
        # Set the value of the NewSummary input for this Choreo. 
        # 
        # @param String - (required, string) The new summary for the calendar to update.
        ###

        def set_NewSummary(value)
          set_input("NewSummary", value)
        end
        #### 
        # Set the value of the NewTimezone input for this Choreo. 
        # 
        # @param String - (optional, string) The new timezone for the calendar to update.
        ###

        def set_NewTimezone(value)
          set_input("NewTimezone", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the UpdateCalendar Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class UpdateCalendarResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. Corresponds to the ResponseFormat input. Defaults to JSON.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class UpdateCalendar




    module Utils



      ##############################################################################
      #
      # DateUtil
      #
      # 
      #
      ##############################################################################

      class DateUtil < Choreography

        ####
        #  Create a new instance of the DateUtil Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Calendar/Utils/DateUtil")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DateUtilInputSet
        ####
        def new_input_set()
          return DateUtilInputSet.new()
        end

        def make_result_set()
          return DateUtilResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DateUtilResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DateUtil
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DateUtilInputSet < Choreography::InputSet

          #### 
          # Set the value of the EndTime input for this Choreo. 
          # 
          # @param String - (conditional, date) 
          ###

          def set_EndTime(value)
            set_input("EndTime", value)
          end
          #### 
          # Set the value of the StartTime input for this Choreo. 
          # 
          # @param String - (conditional, date) 
          ###

          def set_StartTime(value)
            set_input("StartTime", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DateUtil Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DateUtilResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "EndStamp" output from this Choreo execution
        	#
        	# @return String - (date) 
        	####
        	def get_EndStamp()
        	  return @outputs["EndStamp"]
        	end
        	####
        	# Retrieve the value for the "StartStamp" output from this Choreo execution
        	#
        	# @return String - (date) 
        	####
        	def get_StartStamp()
        	  return @outputs["StartStamp"]
        	end
        end

      end # class DateUtil




    end # module Utils

  end # module Calendar

  module ComputeEngine




    module Addresses



      ##############################################################################
      #
      # AggregatedList
      #
      # Retrieves a list of Address resources across all available regions.
      #
      ##############################################################################

      class AggregatedList < Choreography

        ####
        #  Create a new instance of the AggregatedList Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Addresses/AggregatedList")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return AggregatedListInputSet
        ####
        def new_input_set()
          return AggregatedListInputSet.new()
        end

        def make_result_set()
          return AggregatedListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = AggregatedListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the AggregatedList
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class AggregatedListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq your-address-name). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the AggregatedList Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class AggregatedListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class AggregatedList



      ##############################################################################
      #
      # DeleteAddress
      #
      # Deletes a specified address resource.
      #
      ##############################################################################

      class DeleteAddress < Choreography

        ####
        #  Create a new instance of the DeleteAddress Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Addresses/DeleteAddress")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteAddressInputSet
        ####
        def new_input_set()
          return DeleteAddressInputSet.new()
        end

        def make_result_set()
          return DeleteAddressResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteAddressResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteAddress
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteAddressInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the Address input for this Choreo. 
          # 
          # @param String - (required, string) The name of the address to delete.
          ###

          def set_Address(value)
            set_input("Address", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Region input for this Choreo. 
          # 
          # @param String - (required, string) The name of the region associated with this request.
          ###

          def set_Region(value)
            set_input("Region", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteAddress Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteAddressResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class DeleteAddress



      ##############################################################################
      #
      # GetAddress
      #
      # Retrieves information about the specified Address.
      #
      ##############################################################################

      class GetAddress < Choreography

        ####
        #  Create a new instance of the GetAddress Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Addresses/GetAddress")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetAddressInputSet
        ####
        def new_input_set()
          return GetAddressInputSet.new()
        end

        def make_result_set()
          return GetAddressResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetAddressResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetAddress
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetAddressInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the Address input for this Choreo. 
          # 
          # @param String - (required, string) The name of the address to retrieve.
          ###

          def set_Address(value)
            set_input("Address", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Region input for this Choreo. 
          # 
          # @param String - (required, string) The name of the region associated with this request.
          ###

          def set_Region(value)
            set_input("Region", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetAddress Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetAddressResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class GetAddress



      ##############################################################################
      #
      # InsertAddress
      #
      # Creates an Address resource in the specified project.
      #
      ##############################################################################

      class InsertAddress < Choreography

        ####
        #  Create a new instance of the InsertAddress Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Addresses/InsertAddress")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertAddressInputSet
        ####
        def new_input_set()
          return InsertAddressInputSet.new()
        end

        def make_result_set()
          return InsertAddressResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertAddressResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the InsertAddress
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertAddressInputSet < Choreography::InputSet

          #### 
          # Set the value of the AddressResource input for this Choreo. 
          # 
          # @param String - (optional, json) A JSON string containing the address resource properties you wish to set. This can be used as an alternative to individual inputs that represent address resource properties.
          ###

          def set_AddressResource(value)
            set_input("AddressResource", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the Address input for this Choreo. 
          # 
          # @param String - (optional, string) The IP address represented by this resource.
          ###

          def set_Address(value)
            set_input("Address", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Description input for this Choreo. 
          # 
          # @param String - (optional, string) A description of the address.
          ###

          def set_Description(value)
            set_input("Description", value)
          end
          #### 
          # Set the value of the Name input for this Choreo. 
          # 
          # @param String - (conditional, string) The name of the address resource.
          ###

          def set_Name(value)
            set_input("Name", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Region input for this Choreo. 
          # 
          # @param String - (required, string) Name of the region associated with the request.
          ###

          def set_Region(value)
            set_input("Region", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the InsertAddress Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertAddressResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class InsertAddress



      ##############################################################################
      #
      # ListAddresses
      #
      # Retrieves a list of Address resources contained within the specified region
      #
      ##############################################################################

      class ListAddresses < Choreography

        ####
        #  Create a new instance of the ListAddresses Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Addresses/ListAddresses")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListAddressesInputSet
        ####
        def new_input_set()
          return ListAddressesInputSet.new()
        end

        def make_result_set()
          return ListAddressesResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListAddressesResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListAddresses
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListAddressesInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq your-address-name). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Region input for this Choreo. 
          # 
          # @param String - (required, string) The name of the region associated with this request.
          ###

          def set_Region(value)
            set_input("Region", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListAddresses Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListAddressesResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class ListAddresses




    end # module Addresses

    module Disks



      ##############################################################################
      #
      # AggregatedList
      #
      # Retrieves an aggregated list of Disk resources across all zones.
      #
      ##############################################################################

      class AggregatedList < Choreography

        ####
        #  Create a new instance of the AggregatedList Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Disks/AggregatedList")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return AggregatedListInputSet
        ####
        def new_input_set()
          return AggregatedListInputSet.new()
        end

        def make_result_set()
          return AggregatedListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = AggregatedListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the AggregatedList
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class AggregatedListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq your-disk-name). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the AggregatedList Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class AggregatedListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class AggregatedList



      ##############################################################################
      #
      # CreateSnapshot
      #
      # Creates a snapshot of a specified disk.
      #
      ##############################################################################

      class CreateSnapshot < Choreography

        ####
        #  Create a new instance of the CreateSnapshot Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Disks/CreateSnapshot")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return CreateSnapshotInputSet
        ####
        def new_input_set()
          return CreateSnapshotInputSet.new()
        end

        def make_result_set()
          return CreateSnapshotResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = CreateSnapshotResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the CreateSnapshot
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class CreateSnapshotInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Description input for this Choreo. 
          # 
          # @param String - (optional, string) A description for the snapshot resource.
          ###

          def set_Description(value)
            set_input("Description", value)
          end
          #### 
          # Set the value of the Disk input for this Choreo. 
          # 
          # @param String - (required, string) The name of the persistent disk resource to use to create this snapshot.
          ###

          def set_Disk(value)
            set_input("Disk", value)
          end
          #### 
          # Set the value of the Name input for this Choreo. 
          # 
          # @param String - (required, string) The name of the snapshot resource being created.
          ###

          def set_Name(value)
            set_input("Name", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the SourceDiskID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the disk being used to create the snapshot.
          ###

          def set_SourceDiskID(value)
            set_input("SourceDiskID", value)
          end
          #### 
          # Set the value of the StorageBytesStatus input for this Choreo. 
          # 
          # @param String - (optional, string) Indicates whether storageBytes is in a stable state, or it is being adjusted as a result of shared storage reallocation. Valid values: are "UPDATING" AND "UP_TO_DATE".
          ###

          def set_StorageBytesStatus(value)
            set_input("StorageBytesStatus", value)
          end
          #### 
          # Set the value of the StorageBytes input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The size of the storage used by the snapshot.
          ###

          def set_StorageBytes(value)
            set_input("StorageBytes", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the CreateSnapshot Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class CreateSnapshotResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class CreateSnapshot



      ##############################################################################
      #
      # DeleteDisk
      #
      # Deletes the specified Persistent Disk resource.
      #
      ##############################################################################

      class DeleteDisk < Choreography

        ####
        #  Create a new instance of the DeleteDisk Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Disks/DeleteDisk")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteDiskInputSet
        ####
        def new_input_set()
          return DeleteDiskInputSet.new()
        end

        def make_result_set()
          return DeleteDiskResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteDiskResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteDisk
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteDiskInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Disk input for this Choreo. 
          # 
          # @param String - (required, string) The name of the persistent disk resource to delete.
          ###

          def set_Disk(value)
            set_input("Disk", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteDisk Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteDiskResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class DeleteDisk



      ##############################################################################
      #
      # GetDisk
      #
      # Retrieves information about the specified Persistent Disk.
      #
      ##############################################################################

      class GetDisk < Choreography

        ####
        #  Create a new instance of the GetDisk Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Disks/GetDisk")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetDiskInputSet
        ####
        def new_input_set()
          return GetDiskInputSet.new()
        end

        def make_result_set()
          return GetDiskResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetDiskResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetDisk
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetDiskInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Disk input for this Choreo. 
          # 
          # @param String - (required, string) The name of the persistent disk resource to retrieve.
          ###

          def set_Disk(value)
            set_input("Disk", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetDisk Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetDiskResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class GetDisk



      ##############################################################################
      #
      # InsertDisk
      #
      # Creates a Persistent Disk resource in the specified project.
      #
      ##############################################################################

      class InsertDisk < Choreography

        ####
        #  Create a new instance of the InsertDisk Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Disks/InsertDisk")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertDiskInputSet
        ####
        def new_input_set()
          return InsertDiskInputSet.new()
        end

        def make_result_set()
          return InsertDiskResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertDiskResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the InsertDisk
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertDiskInputSet < Choreography::InputSet

          #### 
          # Set the value of the DiskResource input for this Choreo. 
          # 
          # @param String - (optional, json) A JSON string containing the disk resource properties you wish to set. This can be used as an alternative to individual inputs that represent disk properties.
          ###

          def set_DiskResource(value)
            set_input("DiskResource", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Name input for this Choreo. 
          # 
          # @param String - (required, string) The name of the persistent disk resource being created.
          ###

          def set_Name(value)
            set_input("Name", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the SizeGB input for this Choreo. 
          # 
          # @param String - (conditional, string) Size of the persistent disk, specified in GB. This is optional when using a SourceSnapshot or SourceImage, otherwise it is required.
          ###

          def set_SizeGB(value)
            set_input("SizeGB", value)
          end
          #### 
          # Set the value of the SourceImage input for this Choreo. 
          # 
          # @param String - (conditional, string) The URL for the source image to apply to the disk. This is required if SizeGB or SourceSnapshot is not provided.
          ###

          def set_SourceImage(value)
            set_input("SourceImage", value)
          end
          #### 
          # Set the value of the SourceSnapshot input for this Choreo. 
          # 
          # @param String - (conditional, string) The source snapshot used to create this disk. This is required if SizeGB and SourceImage are not specified.
          ###

          def set_SourceSnapshot(value)
            set_input("SourceSnapshot", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the InsertDisk Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertDiskResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class InsertDisk



      ##############################################################################
      #
      # ListDisks
      #
      # Retrieves the list of Disk resources available to the specified project.
      #
      ##############################################################################

      class ListDisks < Choreography

        ####
        #  Create a new instance of the ListDisks Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Disks/ListDisks")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListDisksInputSet
        ####
        def new_input_set()
          return ListDisksInputSet.new()
        end

        def make_result_set()
          return ListDisksResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListDisksResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListDisks
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListDisksInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq europe-west1). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListDisks Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListDisksResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class ListDisks




    end # module Disks

    module Firewalls



      ##############################################################################
      #
      # DeleteFirewall
      #
      # Deletes the specified Firewall resource.
      #
      ##############################################################################

      class DeleteFirewall < Choreography

        ####
        #  Create a new instance of the DeleteFirewall Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Firewalls/DeleteFirewall")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteFirewallInputSet
        ####
        def new_input_set()
          return DeleteFirewallInputSet.new()
        end

        def make_result_set()
          return DeleteFirewallResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteFirewallResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteFirewall
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteFirewallInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Firewall input for this Choreo. 
          # 
          # @param String - (required, string) The name of the firewall to delete.
          ###

          def set_Firewall(value)
            set_input("Firewall", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteFirewall Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteFirewallResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class DeleteFirewall



      ##############################################################################
      #
      # GetFirewall
      #
      # Retrieves information about the specified Firewall.
      #
      ##############################################################################

      class GetFirewall < Choreography

        ####
        #  Create a new instance of the GetFirewall Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Firewalls/GetFirewall")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetFirewallInputSet
        ####
        def new_input_set()
          return GetFirewallInputSet.new()
        end

        def make_result_set()
          return GetFirewallResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetFirewallResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetFirewall
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetFirewallInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Firewall input for this Choreo. 
          # 
          # @param String - (required, string) The name of the firewall to retrieve.
          ###

          def set_Firewall(value)
            set_input("Firewall", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetFirewall Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetFirewallResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class GetFirewall



      ##############################################################################
      #
      # InsertFirewall
      #
      # Creates a Firewall resource in the specified project.
      #
      ##############################################################################

      class InsertFirewall < Choreography

        ####
        #  Create a new instance of the InsertFirewall Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Firewalls/InsertFirewall")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertFirewallInputSet
        ####
        def new_input_set()
          return InsertFirewallInputSet.new()
        end

        def make_result_set()
          return InsertFirewallResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertFirewallResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the InsertFirewall
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertFirewallInputSet < Choreography::InputSet

          #### 
          # Set the value of the FirewallResource input for this Choreo. 
          # 
          # @param String - (optional, json) A JSON string containing the firewall resource properties to set. This can be used as an alternative to individual inputs representing firewall properties.
          ###

          def set_FirewallResource(value)
            set_input("FirewallResource", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the AllowedIPProtocol input for this Choreo. 
          # 
          # @param String - (conditional, json) The IP protocol that is allowed for this rule. This is an array and can have the following properties: IPProtocol (valid values are: tcp, udp, or icmp) and ports[].
          ###

          def set_AllowedIPProtocol(value)
            set_input("AllowedIPProtocol", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Description input for this Choreo. 
          # 
          # @param String - (optional, string) A description of the firewall.
          ###

          def set_Description(value)
            set_input("Description", value)
          end
          #### 
          # Set the value of the Name input for this Choreo. 
          # 
          # @param String - (conditional, string) The name of the firewall resource being created.
          ###

          def set_Name(value)
            set_input("Name", value)
          end
          #### 
          # Set the value of the Network input for this Choreo. 
          # 
          # @param String - (conditional, string) The fully-qualified URL of the network to which this firewall is applied.
          ###

          def set_Network(value)
            set_input("Network", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the SourceRanges input for this Choreo. 
          # 
          # @param String - (conditional, json) An array of address blocks that this rule applies to. This is required if the SourceTags input is not provided.
          ###

          def set_SourceRanges(value)
            set_input("SourceRanges", value)
          end
          #### 
          # Set the value of the SourceTags input for this Choreo. 
          # 
          # @param String - (conditional, json) An array of instance tags which this rule applies to. This is required unless the SourceRanges input is provided.
          ###

          def set_SourceTags(value)
            set_input("SourceTags", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the InsertFirewall Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertFirewallResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class InsertFirewall



      ##############################################################################
      #
      # ListFirewalls
      #
      # Retrieves the list of Firewall resources for the specified project.
      #
      ##############################################################################

      class ListFirewalls < Choreography

        ####
        #  Create a new instance of the ListFirewalls Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Firewalls/ListFirewalls")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListFirewallsInputSet
        ####
        def new_input_set()
          return ListFirewallsInputSet.new()
        end

        def make_result_set()
          return ListFirewallsResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListFirewallsResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListFirewalls
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListFirewallsInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq default-ssh). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListFirewalls Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListFirewallsResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class ListFirewalls



      ##############################################################################
      #
      # UpdateFirewall
      #
      # Updates an existing Firewall resource.
      #
      ##############################################################################

      class UpdateFirewall < Choreography

        ####
        #  Create a new instance of the UpdateFirewall Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Firewalls/UpdateFirewall")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return UpdateFirewallInputSet
        ####
        def new_input_set()
          return UpdateFirewallInputSet.new()
        end

        def make_result_set()
          return UpdateFirewallResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = UpdateFirewallResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the UpdateFirewall
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class UpdateFirewallInputSet < Choreography::InputSet

          #### 
          # Set the value of the FirewallResource input for this Choreo. 
          # 
          # @param String - (required, json) A JSON string containing the firewall resource fields to set. Required properties include: allowed, name, network, and either sourceRanges or sourceTags.
          ###

          def set_FirewallResource(value)
            set_input("FirewallResource", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Firewall input for this Choreo. 
          # 
          # @param String - (required, string) The name of the firewall to update.
          ###

          def set_Firewall(value)
            set_input("Firewall", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the UpdateFirewall Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class UpdateFirewallResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class UpdateFirewall




    end # module Firewalls

    module GlobalOperations



      ##############################################################################
      #
      # AggregatedList
      #
      # Retrieves a list of all Global Operation resources grouped by scope.
      #
      ##############################################################################

      class AggregatedList < Choreography

        ####
        #  Create a new instance of the AggregatedList Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/GlobalOperations/AggregatedList")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return AggregatedListInputSet
        ####
        def new_input_set()
          return AggregatedListInputSet.new()
        end

        def make_result_set()
          return AggregatedListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = AggregatedListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the AggregatedList
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class AggregatedListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq operation-1234). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the AggregatedList Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class AggregatedListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class AggregatedList



      ##############################################################################
      #
      # DeleteGlobalOperation
      #
      # Deletes the specified Global Operation.
      #
      ##############################################################################

      class DeleteGlobalOperation < Choreography

        ####
        #  Create a new instance of the DeleteGlobalOperation Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/GlobalOperations/DeleteGlobalOperation")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteGlobalOperationInputSet
        ####
        def new_input_set()
          return DeleteGlobalOperationInputSet.new()
        end

        def make_result_set()
          return DeleteGlobalOperationResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteGlobalOperationResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteGlobalOperation
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteGlobalOperationInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Operation input for this Choreo. 
          # 
          # @param String - (required, string) The name of the operation to delete.
          ###

          def set_Operation(value)
            set_input("Operation", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteGlobalOperation Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteGlobalOperationResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "ResponseStatusCode" output from this Choreo execution
        	#
        	# @return String - (integer) The response status code returned from Google. A 204 is expected for a successful delete operation.
        	####
        	def get_ResponseStatusCode()
        	  return @outputs["ResponseStatusCode"]
        	end
        end

      end # class DeleteGlobalOperation



      ##############################################################################
      #
      # GetGlobalOperation
      #
      # Retrieves information about the specified Global Operation.
      #
      ##############################################################################

      class GetGlobalOperation < Choreography

        ####
        #  Create a new instance of the GetGlobalOperation Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/GlobalOperations/GetGlobalOperation")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetGlobalOperationInputSet
        ####
        def new_input_set()
          return GetGlobalOperationInputSet.new()
        end

        def make_result_set()
          return GetGlobalOperationResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetGlobalOperationResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetGlobalOperation
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetGlobalOperationInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Operation input for this Choreo. 
          # 
          # @param String - (required, string) The name of the operation to retrieve.
          ###

          def set_Operation(value)
            set_input("Operation", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetGlobalOperation Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetGlobalOperationResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class GetGlobalOperation



      ##############################################################################
      #
      # ListGlobalOperations
      #
      # Retrieves a list of GlobalOperations resources contained within the specified project.
      #
      ##############################################################################

      class ListGlobalOperations < Choreography

        ####
        #  Create a new instance of the ListGlobalOperations Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/GlobalOperations/ListGlobalOperations")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListGlobalOperationsInputSet
        ####
        def new_input_set()
          return ListGlobalOperationsInputSet.new()
        end

        def make_result_set()
          return ListGlobalOperationsResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListGlobalOperationsResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListGlobalOperations
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListGlobalOperationsInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq operation-1234). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListGlobalOperations Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListGlobalOperationsResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class ListGlobalOperations




    end # module GlobalOperations

    module Images



      ##############################################################################
      #
      # DeleteImage
      #
      # Deletes the specified Image resource.
      #
      ##############################################################################

      class DeleteImage < Choreography

        ####
        #  Create a new instance of the DeleteImage Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Images/DeleteImage")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteImageInputSet
        ####
        def new_input_set()
          return DeleteImageInputSet.new()
        end

        def make_result_set()
          return DeleteImageResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteImageResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteImage
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteImageInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Image input for this Choreo. 
          # 
          # @param String - (required, string) The name of the Image to delete.
          ###

          def set_Image(value)
            set_input("Image", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteImage Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteImageResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class DeleteImage



      ##############################################################################
      #
      # GetImage
      #
      # Retrieves information about the specified Image.
      #
      ##############################################################################

      class GetImage < Choreography

        ####
        #  Create a new instance of the GetImage Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Images/GetImage")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetImageInputSet
        ####
        def new_input_set()
          return GetImageInputSet.new()
        end

        def make_result_set()
          return GetImageResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetImageResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetImage
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetImageInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Image input for this Choreo. 
          # 
          # @param String - (required, string) The name of the Image to retrieve.
          ###

          def set_Image(value)
            set_input("Image", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetImage Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetImageResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class GetImage



      ##############################################################################
      #
      # InsertImage
      #
      # Creates a new custom Image resource in the specified project.
      #
      ##############################################################################

      class InsertImage < Choreography

        ####
        #  Create a new instance of the InsertImage Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Images/InsertImage")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertImageInputSet
        ####
        def new_input_set()
          return InsertImageInputSet.new()
        end

        def make_result_set()
          return InsertImageResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertImageResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the InsertImage
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertImageInputSet < Choreography::InputSet

          #### 
          # Set the value of the ImageResource input for this Choreo. 
          # 
          # @param String - (optional, json) A JSON string containing the image resource properties to set. This can used as an alternative to individual inputs representing image properties.
          ###

          def set_ImageResource(value)
            set_input("ImageResource", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Description input for this Choreo. 
          # 
          # @param String - (optional, string) A description of the image.
          ###

          def set_Description(value)
            set_input("Description", value)
          end
          #### 
          # Set the value of the Name input for this Choreo. 
          # 
          # @param String - (conditional, string) The name of the image.
          ###

          def set_Name(value)
            set_input("Name", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RawDiskSource input for this Choreo. 
          # 
          # @param String - (conditional, string) The full Google Cloud Storage URL where the disk image is stored.
          ###

          def set_RawDiskSource(value)
            set_input("RawDiskSource", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the InsertImage Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertImageResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class InsertImage



      ##############################################################################
      #
      # ListImages
      #
      # Retrieves a list of Image resources for the specified project.
      #
      ##############################################################################

      class ListImages < Choreography

        ####
        #  Create a new instance of the ListImages Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Images/ListImages")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListImagesInputSet
        ####
        def new_input_set()
          return ListImagesInputSet.new()
        end

        def make_result_set()
          return ListImagesResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListImagesResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListImages
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListImagesInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq testimage). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListImages Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListImagesResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class ListImages




    end # module Images

    module Instances



      ##############################################################################
      #
      # AddAccessConfig
      #
      # Adds an access config to an instance's network interface.
      #
      ##############################################################################

      class AddAccessConfig < Choreography

        ####
        #  Create a new instance of the AddAccessConfig Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/AddAccessConfig")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return AddAccessConfigInputSet
        ####
        def new_input_set()
          return AddAccessConfigInputSet.new()
        end

        def make_result_set()
          return AddAccessConfigResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = AddAccessConfigResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the AddAccessConfig
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class AddAccessConfigInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessConfiguration input for this Choreo. 
          # 
          # @param String - (optional, json) A JSON string containing the access configuration properties you wish to set. This can be used as an alternative to individual inputs that represent access configuration properties.
          ###

          def set_AccessConfiguration(value)
            set_input("AccessConfiguration", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Instance input for this Choreo. 
          # 
          # @param String - (required, string) Name of the instance for which to add an access configuration.
          ###

          def set_Instance(value)
            set_input("Instance", value)
          end
          #### 
          # Set the value of the Name input for this Choreo. 
          # 
          # @param String - (optional, string) The name of this access configuration. Defaults to "External NAT" if not specified.
          ###

          def set_Name(value)
            set_input("Name", value)
          end
          #### 
          # Set the value of the NatIP input for this Choreo. 
          # 
          # @param String - (optional, string) An external IP address associated with this instance. Specify an unused static IP address available to the project. An external IP will be drawn from a shared ephemeral pool when not specified.
          ###

          def set_NatIP(value)
            set_input("NatIP", value)
          end
          #### 
          # Set the value of the NetworkInterface input for this Choreo. 
          # 
          # @param String - (required, string) The name of the network interface to add the access config (e.g. nic0, nic1, etc).
          ###

          def set_NetworkInterface(value)
            set_input("NetworkInterface", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Type input for this Choreo. 
          # 
          # @param String - (required, string) Type of configuration. Must be set to ONE_TO_ONE_NAT.
          ###

          def set_Type(value)
            set_input("Type", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the AddAccessConfig Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class AddAccessConfigResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class AddAccessConfig



      ##############################################################################
      #
      # AggregatedList
      #
      # Retrieves a list of Instance resources across all available zones.
      #
      ##############################################################################

      class AggregatedList < Choreography

        ####
        #  Create a new instance of the AggregatedList Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/AggregatedList")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return AggregatedListInputSet
        ####
        def new_input_set()
          return AggregatedListInputSet.new()
        end

        def make_result_set()
          return AggregatedListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = AggregatedListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the AggregatedList
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class AggregatedListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq my_instance). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the AggregatedList Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class AggregatedListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class AggregatedList



      ##############################################################################
      #
      # AttachDisk
      #
      # Attaches a Disk resource to an instance.
      #
      ##############################################################################

      class AttachDisk < Choreography

        ####
        #  Create a new instance of the AttachDisk Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/AttachDisk")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return AttachDiskInputSet
        ####
        def new_input_set()
          return AttachDiskInputSet.new()
        end

        def make_result_set()
          return AttachDiskResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = AttachDiskResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the AttachDisk
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class AttachDiskInputSet < Choreography::InputSet

          #### 
          # Set the value of the AttachedDisk input for this Choreo. 
          # 
          # @param String - (optional, json) A JSON string containing the attached disk properties to set. This can be used as an alternative to the individual inputs representing the attached disk properties.
          ###

          def set_AttachedDisk(value)
            set_input("AttachedDisk", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the Boot input for this Choreo. 
          # 
          # @param Boolean - (conditional, boolean) Whether or not this is a boot disk. Valid values are: true or false.
          ###

          def set_Boot(value)
            set_input("Boot", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the DeviceName input for this Choreo. 
          # 
          # @param String - (conditional, string) The name of the disk to attach.
          ###

          def set_DeviceName(value)
            set_input("DeviceName", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Instance input for this Choreo. 
          # 
          # @param String - (required, string) The name of the instance to attach a disk resource to.
          ###

          def set_Instance(value)
            set_input("Instance", value)
          end
          #### 
          # Set the value of the Mode input for this Choreo. 
          # 
          # @param String - (conditional, string) The mode in which to attach the disk. Valid values are: READ_WRITE or READ_ONLY.
          ###

          def set_Mode(value)
            set_input("Mode", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Source input for this Choreo. 
          # 
          # @param String - (conditional, string) The URL to the Disk resource.
          ###

          def set_Source(value)
            set_input("Source", value)
          end
          #### 
          # Set the value of the Type input for this Choreo. 
          # 
          # @param String - (conditional, string) The type of disk. Valid values are: SCRATCH or PERSISTENT. Persistent disks must already exist before you can attach them.
          ###

          def set_Type(value)
            set_input("Type", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the AttachDisk Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class AttachDiskResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class AttachDisk



      ##############################################################################
      #
      # DeleteAccessConfig
      #
      # Deletes an access configuation from an instance's network interface.
      #
      ##############################################################################

      class DeleteAccessConfig < Choreography

        ####
        #  Create a new instance of the DeleteAccessConfig Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/DeleteAccessConfig")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteAccessConfigInputSet
        ####
        def new_input_set()
          return DeleteAccessConfigInputSet.new()
        end

        def make_result_set()
          return DeleteAccessConfigResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteAccessConfigResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteAccessConfig
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteAccessConfigInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessConfig input for this Choreo. 
          # 
          # @param String - (required, string) The name of the access configuration to delete.
          ###

          def set_AccessConfig(value)
            set_input("AccessConfig", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Instance input for this Choreo. 
          # 
          # @param String - (required, string) The name of the instance that this access configuration applies to.
          ###

          def set_Instance(value)
            set_input("Instance", value)
          end
          #### 
          # Set the value of the NetworkInterface input for this Choreo. 
          # 
          # @param String - (required, string) The name of the network interface associated with the access config that is being deleted.
          ###

          def set_NetworkInterface(value)
            set_input("NetworkInterface", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteAccessConfig Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteAccessConfigResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class DeleteAccessConfig



      ##############################################################################
      #
      # DeleteInstance
      #
      # Deletes the specified Instance resource.
      #
      ##############################################################################

      class DeleteInstance < Choreography

        ####
        #  Create a new instance of the DeleteInstance Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/DeleteInstance")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteInstanceInputSet
        ####
        def new_input_set()
          return DeleteInstanceInputSet.new()
        end

        def make_result_set()
          return DeleteInstanceResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteInstanceResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteInstance
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteInstanceInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Instance input for this Choreo. 
          # 
          # @param String - (required, string) The name of the instance to delete.
          ###

          def set_Instance(value)
            set_input("Instance", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request. 
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteInstance Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteInstanceResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class DeleteInstance



      ##############################################################################
      #
      # DetachDisk
      #
      # Detaches a Disk resource from an instance.
      #
      ##############################################################################

      class DetachDisk < Choreography

        ####
        #  Create a new instance of the DetachDisk Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/DetachDisk")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DetachDiskInputSet
        ####
        def new_input_set()
          return DetachDiskInputSet.new()
        end

        def make_result_set()
          return DetachDiskResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DetachDiskResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DetachDisk
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DetachDiskInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the DeviceName input for this Choreo. 
          # 
          # @param String - (required, string) The name of the disk to detach.
          ###

          def set_DeviceName(value)
            set_input("DeviceName", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Instance input for this Choreo. 
          # 
          # @param String - (required, string) The name of the instance that is associated with the disk to detach.
          ###

          def set_Instance(value)
            set_input("Instance", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DetachDisk Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DetachDiskResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class DetachDisk



      ##############################################################################
      #
      # GetInstance
      #
      # Retrieves information about the specified Instance.
      #
      ##############################################################################

      class GetInstance < Choreography

        ####
        #  Create a new instance of the GetInstance Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/GetInstance")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInstanceInputSet
        ####
        def new_input_set()
          return GetInstanceInputSet.new()
        end

        def make_result_set()
          return GetInstanceResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetInstanceResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetInstance
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInstanceInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Instance input for this Choreo. 
          # 
          # @param String - (required, string) The name of the instance to retrieve.
          ###

          def set_Instance(value)
            set_input("Instance", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetInstance Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetInstanceResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class GetInstance



      ##############################################################################
      #
      # GetSerialPortOutput
      #
      # Returns the specified instance's serial port output.
      #
      ##############################################################################

      class GetSerialPortOutput < Choreography

        ####
        #  Create a new instance of the GetSerialPortOutput Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/GetSerialPortOutput")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetSerialPortOutputInputSet
        ####
        def new_input_set()
          return GetSerialPortOutputInputSet.new()
        end

        def make_result_set()
          return GetSerialPortOutputResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetSerialPortOutputResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetSerialPortOutput
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetSerialPortOutputInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Instance input for this Choreo. 
          # 
          # @param String - (required, string) The name of the instance associated with the serial port output to retrieve.
          ###

          def set_Instance(value)
            set_input("Instance", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetSerialPortOutput Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetSerialPortOutputResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class GetSerialPortOutput



      ##############################################################################
      #
      # InsertInstance
      #
      # Creates an Instance resource in the specified project.
      #
      ##############################################################################

      class InsertInstance < Choreography

        ####
        #  Create a new instance of the InsertInstance Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/InsertInstance")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertInstanceInputSet
        ####
        def new_input_set()
          return InsertInstanceInputSet.new()
        end

        def make_result_set()
          return InsertInstanceResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertInstanceResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the InsertInstance
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertInstanceInputSet < Choreography::InputSet

          #### 
          # Set the value of the InstanceResource input for this Choreo. 
          # 
          # @param String - (optional, json) A JSON string containing the instance resource properties to set. This an be used as an alternative to individual inputs representing instance properties.
          ###

          def set_InstanceResource(value)
            set_input("InstanceResource", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Description input for this Choreo. 
          # 
          # @param String - (optional, string) The description of the instance.
          ###

          def set_Description(value)
            set_input("Description", value)
          end
          #### 
          # Set the value of the Disks input for this Choreo. 
          # 
          # @param String - (conditional, json) An array of persistent disks. This array contains the following properties: source, type, and boot.
          ###

          def set_Disks(value)
            set_input("Disks", value)
          end
          #### 
          # Set the value of the MachineType input for this Choreo. 
          # 
          # @param String - (conditional, string) The fully-qualified URL of the machine type resource to use for this instance.
          ###

          def set_MachineType(value)
            set_input("MachineType", value)
          end
          #### 
          # Set the value of the Name input for this Choreo. 
          # 
          # @param String - (conditional, string) The name of the instance being created.
          ###

          def set_Name(value)
            set_input("Name", value)
          end
          #### 
          # Set the value of the NetworkInterfaces input for this Choreo. 
          # 
          # @param String - (conditional, json) An array of network configurations for this instance. This array contains the following properties: network, accessConfigs[], accessConfigs[].name, and accessConfigs[].type.
          ###

          def set_NetworkInterfaces(value)
            set_input("NetworkInterfaces", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the InsertInstance Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertInstanceResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class InsertInstance



      ##############################################################################
      #
      # ListInstances
      #
      # Retrieves the list of Instance resources contained within the specified Zone.
      #
      ##############################################################################

      class ListInstances < Choreography

        ####
        #  Create a new instance of the ListInstances Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/ListInstances")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInstancesInputSet
        ####
        def new_input_set()
          return ListInstancesInputSet.new()
        end

        def make_result_set()
          return ListInstancesResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListInstancesResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListInstances
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInstancesInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq testinstance). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListInstances Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListInstancesResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class ListInstances



      ##############################################################################
      #
      # SetMetadata
      #
      # Sets the metadata for the specified instance.
      #
      ##############################################################################

      class SetMetadata < Choreography

        ####
        #  Create a new instance of the SetMetadata Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/SetMetadata")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return SetMetadataInputSet
        ####
        def new_input_set()
          return SetMetadataInputSet.new()
        end

        def make_result_set()
          return SetMetadataResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = SetMetadataResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the SetMetadata
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class SetMetadataInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fingerprint input for this Choreo. 
          # 
          # @param String - (required, string) The current fingerprint of this resource. You must provide the current version of the fingerprint to successfully update any metadata.
          ###

          def set_Fingerprint(value)
            set_input("Fingerprint", value)
          end
          #### 
          # Set the value of the Instance input for this Choreo. 
          # 
          # @param String - (required, string) The name of the instance that you're setting metadata for.
          ###

          def set_Instance(value)
            set_input("Instance", value)
          end
          #### 
          # Set the value of the Items input for this Choreo. 
          # 
          # @param String - (required, json) An array of key/value pairs. The total size of the keys and values should not exceed 512 KB.
          ###

          def set_Items(value)
            set_input("Items", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the SetMetadata Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class SetMetadataResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class SetMetadata



      ##############################################################################
      #
      # SetTags
      #
      # Sets tags for the specified instance.
      #
      ##############################################################################

      class SetTags < Choreography

        ####
        #  Create a new instance of the SetTags Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Instances/SetTags")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return SetTagsInputSet
        ####
        def new_input_set()
          return SetTagsInputSet.new()
        end

        def make_result_set()
          return SetTagsResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = SetTagsResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the SetTags
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class SetTagsInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fingerprint input for this Choreo. 
          # 
          # @param String - (required, string) The current fingerprint of this resource. You must provide the current version of the fingerprint to successfully update tags.
          ###

          def set_Fingerprint(value)
            set_input("Fingerprint", value)
          end
          #### 
          # Set the value of the Instance input for this Choreo. 
          # 
          # @param String - (required, string) The name of the instance that you're setting tags for.
          ###

          def set_Instance(value)
            set_input("Instance", value)
          end
          #### 
          # Set the value of the Items input for this Choreo. 
          # 
          # @param String - (required, json) An array of tags. The max length of a tag is 63 characters.
          ###

          def set_Items(value)
            set_input("Items", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with this request.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the SetTags Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class SetTagsResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class SetTags




    end # module Instances

    module MachineTypes



      ##############################################################################
      #
      # AggregatedList
      #
      # Retrieves a list of Machine Type resources across all available zones.
      #
      ##############################################################################

      class AggregatedList < Choreography

        ####
        #  Create a new instance of the AggregatedList Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/MachineTypes/AggregatedList")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return AggregatedListInputSet
        ####
        def new_input_set()
          return AggregatedListInputSet.new()
        end

        def make_result_set()
          return AggregatedListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = AggregatedListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the AggregatedList
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class AggregatedListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq eq f1-micro). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the AggregatedList Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class AggregatedListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class AggregatedList



      ##############################################################################
      #
      # GetMachineType
      #
      # Retrieves information about the specified Machine Type.
      #
      ##############################################################################

      class GetMachineType < Choreography

        ####
        #  Create a new instance of the GetMachineType Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/MachineTypes/GetMachineType")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetMachineTypeInputSet
        ####
        def new_input_set()
          return GetMachineTypeInputSet.new()
        end

        def make_result_set()
          return GetMachineTypeResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetMachineTypeResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetMachineType
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetMachineTypeInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the MachineType input for this Choreo. 
          # 
          # @param String - (required, string) The name of the machine type to retrieve.
          ###

          def set_MachineType(value)
            set_input("MachineType", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone that contains the machine type to retrieve.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetMachineType Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetMachineTypeResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class GetMachineType



      ##############################################################################
      #
      # ListMachineTypes
      #
      # Retrieves the list of Machine Type resources for the specified project.
      #
      ##############################################################################

      class ListMachineTypes < Choreography

        ####
        #  Create a new instance of the ListMachineTypes Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/MachineTypes/ListMachineTypes")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListMachineTypesInputSet
        ####
        def new_input_set()
          return ListMachineTypesInputSet.new()
        end

        def make_result_set()
          return ListMachineTypesResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListMachineTypesResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListMachineTypes
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListMachineTypesInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq f1-micro). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone that contains the machine type resources to retrieve.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListMachineTypes Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListMachineTypesResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class ListMachineTypes




    end # module MachineTypes

    module Networks



      ##############################################################################
      #
      # DeleteNetwork
      #
      # Deletes the specified Network resource.
      #
      ##############################################################################

      class DeleteNetwork < Choreography

        ####
        #  Create a new instance of the DeleteNetwork Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Networks/DeleteNetwork")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteNetworkInputSet
        ####
        def new_input_set()
          return DeleteNetworkInputSet.new()
        end

        def make_result_set()
          return DeleteNetworkResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteNetworkResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteNetwork
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteNetworkInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Network input for this Choreo. 
          # 
          # @param String - (required, string) The name of the network to delete.
          ###

          def set_Network(value)
            set_input("Network", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteNetwork Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteNetworkResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class DeleteNetwork



      ##############################################################################
      #
      # GetNetwork
      #
      # Retrieves information about the specified Network.
      #
      ##############################################################################

      class GetNetwork < Choreography

        ####
        #  Create a new instance of the GetNetwork Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Networks/GetNetwork")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetNetworkInputSet
        ####
        def new_input_set()
          return GetNetworkInputSet.new()
        end

        def make_result_set()
          return GetNetworkResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetNetworkResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetNetwork
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetNetworkInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Network input for this Choreo. 
          # 
          # @param String - (required, string) The name of the network to retrieve.
          ###

          def set_Network(value)
            set_input("Network", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetNetwork Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetNetworkResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class GetNetwork



      ##############################################################################
      #
      # InsertNetwork
      #
      # Creates a new Network resource in the specified project.
      #
      ##############################################################################

      class InsertNetwork < Choreography

        ####
        #  Create a new instance of the InsertNetwork Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Networks/InsertNetwork")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertNetworkInputSet
        ####
        def new_input_set()
          return InsertNetworkInputSet.new()
        end

        def make_result_set()
          return InsertNetworkResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertNetworkResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the InsertNetwork
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertNetworkInputSet < Choreography::InputSet

          #### 
          # Set the value of the NetworkResource input for this Choreo. 
          # 
          # @param String - (optional, json) A JSON string containing the network resource properties you wish to set. This can be used as an alternative to individual inputs that represent network resource properties.
          ###

          def set_NetworkResource(value)
            set_input("NetworkResource", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Description input for this Choreo. 
          # 
          # @param String - (optional, string) A description of the network.
          ###

          def set_Description(value)
            set_input("Description", value)
          end
          #### 
          # Set the value of the GatewayIP input for this Choreo. 
          # 
          # @param String - (optional, string) An optional address used for default routing to other networks. Must be within the range specified by IPRange.
          ###

          def set_GatewayIP(value)
            set_input("GatewayIP", value)
          end
          #### 
          # Set the value of the IPRange input for this Choreo. 
          # 
          # @param String - (conditional, string) The range of internal addresses that are allowed on the network.
          ###

          def set_IPRange(value)
            set_input("IPRange", value)
          end
          #### 
          # Set the value of the Name input for this Choreo. 
          # 
          # @param String - (conditional, string) The name of the network.
          ###

          def set_Name(value)
            set_input("Name", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the InsertNetwork Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertNetworkResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class InsertNetwork



      ##############################################################################
      #
      # ListNetworks
      #
      # Retrieves the list of Network resources for the specified project.
      #
      ##############################################################################

      class ListNetworks < Choreography

        ####
        #  Create a new instance of the ListNetworks Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Networks/ListNetworks")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListNetworksInputSet
        ####
        def new_input_set()
          return ListNetworksInputSet.new()
        end

        def make_result_set()
          return ListNetworksResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListNetworksResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListNetworks
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListNetworksInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq default). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListNetworks Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListNetworksResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class ListNetworks




    end # module Networks

    module Projects



      ##############################################################################
      #
      # GetProject
      #
      # Retrieves the specified Project resource.
      #
      ##############################################################################

      class GetProject < Choreography

        ####
        #  Create a new instance of the GetProject Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Projects/GetProject")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetProjectInputSet
        ####
        def new_input_set()
          return GetProjectInputSet.new()
        end

        def make_result_set()
          return GetProjectResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetProjectResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetProject
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetProjectInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetProject Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetProjectResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class GetProject



      ##############################################################################
      #
      # SetCommonInstanceMetadata
      #
      # Sets metadata common to all instances within the specified Project.
      #
      ##############################################################################

      class SetCommonInstanceMetadata < Choreography

        ####
        #  Create a new instance of the SetCommonInstanceMetadata Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Projects/SetCommonInstanceMetadata")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return SetCommonInstanceMetadataInputSet
        ####
        def new_input_set()
          return SetCommonInstanceMetadataInputSet.new()
        end

        def make_result_set()
          return SetCommonInstanceMetadataResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = SetCommonInstanceMetadataResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the SetCommonInstanceMetadata
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class SetCommonInstanceMetadataInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fingerprint input for this Choreo. 
          # 
          # @param String - (required, string) The fingerprint of this resource, which is a hash of the metadata's contents. This field is used for optimistic locking. Providing an up-to-date metadata fingerprint is required to modify metadata.
          ###

          def set_Fingerprint(value)
            set_input("Fingerprint", value)
          end
          #### 
          # Set the value of the Items input for this Choreo. 
          # 
          # @param String - (conditional, json) An array of key/value pairs. The max size of all keys and values is 512 KB.
          ###

          def set_Items(value)
            set_input("Items", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the SetCommonInstanceMetadata Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class SetCommonInstanceMetadataResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class SetCommonInstanceMetadata




    end # module Projects
    ##############################################################################
    #
    # RefreshToken
    #
    # Retrieves a new access token when the provided access token is expired.
    #
    ##############################################################################

    class RefreshToken < Choreography

      ####
      #  Create a new instance of the RefreshToken Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/ComputeEngine/RefreshToken")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RefreshTokenInputSet
      ####
      def new_input_set()
        return RefreshTokenInputSet.new()
      end

      def make_result_set()
        return RefreshTokenResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RefreshTokenResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RefreshToken
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RefreshTokenInputSet < Choreography::InputSet

        #### 
        # Set the value of the ClientId input for this Choreo. 
        # 
        # @param String - (required, string) The client id provided by Google Pacasa when you sign up for an account
        ###

        def set_ClientId(value)
          set_input("ClientId", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The client secret provided by Google Picasa when you sign up for an account
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the Oauth process to be used when your access token expires
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RefreshToken Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RefreshTokenResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (string) The access token that is parsed from the request to refresh the token
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      end

    end # class RefreshToken




    module RegionOperations



      ##############################################################################
      #
      # DeleteRegionOperation
      #
      # Deletes the specified operation within a region.
      #
      ##############################################################################

      class DeleteRegionOperation < Choreography

        ####
        #  Create a new instance of the DeleteRegionOperation Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/RegionOperations/DeleteRegionOperation")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteRegionOperationInputSet
        ####
        def new_input_set()
          return DeleteRegionOperationInputSet.new()
        end

        def make_result_set()
          return DeleteRegionOperationResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteRegionOperationResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteRegionOperation
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteRegionOperationInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Operation input for this Choreo. 
          # 
          # @param String - (required, string) The name of the operation to delete.
          ###

          def set_Operation(value)
            set_input("Operation", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Region input for this Choreo. 
          # 
          # @param String - (required, string) The name of the region associated with the request.
          ###

          def set_Region(value)
            set_input("Region", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteRegionOperation Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteRegionOperationResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "ResponseStatusCode" output from this Choreo execution
        	#
        	# @return String - (integer) The response status code returned from Google. A 204 is expected for a successful delete operation.
        	####
        	def get_ResponseStatusCode()
        	  return @outputs["ResponseStatusCode"]
        	end
        end

      end # class DeleteRegionOperation



      ##############################################################################
      #
      # GetRegionOperation
      #
      # Retrieves information about the specified operation within a region.
      #
      ##############################################################################

      class GetRegionOperation < Choreography

        ####
        #  Create a new instance of the GetRegionOperation Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/RegionOperations/GetRegionOperation")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetRegionOperationInputSet
        ####
        def new_input_set()
          return GetRegionOperationInputSet.new()
        end

        def make_result_set()
          return GetRegionOperationResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetRegionOperationResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetRegionOperation
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetRegionOperationInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Operation input for this Choreo. 
          # 
          # @param String - (required, string) The name of the operation to retrieve.
          ###

          def set_Operation(value)
            set_input("Operation", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Region input for this Choreo. 
          # 
          # @param String - (required, string) The name of the region associated with the request.
          ###

          def set_Region(value)
            set_input("Region", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetRegionOperation Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetRegionOperationResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class GetRegionOperation



      ##############################################################################
      #
      # ListRegionOperations
      #
      # Retrieves a list of operation resources contained within the specified region.
      #
      ##############################################################################

      class ListRegionOperations < Choreography

        ####
        #  Create a new instance of the ListRegionOperations Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/RegionOperations/ListRegionOperations")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListRegionOperationsInputSet
        ####
        def new_input_set()
          return ListRegionOperationsInputSet.new()
        end

        def make_result_set()
          return ListRegionOperationsResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListRegionOperationsResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListRegionOperations
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListRegionOperationsInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq operation-1234). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Region input for this Choreo. 
          # 
          # @param String - (required, string) The name of the region associated with this request.
          ###

          def set_Region(value)
            set_input("Region", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListRegionOperations Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListRegionOperationsResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class ListRegionOperations




    end # module RegionOperations

    module Regions



      ##############################################################################
      #
      # GetRegion
      #
      # Retrieves information about the specified Region.
      #
      ##############################################################################

      class GetRegion < Choreography

        ####
        #  Create a new instance of the GetRegion Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Regions/GetRegion")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetRegionInputSet
        ####
        def new_input_set()
          return GetRegionInputSet.new()
        end

        def make_result_set()
          return GetRegionResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetRegionResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetRegion
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetRegionInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Region input for this Choreo. 
          # 
          # @param String - (required, string) The name of the region to retrieve.
          ###

          def set_Region(value)
            set_input("Region", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetRegion Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetRegionResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class GetRegion



      ##############################################################################
      #
      # ListRegions
      #
      # Retrieves the list of Regions available to the specified project.
      #
      ##############################################################################

      class ListRegions < Choreography

        ####
        #  Create a new instance of the ListRegions Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Regions/ListRegions")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListRegionsInputSet
        ####
        def new_input_set()
          return ListRegionsInputSet.new()
        end

        def make_result_set()
          return ListRegionsResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListRegionsResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListRegions
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListRegionsInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq europe-west1). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListRegions Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListRegionsResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class ListRegions




    end # module Regions

    module Routes



      ##############################################################################
      #
      # DeleteRoute
      #
      # Deletes the specified Route.
      #
      ##############################################################################

      class DeleteRoute < Choreography

        ####
        #  Create a new instance of the DeleteRoute Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Routes/DeleteRoute")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteRouteInputSet
        ####
        def new_input_set()
          return DeleteRouteInputSet.new()
        end

        def make_result_set()
          return DeleteRouteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteRouteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteRoute
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteRouteInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Route input for this Choreo. 
          # 
          # @param String - (required, string) The name of the route to delete.
          ###

          def set_Route(value)
            set_input("Route", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteRoute Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteRouteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class DeleteRoute



      ##############################################################################
      #
      # GetRoute
      #
      # Retrieves information about the specified Route.
      #
      ##############################################################################

      class GetRoute < Choreography

        ####
        #  Create a new instance of the GetRoute Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Routes/GetRoute")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetRouteInputSet
        ####
        def new_input_set()
          return GetRouteInputSet.new()
        end

        def make_result_set()
          return GetRouteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetRouteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetRoute
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetRouteInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response..
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Route input for this Choreo. 
          # 
          # @param String - (required, string) The name of the route to retrieve.
          ###

          def set_Route(value)
            set_input("Route", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetRoute Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetRouteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class GetRoute



      ##############################################################################
      #
      # InsertRoute
      #
      # Creates a Route resource in the specified project.
      #
      ##############################################################################

      class InsertRoute < Choreography

        ####
        #  Create a new instance of the InsertRoute Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Routes/InsertRoute")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertRouteInputSet
        ####
        def new_input_set()
          return InsertRouteInputSet.new()
        end

        def make_result_set()
          return InsertRouteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertRouteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the InsertRoute
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertRouteInputSet < Choreography::InputSet

          #### 
          # Set the value of the RouteResource input for this Choreo. 
          # 
          # @param String - (required, json) A JSON string containing the route resource fields to set. Required properties include: destRange, name, network, priority, and at at least one nextHop property.
          ###

          def set_RouteResource(value)
            set_input("RouteResource", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the InsertRoute Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertRouteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class InsertRoute



      ##############################################################################
      #
      # ListRoutes
      #
      # Retrieves a list of route resources available to the specified project.
      #
      ##############################################################################

      class ListRoutes < Choreography

        ####
        #  Create a new instance of the ListRoutes Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Routes/ListRoutes")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListRoutesInputSet
        ####
        def new_input_set()
          return ListRoutesInputSet.new()
        end

        def make_result_set()
          return ListRoutesResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListRoutesResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListRoutes
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListRoutesInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq default-route-1234). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListRoutes Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListRoutesResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class ListRoutes




    end # module Routes

    module Snapshots



      ##############################################################################
      #
      # DeleteSnapshot
      #
      # Deletes a specified Snapshot resource.
      #
      ##############################################################################

      class DeleteSnapshot < Choreography

        ####
        #  Create a new instance of the DeleteSnapshot Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Snapshots/DeleteSnapshot")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteSnapshotInputSet
        ####
        def new_input_set()
          return DeleteSnapshotInputSet.new()
        end

        def make_result_set()
          return DeleteSnapshotResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteSnapshotResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteSnapshot
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteSnapshotInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Snapshot input for this Choreo. 
          # 
          # @param String - (required, string) The name of the snapshot to delete.
          ###

          def set_Snapshot(value)
            set_input("Snapshot", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteSnapshot Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteSnapshotResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class DeleteSnapshot



      ##############################################################################
      #
      # GetSnapshot
      #
      # Retrieves information about the specified Snapshot.
      #
      ##############################################################################

      class GetSnapshot < Choreography

        ####
        #  Create a new instance of the GetSnapshot Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Snapshots/GetSnapshot")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetSnapshotInputSet
        ####
        def new_input_set()
          return GetSnapshotInputSet.new()
        end

        def make_result_set()
          return GetSnapshotResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetSnapshotResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetSnapshot
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetSnapshotInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Snapshot input for this Choreo. 
          # 
          # @param String - (required, string) The name of the snapshot to retrieve.
          ###

          def set_Snapshot(value)
            set_input("Snapshot", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetSnapshot Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetSnapshotResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class GetSnapshot



      ##############################################################################
      #
      # ListSnapshots
      #
      # Retrieves a list of persistent disk snapshot resources for the specified project.
      #
      ##############################################################################

      class ListSnapshots < Choreography

        ####
        #  Create a new instance of the ListSnapshots Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Snapshots/ListSnapshots")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListSnapshotsInputSet
        ####
        def new_input_set()
          return ListSnapshotsInputSet.new()
        end

        def make_result_set()
          return ListSnapshotsResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListSnapshotsResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListSnapshots
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListSnapshotsInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq testsnapshot). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListSnapshots Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListSnapshotsResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class ListSnapshots




    end # module Snapshots

    module ZoneOperations



      ##############################################################################
      #
      # DeleteZoneOperation
      #
      # Deletes the specified Zone Operation resource.
      #
      ##############################################################################

      class DeleteZoneOperation < Choreography

        ####
        #  Create a new instance of the DeleteZoneOperation Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/ZoneOperations/DeleteZoneOperation")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteZoneOperationInputSet
        ####
        def new_input_set()
          return DeleteZoneOperationInputSet.new()
        end

        def make_result_set()
          return DeleteZoneOperationResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteZoneOperationResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the DeleteZoneOperation
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteZoneOperationInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Operation input for this Choreo. 
          # 
          # @param String - (required, string) The name of the operation to delete.
          ###

          def set_Operation(value)
            set_input("Operation", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with the operation being deleted.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the DeleteZoneOperation Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteZoneOperationResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "ResponseStatusCode" output from this Choreo execution
        	#
        	# @return String - (integer) The response status code returned from Google. A 204 is expected for a successful delete operation.
        	####
        	def get_ResponseStatusCode()
        	  return @outputs["ResponseStatusCode"]
        	end
        end

      end # class DeleteZoneOperation



      ##############################################################################
      #
      # GetZoneOperation
      #
      # Retrieves information about the specified Zone Operation.
      #
      ##############################################################################

      class GetZoneOperation < Choreography

        ####
        #  Create a new instance of the GetZoneOperation Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/ZoneOperations/GetZoneOperation")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetZoneOperationInputSet
        ####
        def new_input_set()
          return GetZoneOperationInputSet.new()
        end

        def make_result_set()
          return GetZoneOperationResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetZoneOperationResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetZoneOperation
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetZoneOperationInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Operation input for this Choreo. 
          # 
          # @param String - (required, string) The name of the operation to retrieve.
          ###

          def set_Operation(value)
            set_input("Operation", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone associated with the operation being retrieved.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetZoneOperation Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetZoneOperationResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class GetZoneOperation



      ##############################################################################
      #
      # ListZoneOperations
      #
      # Retrieves the list of Zone Operation resources contained within the specified Zone.
      #
      ##############################################################################

      class ListZoneOperations < Choreography

        ####
        #  Create a new instance of the ListZoneOperations Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/ZoneOperations/ListZoneOperations")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListZoneOperationsInputSet
        ####
        def new_input_set()
          return ListZoneOperationsInputSet.new()
        end

        def make_result_set()
          return ListZoneOperationsResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListZoneOperationsResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListZoneOperations
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListZoneOperationsInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq europe-west1-a). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone that contains the operation resources to retrieve.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListZoneOperations Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListZoneOperationsResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class ListZoneOperations




    end # module ZoneOperations

    module Zones



      ##############################################################################
      #
      # GetZone
      #
      # Retrieves information about the specified Zone.
      #
      ##############################################################################

      class GetZone < Choreography

        ####
        #  Create a new instance of the GetZone Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Zones/GetZone")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetZoneInputSet
        ####
        def new_input_set()
          return GetZoneInputSet.new()
        end

        def make_result_set()
          return GetZoneResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetZoneResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetZone
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetZoneInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the Zone input for this Choreo. 
          # 
          # @param String - (required, string) The name of the zone to retrieve.
          ###

          def set_Zone(value)
            set_input("Zone", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetZone Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetZoneResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class GetZone



      ##############################################################################
      #
      # ListZones
      #
      # Retrieves the list of Zone resources for the specified project.
      #
      ##############################################################################

      class ListZones < Choreography

        ####
        #  Create a new instance of the ListZones Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/ComputeEngine/Zones/ListZones")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListZonesInputSet
        ####
        def new_input_set()
          return ListZonesInputSet.new()
        end

        def make_result_set()
          return ListZonesResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListZonesResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListZones
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListZonesInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Comma-seperated list of fields you want to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Filter input for this Choreo. 
          # 
          # @param String - (optional, string) A filter expression for narrowing results in the form: {field_name} {comparison_string} {literal_string} (e.g. name eq europe-west1-a). Comparison strings can be eq (equals) or ne (not equals).
          ###

          def set_Filter(value)
            set_input("Filter", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Project input for this Choreo. 
          # 
          # @param String - (required, string) The ID of a Google Compute project.
          ###

          def set_Project(value)
            set_input("Project", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListZones Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListZonesResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class ListZones




    end # module Zones

  end # module ComputeEngine

  module Contacts



    ##############################################################################
    #
    # CreateContact
    #
    # Create a new contact.
    #
    ##############################################################################

    class CreateContact < Choreography

      ####
      #  Create a new instance of the CreateContact Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Contacts/CreateContact")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return CreateContactInputSet
      ####
      def new_input_set()
        return CreateContactInputSet.new()
      end

      def make_result_set()
        return CreateContactResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = CreateContactResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the CreateContact
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class CreateContactInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The OAuth client ID provided by Google when you register your application.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The OAuth client secret provided by Google when you registered your application.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the Email input for this Choreo. 
        # 
        # @param String - (conditional, string) The new contact's email address.
        ###

        def set_Email(value)
          set_input("Email", value)
        end
        #### 
        # Set the value of the FirstName input for this Choreo. 
        # 
        # @param String - (conditional, string) The new contact's first name.
        ###

        def set_FirstName(value)
          set_input("FirstName", value)
        end
        #### 
        # Set the value of the LastName input for this Choreo. 
        # 
        # @param String - (conditional, string) The new contact's last name.
        ###

        def set_LastName(value)
          set_input("LastName", value)
        end
        #### 
        # Set the value of the Phone input for this Choreo. 
        # 
        # @param String - (optional, string) The phone number for the new contact. It's best to use the "(555) 123-4567" format.
        ###

        def set_Phone(value)
          set_input("Phone", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) The refresh token retrieved in the last step of the OAuth process. This is used when an access token is expired or not provided.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the CreateContact Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class CreateContactResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      	####
      	# Retrieve the value for the "ContactID" output from this Choreo execution
      	#
      	# @return String - (string) The unique ID supplied by Google for the new user.
      	####
      	def get_ContactID()
      	  return @outputs["ContactID"]
      	end
      end

    end # class CreateContact



    ##############################################################################
    #
    # DeleteContact
    #
    # Deletes a specified contact.
    #
    ##############################################################################

    class DeleteContact < Choreography

      ####
      #  Create a new instance of the DeleteContact Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Contacts/DeleteContact")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DeleteContactInputSet
      ####
      def new_input_set()
        return DeleteContactInputSet.new()
      end

      def make_result_set()
        return DeleteContactResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DeleteContactResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DeleteContact
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DeleteContactInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (required, string) The OAuth client ID provided by Google when you register your application.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The OAuth client secret provided by Google when you registered your application.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the ContactID input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID string for the contact you want to delete.
        ###

        def set_ContactID(value)
          set_input("ContactID", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the last step of the OAuth process. This is used when an access token is expired or not provided.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DeleteContact Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DeleteContactResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. No content is returned for a successful delete request.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      end

    end # class DeleteContact



    ##############################################################################
    #
    # GetAllContacts
    #
    # Retrieve data for all contacts in an account.
    #
    ##############################################################################

    class GetAllContacts < Choreography

      ####
      #  Create a new instance of the GetAllContacts Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Contacts/GetAllContacts")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetAllContactsInputSet
      ####
      def new_input_set()
        return GetAllContactsInputSet.new()
      end

      def make_result_set()
        return GetAllContactsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetAllContactsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetAllContacts
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetAllContactsInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (required, string) The client ID provided by Google when you register your application.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The client secret provided by Google when you registered your application.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the last step of the OAuth process. This is used when an access token is expired or not provided.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the UserEmail input for this Choreo. 
        # 
        # @param String - (optional, string) The email address of the user whose contacts you want to retrieve. Defaults to "default," or the user whose OAuth access token is passed.
        ###

        def set_UserEmail(value)
          set_input("UserEmail", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetAllContacts Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetAllContactsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      end

    end # class GetAllContacts



    ##############################################################################
    #
    # GetAllGroups
    #
    # Retrieve data for all groups in an account.
    #
    ##############################################################################

    class GetAllGroups < Choreography

      ####
      #  Create a new instance of the GetAllGroups Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Contacts/GetAllGroups")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetAllGroupsInputSet
      ####
      def new_input_set()
        return GetAllGroupsInputSet.new()
      end

      def make_result_set()
        return GetAllGroupsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetAllGroupsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetAllGroups
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetAllGroupsInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (required, string) The OAuth client ID provided by Google when you register your application.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The OAuth client secret provided by Google when you registered your application.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the last step of the OAuth process. This is used when an access token is expired or not provided.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetAllGroups Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetAllGroupsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      end

    end # class GetAllGroups



    ##############################################################################
    #
    # GetContactById
    #
    # Retrieves a specific contact with a given id.
    #
    ##############################################################################

    class GetContactById < Choreography

      ####
      #  Create a new instance of the GetContactById Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Contacts/GetContactById")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetContactByIdInputSet
      ####
      def new_input_set()
        return GetContactByIdInputSet.new()
      end

      def make_result_set()
        return GetContactByIdResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetContactByIdResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetContactById
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetContactByIdInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (required, string) The client ID provided by Google when you register your application.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The client secret provided by Google when you registered your application.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the ContactId input for this Choreo. 
        # 
        # @param String - (required, string) The id associated with the contact to return. This can either be the individual id of the contact, or the full 'edit' link returned in the entry nodes of the GetAllContacts output.
        ###

        def set_ContactId(value)
          set_input("ContactId", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the last step of the OAuth process. This is used when an access token is expired or not provided.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the UserEmail input for this Choreo. 
        # 
        # @param String - (required, string) The email address of the user whose contacts you want to retrieve. Defaults to "default," or the user whose OAuth access token is passed.
        ###

        def set_UserEmail(value)
          set_input("UserEmail", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetContactById Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetContactByIdResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetContactById



    ##############################################################################
    #
    # GetContactsWithQuery
    #
    # Retrieves the contact or contacts in that account that match a specified query term.
    #
    ##############################################################################

    class GetContactsWithQuery < Choreography

      ####
      #  Create a new instance of the GetContactsWithQuery Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Contacts/GetContactsWithQuery")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetContactsWithQueryInputSet
      ####
      def new_input_set()
        return GetContactsWithQueryInputSet.new()
      end

      def make_result_set()
        return GetContactsWithQueryResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetContactsWithQueryResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetContactsWithQuery
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetContactsWithQueryInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (required, string) The OAuth client ID provided by Google when you register your application.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The OAuth client secret provided by Google when you registered your application.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the Query input for this Choreo. 
        # 
        # @param String - (required, string) The contact criteria to search for, such as name or email address.
        ###

        def set_Query(value)
          set_input("Query", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the last step of the OAuth process. This is used when an access token is expired or not provided.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetContactsWithQuery Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetContactsWithQueryResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      	####
      	# Retrieve the value for the "ContactID" output from this Choreo execution
      	#
      	# @return String - (string) The unique ID string for the retrieved contact. If more than one contact is retrieved by the request, only the first contact's ID is output.
      	####
      	def get_ContactID()
      	  return @outputs["ContactID"]
      	end
      	####
      	# Retrieve the value for the "Link" output from this Choreo execution
      	#
      	# @return String - (string) The unique edit link for the retrieved contact. If more than one contact is retrieved by the request, only the first contact's edit link is output.
      	####
      	def get_Link()
      	  return @outputs["Link"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetContactsWithQuery



    ##############################################################################
    #
    # RefreshToken
    #
    # Retrieves a new access token when the provided access token is expired.
    #
    ##############################################################################

    class RefreshToken < Choreography

      ####
      #  Create a new instance of the RefreshToken Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Contacts/RefreshToken")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RefreshTokenInputSet
      ####
      def new_input_set()
        return RefreshTokenInputSet.new()
      end

      def make_result_set()
        return RefreshTokenResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RefreshTokenResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RefreshToken
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RefreshTokenInputSet < Choreography::InputSet

        #### 
        # Set the value of the ClientIdD input for this Choreo. 
        # 
        # @param String - (required, string) The client ID provided by Google when you sign up for an account.
        ###

        def set_ClientIdD(value)
          set_input("ClientIdD", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The client secret provided by Google when you sign up for an account.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the OAuth process to be used when your access token expires.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RefreshToken Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RefreshTokenResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (string) The access token that is parsed from the request to refresh the token.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      end

    end # class RefreshToken



    ##############################################################################
    #
    # RequestBodyHelper
    #
    # Update an existing contact's information.
    #
    ##############################################################################

    class RequestBodyHelper < Choreography

      ####
      #  Create a new instance of the RequestBodyHelper Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Contacts/RequestBodyHelper")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RequestBodyHelperInputSet
      ####
      def new_input_set()
        return RequestBodyHelperInputSet.new()
      end

      def make_result_set()
        return RequestBodyHelperResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RequestBodyHelperResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RequestBodyHelper
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RequestBodyHelperInputSet < Choreography::InputSet

        #### 
        # Set the value of the Email input for this Choreo. 
        # 
        # @param String - (required, string) The contact's current email address.
        ###

        def set_Email(value)
          set_input("Email", value)
        end
        #### 
        # Set the value of the FirstName input for this Choreo. 
        # 
        # @param String - (required, string) The contact's current given name.
        ###

        def set_FirstName(value)
          set_input("FirstName", value)
        end
        #### 
        # Set the value of the LastName input for this Choreo. 
        # 
        # @param String - (required, string) The contact's current family name.
        ###

        def set_LastName(value)
          set_input("LastName", value)
        end
        #### 
        # Set the value of the Phone input for this Choreo. 
        # 
        # @param String - (required, string) The contact's current telephone number.
        ###

        def set_Phone(value)
          set_input("Phone", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RequestBodyHelper Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RequestBodyHelperResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Contact" output from this Choreo execution
      	#
      	# @return String - The formatted request after passing input variable values into the template.
      	####
      	def get_Contact()
      	  return @outputs["Contact"]
      	end
      end

    end # class RequestBodyHelper



    ##############################################################################
    #
    # UpdateContact
    #
    # Update an existing contact's information.
    #
    ##############################################################################

    class UpdateContact < Choreography

      ####
      #  Create a new instance of the UpdateContact Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Contacts/UpdateContact")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return UpdateContactInputSet
      ####
      def new_input_set()
        return UpdateContactInputSet.new()
      end

      def make_result_set()
        return UpdateContactResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = UpdateContactResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the UpdateContact
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class UpdateContactInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The OAuth client ID provided by Google when you register your application.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The OAuth client secret provided by Google when you registered your application.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the ID input for this Choreo. 
        # 
        # @param String - (conditional, string) The id of the contact to update. Required unless providing a value for the Query input.
        ###

        def set_ID(value)
          set_input("ID", value)
        end
        #### 
        # Set the value of the NewEmail input for this Choreo. 
        # 
        # @param String - (conditional, string) The contact's new email address.
        ###

        def set_NewEmail(value)
          set_input("NewEmail", value)
        end
        #### 
        # Set the value of the NewFirstName input for this Choreo. 
        # 
        # @param String - (conditional, string) The contact's new first name.
        ###

        def set_NewFirstName(value)
          set_input("NewFirstName", value)
        end
        #### 
        # Set the value of the NewLastName input for this Choreo. 
        # 
        # @param String - (conditional, string) The contact's new last name.
        ###

        def set_NewLastName(value)
          set_input("NewLastName", value)
        end
        #### 
        # Set the value of the NewPhone input for this Choreo. 
        # 
        # @param String - (optional, string) The contact's new telephone number.
        ###

        def set_NewPhone(value)
          set_input("NewPhone", value)
        end
        #### 
        # Set the value of the Query input for this Choreo. 
        # 
        # @param String - (conditional, string) A search term to retrieve the contact to update, such as an email address, last name, or address. Required unless providing a value for the ID input.
        ###

        def set_Query(value)
          set_input("Query", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) The refresh token retrieved in the last step of the OAuth process. This is used when an access token is expired or not provided.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the UpdateContact Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class UpdateContactResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "FirstName" output from this Choreo execution
      	#
      	# @return String - (string) The contact's current given name.
      	####
      	def get_FirstName()
      	  return @outputs["FirstName"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "Phone" output from this Choreo execution
      	#
      	# @return String - (string) The contact's current telephone number.
      	####
      	def get_Phone()
      	  return @outputs["Phone"]
      	end
      	####
      	# Retrieve the value for the "ContactID" output from this Choreo execution
      	#
      	# @return String - (string) The unique ID for the contact returned by Google.
      	####
      	def get_ContactID()
      	  return @outputs["ContactID"]
      	end
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (optional, string) The access token retrieved in the last step of the OAuth process. Access tokens that are expired will be refreshed and returned in the Choreo output.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      	####
      	# Retrieve the value for the "LastName" output from this Choreo execution
      	#
      	# @return String - (string) The contact's current family name.
      	####
      	def get_LastName()
      	  return @outputs["LastName"]
      	end
      	####
      	# Retrieve the value for the "Email" output from this Choreo execution
      	#
      	# @return String - (string) The contact's current email address.
      	####
      	def get_Email()
      	  return @outputs["Email"]
      	end
      end

    end # class UpdateContact




  end # module Contacts

  module Directions



    ##############################################################################
    #
    # GetBicyclingDirections
    #
    #  Generate biking directions between two locations, denoted by address or latitude/longitude coordinates.
    #
    ##############################################################################

    class GetBicyclingDirections < Choreography

      ####
      #  Create a new instance of the GetBicyclingDirections Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Directions/GetBicyclingDirections")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetBicyclingDirectionsInputSet
      ####
      def new_input_set()
        return GetBicyclingDirectionsInputSet.new()
      end

      def make_result_set()
        return GetBicyclingDirectionsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetBicyclingDirectionsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetBicyclingDirections
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetBicyclingDirectionsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Alternatives input for this Choreo. 
        # 
        # @param String - (optional, string) If set to true, additional routes will be returned.
        ###

        def set_Alternatives(value)
          set_input("Alternatives", value)
        end
        #### 
        # Set the value of the Destination input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address or latitude/longitude coordinates from which directions will be generated (i.e."104 Franklin St, New York, NY" or "40.7160,-74.0037").
        ###

        def set_Destination(value)
          set_input("Destination", value)
        end
        #### 
        # Set the value of the Origin input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address or latitude/longitude coordinates from which directions will be computed (i.e."104 Franklin St, New York, NY" or "40.7160,-74.0037").
        ###

        def set_Origin(value)
          set_input("Origin", value)
        end
        #### 
        # Set the value of the Region input for this Choreo. 
        # 
        # @param String - (optional, string) Enter the region code for the directions, specified as a ccTLD two-character value.
        ###

        def set_Region(value)
          set_input("Region", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end
        #### 
        # Set the value of the Units input for this Choreo. 
        # 
        # @param String - (optional, string) Specify the units to be used when displaying results.  Options include, metric, or imperial.
        ###

        def set_Units(value)
          set_input("Units", value)
        end
        #### 
        # Set the value of the Waypoints input for this Choreo. 
        # 
        # @param String - (optional, string) Specify route waypoints, either by address, or latitude/longitude coordinates.
        ###

        def set_Waypoints(value)
          set_input("Waypoints", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetBicyclingDirections Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetBicyclingDirectionsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (json) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetBicyclingDirections



    ##############################################################################
    #
    # GetDrivingDirections
    #
    #  Generates directions between two locations, denoted by address, or latitude/longitude coordinates.
    #
    ##############################################################################

    class GetDrivingDirections < Choreography

      ####
      #  Create a new instance of the GetDrivingDirections Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Directions/GetDrivingDirections")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetDrivingDirectionsInputSet
      ####
      def new_input_set()
        return GetDrivingDirectionsInputSet.new()
      end

      def make_result_set()
        return GetDrivingDirectionsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetDrivingDirectionsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetDrivingDirections
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetDrivingDirectionsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Alternatives input for this Choreo. 
        # 
        # @param String - (optional, string) If set to true, additional routes will be returned.
        ###

        def set_Alternatives(value)
          set_input("Alternatives", value)
        end
        #### 
        # Set the value of the Avoid input for this Choreo. 
        # 
        # @param String - (optional, string) Specify whether the calculated directions should avoid the following features: tolls, or highways.
        ###

        def set_Avoid(value)
          set_input("Avoid", value)
        end
        #### 
        # Set the value of the Destination input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address or latitude/longitude coordinates from which directions will be generated (i.e."104 Franklin St, New York, NY" or "40.7160,-74.0037").
        ###

        def set_Destination(value)
          set_input("Destination", value)
        end
        #### 
        # Set the value of the Origin input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address or latitude/longitude coordinates from which directions will be computed (i.e."104 Franklin St, New York, NY" or "40.7160,-74.0037").
        ###

        def set_Origin(value)
          set_input("Origin", value)
        end
        #### 
        # Set the value of the Region input for this Choreo. 
        # 
        # @param String - (optional, string) Enter the region code for the directions, specified as a ccTLD two-character value.
        ###

        def set_Region(value)
          set_input("Region", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end
        #### 
        # Set the value of the Units input for this Choreo. 
        # 
        # @param String - (optional, string) Specify the units to be used when displaying results.  Options include, metric, or imperial.
        ###

        def set_Units(value)
          set_input("Units", value)
        end
        #### 
        # Set the value of the Waypoints input for this Choreo. 
        # 
        # @param String - (optional, string) Specify route waypoints, either by address, or latitude/longitude coordinates.
        ###

        def set_Waypoints(value)
          set_input("Waypoints", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetDrivingDirections Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetDrivingDirectionsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (json) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetDrivingDirections



    ##############################################################################
    #
    # GetWalkingDirections
    #
    #  Generate walking directions between two locations, denoted by address or latitude/longitude coordinates.
    #
    ##############################################################################

    class GetWalkingDirections < Choreography

      ####
      #  Create a new instance of the GetWalkingDirections Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Directions/GetWalkingDirections")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetWalkingDirectionsInputSet
      ####
      def new_input_set()
        return GetWalkingDirectionsInputSet.new()
      end

      def make_result_set()
        return GetWalkingDirectionsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetWalkingDirectionsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetWalkingDirections
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetWalkingDirectionsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Alternatives input for this Choreo. 
        # 
        # @param String - (optional, string) If set to true, additional routes will be returned.
        ###

        def set_Alternatives(value)
          set_input("Alternatives", value)
        end
        #### 
        # Set the value of the Destination input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address or latitude/longitude coordinates from which directions will be generated (i.e."104 Franklin St, New York, NY" or "40.7160,-74.0037").
        ###

        def set_Destination(value)
          set_input("Destination", value)
        end
        #### 
        # Set the value of the Origin input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address or latitude/longitude coordinates from which directions will be computed (i.e."104 Franklin St, New York, NY" or "40.7160,-74.0037").
        ###

        def set_Origin(value)
          set_input("Origin", value)
        end
        #### 
        # Set the value of the Region input for this Choreo. 
        # 
        # @param String - (optional, string) Enter the region code for the directions, specified as a ccTLD two-character value.
        ###

        def set_Region(value)
          set_input("Region", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end
        #### 
        # Set the value of the Units input for this Choreo. 
        # 
        # @param String - (optional, string) Specify the units to be used when displaying results.  Options include, metric, or imperial.
        ###

        def set_Units(value)
          set_input("Units", value)
        end
        #### 
        # Set the value of the Waypoints input for this Choreo. 
        # 
        # @param String - (optional, string) Specify route waypoints, either by address, or latitude/longitude coordinates.
        ###

        def set_Waypoints(value)
          set_input("Waypoints", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetWalkingDirections Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetWalkingDirectionsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (json) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetWalkingDirections




  end # module Directions

  module DistanceMatrix



    ##############################################################################
    #
    # BicyclingDistanceMatrix
    #
    # Obtain bicycling distances and times for a matrix of addresses and/or latitude/longitude coordinates.
    #
    ##############################################################################

    class BicyclingDistanceMatrix < Choreography

      ####
      #  Create a new instance of the BicyclingDistanceMatrix Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/DistanceMatrix/BicyclingDistanceMatrix")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return BicyclingDistanceMatrixInputSet
      ####
      def new_input_set()
        return BicyclingDistanceMatrixInputSet.new()
      end

      def make_result_set()
        return BicyclingDistanceMatrixResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = BicyclingDistanceMatrixResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the BicyclingDistanceMatrix
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class BicyclingDistanceMatrixInputSet < Choreography::InputSet

        #### 
        # Set the value of the Alternatives input for this Choreo. 
        # 
        # @param String - (optional, string) If set to true, additional routes will be returned.
        ###

        def set_Alternatives(value)
          set_input("Alternatives", value)
        end
        #### 
        # Set the value of the Destinations input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address or latitude/longitude coordinates to which directions will be generated. Multiple destinations can be separated by pipes (|).  For example: Boston, MA|New Haven|40.7160,-74.0037.
        ###

        def set_Destinations(value)
          set_input("Destinations", value)
        end
        #### 
        # Set the value of the Language input for this Choreo. 
        # 
        # @param String - (optional, string) Set the language in which to return restults.  A list of supported languages is available here: https://spreadsheets.google.com/pub?key=p9pdwsai2hDMsLkXsoM05KQ&gid=1
        ###

        def set_Language(value)
          set_input("Language", value)
        end
        #### 
        # Set the value of the Origins input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address(es) or geo-coordinates from which distance and time will be computed. Multiple destinations can be separated by pipes (|).  For example: Boston, MA|New Haven|40.7160,-74.0037.
        ###

        def set_Origins(value)
          set_input("Origins", value)
        end
        #### 
        # Set the value of the Region input for this Choreo. 
        # 
        # @param String - (optional, string) Enter the region code for the directions, specified as a ccTLD two-character value.
        ###

        def set_Region(value)
          set_input("Region", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end
        #### 
        # Set the value of the Units input for this Choreo. 
        # 
        # @param String - (optional, string) Specify the units to be used when displaying results.  Options include, metric, or imperial.
        ###

        def set_Units(value)
          set_input("Units", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the BicyclingDistanceMatrix Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class BicyclingDistanceMatrixResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (json) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class BicyclingDistanceMatrix



    ##############################################################################
    #
    # DrivingDistanceMatrix
    #
    # Obtain travel distances and times for a matrix of addresses and/or latitude/longitude coordinates.
    #
    ##############################################################################

    class DrivingDistanceMatrix < Choreography

      ####
      #  Create a new instance of the DrivingDistanceMatrix Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/DistanceMatrix/DrivingDistanceMatrix")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DrivingDistanceMatrixInputSet
      ####
      def new_input_set()
        return DrivingDistanceMatrixInputSet.new()
      end

      def make_result_set()
        return DrivingDistanceMatrixResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DrivingDistanceMatrixResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DrivingDistanceMatrix
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DrivingDistanceMatrixInputSet < Choreography::InputSet

        #### 
        # Set the value of the Alternatives input for this Choreo. 
        # 
        # @param String - (optional, string) If set to true, additional routes will be returned.
        ###

        def set_Alternatives(value)
          set_input("Alternatives", value)
        end
        #### 
        # Set the value of the Avoid input for this Choreo. 
        # 
        # @param String - (optional, string) Specify whether the calculated directions should avoid the following features: tolls, or highways.
        ###

        def set_Avoid(value)
          set_input("Avoid", value)
        end
        #### 
        # Set the value of the Destinations input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address or latitude/longitude coordinates to which directions will be generated. Multiple destinations can be separated by pipes (|).  For example: Boston, MA|New Haven|40.7160,-74.0037.
        ###

        def set_Destinations(value)
          set_input("Destinations", value)
        end
        #### 
        # Set the value of the Language input for this Choreo. 
        # 
        # @param String - (optional, string) Set the language in which to return restults.  A list of supported languages is available here: https://spreadsheets.google.com/pub?key=p9pdwsai2hDMsLkXsoM05KQ&gid=1
        ###

        def set_Language(value)
          set_input("Language", value)
        end
        #### 
        # Set the value of the Origins input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address(es) or geo-coordinates from which distance and time will be computed. Multiple destinations can be separated by pipes (|).  For example: Boston, MA|New Haven|40.7160,-74.0037.
        ###

        def set_Origins(value)
          set_input("Origins", value)
        end
        #### 
        # Set the value of the Region input for this Choreo. 
        # 
        # @param String - (optional, string) Enter the region code for the directions, specified as a ccTLD two-character value.
        ###

        def set_Region(value)
          set_input("Region", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end
        #### 
        # Set the value of the Units input for this Choreo. 
        # 
        # @param String - (optional, string) Specify the units to be used when displaying results.  Options include, metric, or imperial.
        ###

        def set_Units(value)
          set_input("Units", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DrivingDistanceMatrix Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DrivingDistanceMatrixResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (json) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class DrivingDistanceMatrix



    ##############################################################################
    #
    # WalkingDistanceMatrix
    #
    # Obtain walking distances and times for a matrix of addresses and/or latitude/longitude coordinates.
    #
    ##############################################################################

    class WalkingDistanceMatrix < Choreography

      ####
      #  Create a new instance of the WalkingDistanceMatrix Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/DistanceMatrix/WalkingDistanceMatrix")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return WalkingDistanceMatrixInputSet
      ####
      def new_input_set()
        return WalkingDistanceMatrixInputSet.new()
      end

      def make_result_set()
        return WalkingDistanceMatrixResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = WalkingDistanceMatrixResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the WalkingDistanceMatrix
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class WalkingDistanceMatrixInputSet < Choreography::InputSet

        #### 
        # Set the value of the Alternatives input for this Choreo. 
        # 
        # @param String - (optional, string) If set to true, additional routes will be returned.
        ###

        def set_Alternatives(value)
          set_input("Alternatives", value)
        end
        #### 
        # Set the value of the Destinations input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address or latitude/longitude coordinates to which directions will be generated. Multiple destinations can be separated by pipes (|).  For example: Boston, MA|New Haven|40.7160,-74.0037.
        ###

        def set_Destinations(value)
          set_input("Destinations", value)
        end
        #### 
        # Set the value of the Language input for this Choreo. 
        # 
        # @param String - (optional, string) Set the language in which to return restults.  A list of supported languages is available here: https://spreadsheets.google.com/pub?key=p9pdwsai2hDMsLkXsoM05KQ&gid=1
        ###

        def set_Language(value)
          set_input("Language", value)
        end
        #### 
        # Set the value of the Origins input for this Choreo. 
        # 
        # @param String - (required, string) Enter the address(es) or geo-coordinates from which distance and time will be computed. Multiple destinations can be separated by pipes (|).  For example: Boston, MA|New Haven|40.7160,-74.0037.
        ###

        def set_Origins(value)
          set_input("Origins", value)
        end
        #### 
        # Set the value of the Region input for this Choreo. 
        # 
        # @param String - (optional, string) Enter the region code for the directions, specified as a ccTLD two-character value.
        ###

        def set_Region(value)
          set_input("Region", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end
        #### 
        # Set the value of the Units input for this Choreo. 
        # 
        # @param String - (optional, string) Specify the units to be used when displaying results.  Options include, metric, or imperial.
        ###

        def set_Units(value)
          set_input("Units", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the WalkingDistanceMatrix Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class WalkingDistanceMatrixResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (json) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class WalkingDistanceMatrix




  end # module DistanceMatrix

  module Documents



    ##############################################################################
    #
    # ClientLoginAuthentication
    #
    # Request an authorization token for Google Documents.
    #
    ##############################################################################

    class ClientLoginAuthentication < Choreography

      ####
      #  Create a new instance of the ClientLoginAuthentication Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/ClientLoginAuthentication")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return ClientLoginAuthenticationInputSet
      ####
      def new_input_set()
        return ClientLoginAuthenticationInputSet.new()
      end

      def make_result_set()
        return ClientLoginAuthenticationResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = ClientLoginAuthenticationResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the ClientLoginAuthentication
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class ClientLoginAuthenticationInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the ClientLoginAuthentication Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class ClientLoginAuthenticationResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AuthorizationKey" output from this Choreo execution
      	#
      	# @return String - (string) The authorization token parsed from the Google login response.
      	####
      	def get_AuthorizationKey()
      	  return @outputs["AuthorizationKey"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (string) Stores the response from Google login.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class ClientLoginAuthentication



    ##############################################################################
    #
    # CopyDocument
    #
    # Copies a document with the title you specify.
    #
    ##############################################################################

    class CopyDocument < Choreography

      ####
      #  Create a new instance of the CopyDocument Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/CopyDocument")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return CopyDocumentInputSet
      ####
      def new_input_set()
        return CopyDocumentInputSet.new()
      end

      def make_result_set()
        return CopyDocumentResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = CopyDocumentResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the CopyDocument
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class CopyDocumentInputSet < Choreography::InputSet

        #### 
        # Set the value of the NewTitle input for this Choreo. 
        # 
        # @param String - (required, string) The title for the new, copied document.
        ###

        def set_NewTitle(value)
          set_input("NewTitle", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The title of the document to copy. Enclose in quotation marks for an exact, non-case-sensitive match.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the CopyDocument Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class CopyDocumentResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class CopyDocument



    ##############################################################################
    #
    # CreateEmptyDocument
    #
    # Create a new, empty document.
    #
    ##############################################################################

    class CreateEmptyDocument < Choreography

      ####
      #  Create a new instance of the CreateEmptyDocument Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/CreateEmptyDocument")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return CreateEmptyDocumentInputSet
      ####
      def new_input_set()
        return CreateEmptyDocumentInputSet.new()
      end

      def make_result_set()
        return CreateEmptyDocumentResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = CreateEmptyDocumentResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the CreateEmptyDocument
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class CreateEmptyDocumentInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The title of the new document to create.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the CreateEmptyDocument Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class CreateEmptyDocumentResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "EditLink" output from this Choreo execution
      	#
      	# @return String - The edit link URL parsed from the Google response.
      	####
      	def get_EditLink()
      	  return @outputs["EditLink"]
      	end
      	####
      	# Retrieve the value for the "ResourceID" output from this Choreo execution
      	#
      	# @return String - (string) The document resource ID returned from Google.
      	####
      	def get_ResourceID()
      	  return @outputs["ResourceID"]
      	end
      end

    end # class CreateEmptyDocument



    ##############################################################################
    #
    # CreateSharingPermission
    #
    # Grants a new user read/write access to an existing document.
    #
    ##############################################################################

    class CreateSharingPermission < Choreography

      ####
      #  Create a new instance of the CreateSharingPermission Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/CreateSharingPermission")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return CreateSharingPermissionInputSet
      ####
      def new_input_set()
        return CreateSharingPermissionInputSet.new()
      end

      def make_result_set()
        return CreateSharingPermissionResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = CreateSharingPermissionResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the CreateSharingPermission
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class CreateSharingPermissionInputSet < Choreography::InputSet

        #### 
        # Set the value of the NewUserEmail input for this Choreo. 
        # 
        # @param String - (required, string) The email address of the user to whom you want to grant permission.
        ###

        def set_NewUserEmail(value)
          set_input("NewUserEmail", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google passsword.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Role input for this Choreo. 
        # 
        # @param String - (optional, string) The role that will be given to the new user permission (i.e., writer, reader, etc). Defaults to "writer".
        ###

        def set_Role(value)
          set_input("Role", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the CreateSharingPermission Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class CreateSharingPermissionResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "ResourceID" output from this Choreo execution
      	#
      	# @return String - (string) The resource ID of the document to which you want to add a user.
      	####
      	def get_ResourceID()
      	  return @outputs["ResourceID"]
      	end
      end

    end # class CreateSharingPermission



    ##############################################################################
    #
    # DeleteDocumentOrFile
    #
    # Permanently deletes the document or file you specify.
    #
    ##############################################################################

    class DeleteDocumentOrFile < Choreography

      ####
      #  Create a new instance of the DeleteDocumentOrFile Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/DeleteDocumentOrFile")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DeleteDocumentOrFileInputSet
      ####
      def new_input_set()
        return DeleteDocumentOrFileInputSet.new()
      end

      def make_result_set()
        return DeleteDocumentOrFileResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DeleteDocumentOrFileResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DeleteDocumentOrFile
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DeleteDocumentOrFileInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResourceID input for this Choreo. 
        # 
        # @param String - (required, string) The resource ID for the document or file to delete.
        ###

        def set_ResourceID(value)
          set_input("ResourceID", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DeleteDocumentOrFile Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DeleteDocumentOrFileResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - There is no XML response for delete requests.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class DeleteDocumentOrFile



    ##############################################################################
    #
    # DownloadBase64EncodedDocument
    #
    # Downloads a document with the title you specify, and returns the content as Base64 encoded data.
    #
    ##############################################################################

    class DownloadBase64EncodedDocument < Choreography

      ####
      #  Create a new instance of the DownloadBase64EncodedDocument Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/DownloadBase64EncodedDocument")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DownloadBase64EncodedDocumentInputSet
      ####
      def new_input_set()
        return DownloadBase64EncodedDocumentInputSet.new()
      end

      def make_result_set()
        return DownloadBase64EncodedDocumentResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DownloadBase64EncodedDocumentResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DownloadBase64EncodedDocument
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DownloadBase64EncodedDocumentInputSet < Choreography::InputSet

        #### 
        # Set the value of the Format input for this Choreo. 
        # 
        # @param String - (optional, string) The format you want to export the document to, such as "doc", "txt", "pdf", etc. The default download format is HTML.
        ###

        def set_Format(value)
          set_input("Format", value)
        end
        #### 
        # Set the value of the Link input for this Choreo. 
        # 
        # @param String - (conditional, string) Enter the source links for the document to be retrieved. Required unless specifying the Title.
        ###

        def set_Link(value)
          set_input("Link", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (conditional, string) The title of the document to download. Required unless specifying the download Link.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DownloadBase64EncodedDocument Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DownloadBase64EncodedDocumentResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "FileContents" output from this Choreo execution
      	#
      	# @return String - (string) The Base64 encoded file content of the downloaded file.
      	####
      	def get_FileContents()
      	  return @outputs["FileContents"]
      	end
      end

    end # class DownloadBase64EncodedDocument



    ##############################################################################
    #
    # GetAccountInfo
    #
    # Retrieves information about a specified Google Documents account.
    #
    ##############################################################################

    class GetAccountInfo < Choreography

      ####
      #  Create a new instance of the GetAccountInfo Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/GetAccountInfo")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetAccountInfoInputSet
      ####
      def new_input_set()
        return GetAccountInfoInputSet.new()
      end

      def make_result_set()
        return GetAccountInfoResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetAccountInfoResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetAccountInfo
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetAccountInfoInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetAccountInfo Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetAccountInfoResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetAccountInfo



    ##############################################################################
    #
    # GetAllDocuments
    #
    # Retrieves a list of all documents, files, and collections in a Google account.
    #
    ##############################################################################

    class GetAllDocuments < Choreography

      ####
      #  Create a new instance of the GetAllDocuments Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/GetAllDocuments")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetAllDocumentsInputSet
      ####
      def new_input_set()
        return GetAllDocumentsInputSet.new()
      end

      def make_result_set()
        return GetAllDocumentsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetAllDocumentsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetAllDocuments
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetAllDocumentsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Deleted input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Returns deleted documents when set to "true" (the default). Skips deleted documents when set to "false".
        ###

        def set_Deleted(value)
          set_input("Deleted", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetAllDocuments Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetAllDocumentsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetAllDocuments



    ##############################################################################
    #
    # RenameDocumentOrFile
    #
    # Rename a document or file with the new title you specify.
    #
    ##############################################################################

    class RenameDocumentOrFile < Choreography

      ####
      #  Create a new instance of the RenameDocumentOrFile Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/RenameDocumentOrFile")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RenameDocumentOrFileInputSet
      ####
      def new_input_set()
        return RenameDocumentOrFileInputSet.new()
      end

      def make_result_set()
        return RenameDocumentOrFileResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RenameDocumentOrFileResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RenameDocumentOrFile
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RenameDocumentOrFileInputSet < Choreography::InputSet

        #### 
        # Set the value of the NewTitle input for this Choreo. 
        # 
        # @param String - (required, string) The new title for the document. It will appear exactly as you type it, so be sure to use the proper capitalization.
        ###

        def set_NewTitle(value)
          set_input("NewTitle", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The title of the document to rename.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RenameDocumentOrFile Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RenameDocumentOrFileResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "EditLink" output from this Choreo execution
      	#
      	# @return String - (string) The edit link URL for the document to rename, parsed from the Google response.
      	####
      	def get_EditLink()
      	  return @outputs["EditLink"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class RenameDocumentOrFile



    ##############################################################################
    #
    # ResumableUpload
    #
    # 
    #
    ##############################################################################

    class ResumableUpload < Choreography

      ####
      #  Create a new instance of the ResumableUpload Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/ResumableUpload")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return ResumableUploadInputSet
      ####
      def new_input_set()
        return ResumableUploadInputSet.new()
      end

      def make_result_set()
        return ResumableUploadResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = ResumableUploadResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the ResumableUpload
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class ResumableUploadInputSet < Choreography::InputSet

        #### 
        # Set the value of the DataStream input for this Choreo. 
        # 
        # @param String - (required, string) The binary file contents to be used for the resumable upload operation.
        ###

        def set_DataStream(value)
          set_input("DataStream", value)
        end
        #### 
        # Set the value of the AuthorizationKey input for this Choreo. 
        # 
        # @param String - (optional, string) The authorization key generated by the ClientLogin method.
        ###

        def set_AuthorizationKey(value)
          set_input("AuthorizationKey", value)
        end
        #### 
        # Set the value of the ContentType input for this Choreo. 
        # 
        # @param String - (required, string) The content-type of this file upload (i.e. application/pdf, application/msword, image/jpg).
        ###

        def set_ContentType(value)
          set_input("ContentType", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, string) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The title of the document you are uploading.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (conditional, string) You Google username.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the ResumableUpload Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class ResumableUploadResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class ResumableUpload



    ##############################################################################
    #
    # SearchByCategory
    #
    # Retrieves a list of all resources in a category you specify.
    #
    ##############################################################################

    class SearchByCategory < Choreography

      ####
      #  Create a new instance of the SearchByCategory Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/SearchByCategory")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return SearchByCategoryInputSet
      ####
      def new_input_set()
        return SearchByCategoryInputSet.new()
      end

      def make_result_set()
        return SearchByCategoryResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = SearchByCategoryResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the SearchByCategory
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class SearchByCategoryInputSet < Choreography::InputSet

        #### 
        # Set the value of the Category input for this Choreo. 
        # 
        # @param String - (required, string) The category to list: "document", "spreadsheet", "presentation", "drawing", "folder", "starred", or "trashed". Combine multiple categories with "/".
        ###

        def set_Category(value)
          set_input("Category", value)
        end
        #### 
        # Set the value of the MyDocs input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Enter "true" to return resources for the requesting user only. The default is "false" (returns all account resources).
        ###

        def set_MyDocs(value)
          set_input("MyDocs", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the Viewed input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Enter "true" to return only viewed resources for the specified category. The default is "false" (viewed and unviewed category resources).
        ###

        def set_Viewed(value)
          set_input("Viewed", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the SearchByCategory Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class SearchByCategoryResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class SearchByCategory



    ##############################################################################
    #
    # SearchByTitle
    #
    # Retrieves information for a file with the title you specify.
    #
    ##############################################################################

    class SearchByTitle < Choreography

      ####
      #  Create a new instance of the SearchByTitle Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/SearchByTitle")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return SearchByTitleInputSet
      ####
      def new_input_set()
        return SearchByTitleInputSet.new()
      end

      def make_result_set()
        return SearchByTitleResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = SearchByTitleResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the SearchByTitle
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class SearchByTitleInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The title of the document to search for. Enclose in quotation marks for an exact, non-case-sensitive match.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the SearchByTitle Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class SearchByTitleResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "ResourceID" output from this Choreo execution
      	#
      	# @return String - (string) The document resource ID returned from Google.
      	####
      	def get_ResourceID()
      	  return @outputs["ResourceID"]
      	end
      	####
      	# Retrieve the value for the "EditMediaLink" output from this Choreo execution
      	#
      	# @return String - (string) The 'resumable-edit-media' link of the document. This link is used when editing the content of an existing Google doc.
      	####
      	def get_EditMediaLink()
      	  return @outputs["EditMediaLink"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "EditMetaDataLink" output from this Choreo execution
      	#
      	# @return String - (string) The 'edit' link of the document. This link is used when editing the metadata of an existing Google doc.
      	####
      	def get_EditMetaDataLink()
      	  return @outputs["EditMetaDataLink"]
      	end
      end

    end # class SearchByTitle



    ##############################################################################
    #
    # SearchByType
    #
    # Retrieves a list of all files of a MIME type you specify.
    #
    ##############################################################################

    class SearchByType < Choreography

      ####
      #  Create a new instance of the SearchByType Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/SearchByType")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return SearchByTypeInputSet
      ####
      def new_input_set()
        return SearchByTypeInputSet.new()
      end

      def make_result_set()
        return SearchByTypeResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = SearchByTypeResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the SearchByType
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class SearchByTypeInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Type input for this Choreo. 
        # 
        # @param String - (required, string) The MIME type of the files to list: word, excel, powerpoint, pdf, csv, rtf, html, css, xml, plaintext, zip, jpg, or png.
        ###

        def set_Type(value)
          set_input("Type", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the SearchByType Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class SearchByTypeResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class SearchByType



    ##############################################################################
    #
    # SearchForShared
    #
    # Retrieves a list of all documents shared by the two users you specify.
    #
    ##############################################################################

    class SearchForShared < Choreography

      ####
      #  Create a new instance of the SearchForShared Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/SearchForShared")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return SearchForSharedInputSet
      ####
      def new_input_set()
        return SearchForSharedInputSet.new()
      end

      def make_result_set()
        return SearchForSharedResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = SearchForSharedResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the SearchForShared
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class SearchForSharedInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the User1 input for this Choreo. 
        # 
        # @param String - (required, string) The email address of the first document collaborator.
        ###

        def set_User1(value)
          set_input("User1", value)
        end
        #### 
        # Set the value of the User2 input for this Choreo. 
        # 
        # @param String - (required, string) The email address for the second document collaborator.
        ###

        def set_User2(value)
          set_input("User2", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the SearchForShared Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class SearchForSharedResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class SearchForShared



    ##############################################################################
    #
    # ToggleProperties
    #
    # Toggle settings for a document or file on or off, depending on its current state.
    #
    ##############################################################################

    class ToggleProperties < Choreography

      ####
      #  Create a new instance of the ToggleProperties Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/ToggleProperties")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return TogglePropertiesInputSet
      ####
      def new_input_set()
        return TogglePropertiesInputSet.new()
      end

      def make_result_set()
        return TogglePropertiesResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = TogglePropertiesResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the ToggleProperties
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class TogglePropertiesInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The title of the document with the properties you want to toggle. Enclose in quotation marks for an exact, non-case-sensitive match.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the ToggleProperties Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class TogglePropertiesResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "EditLink" output from this Choreo execution
      	#
      	# @return String - (string) The edit link URL for the document, parsed from the Google response.
      	####
      	def get_EditLink()
      	  return @outputs["EditLink"]
      	end
      end

    end # class ToggleProperties



    ##############################################################################
    #
    # TrashDocumentOrFile
    #
    # Move the document or file you specify to the Google Documents trash.
    #
    ##############################################################################

    class TrashDocumentOrFile < Choreography

      ####
      #  Create a new instance of the TrashDocumentOrFile Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/TrashDocumentOrFile")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return TrashDocumentOrFileInputSet
      ####
      def new_input_set()
        return TrashDocumentOrFileInputSet.new()
      end

      def make_result_set()
        return TrashDocumentOrFileResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = TrashDocumentOrFileResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the TrashDocumentOrFile
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class TrashDocumentOrFileInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The title of the document or file to trash. Enclose in quotation marks for an exact, non-case-sensitive match.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the TrashDocumentOrFile Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class TrashDocumentOrFileResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "ResourceID" output from this Choreo execution
      	#
      	# @return String - (string) The resource ID for the document to trash as returned by Google.
      	####
      	def get_ResourceID()
      	  return @outputs["ResourceID"]
      	end
      end

    end # class TrashDocumentOrFile



    ##############################################################################
    #
    # UpdateFile
    #
    # Updates the content of an existing Google document.
    #
    ##############################################################################

    class UpdateFile < Choreography

      ####
      #  Create a new instance of the UpdateFile Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/UpdateFile")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return UpdateFileInputSet
      ####
      def new_input_set()
        return UpdateFileInputSet.new()
      end

      def make_result_set()
        return UpdateFileResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = UpdateFileResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the UpdateFile
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class UpdateFileInputSet < Choreography::InputSet

        #### 
        # Set the value of the FileContents input for this Choreo. 
        # 
        # @param String - (conditional, string) The base64-encoded contents of the file you want to update.
        ###

        def set_FileContents(value)
          set_input("FileContents", value)
        end
        #### 
        # Set the value of the ContentType input for this Choreo. 
        # 
        # @param String - (required, string) Enter the content type for the file. Currently, the supported content types are: application/pdf, application/rtf, application/msword, application/vnd.ms-excel, text/plain, and text/csv.
        ###

        def set_ContentType(value)
          set_input("ContentType", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) The password for your Google account.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The title of the document that you want to update.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the VaultFile input for this Choreo. 
        # 
        # @param TembooPath - The path to the Vault file to upload. This can be used as an alternative to the FileContents input.
        ###

        def set_VaultFile(value)
          set_alias("VaultFile", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the UpdateFile Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class UpdateFileResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class UpdateFile



    ##############################################################################
    #
    # UploadFile
    #
    # Uploads MS Word, Excel, or plain text documents to a Google account.
    #
    ##############################################################################

    class UploadFile < Choreography

      ####
      #  Create a new instance of the UploadFile Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Documents/UploadFile")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return UploadFileInputSet
      ####
      def new_input_set()
        return UploadFileInputSet.new()
      end

      def make_result_set()
        return UploadFileResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = UploadFileResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the UploadFile
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class UploadFileInputSet < Choreography::InputSet

        #### 
        # Set the value of the FileContents input for this Choreo. 
        # 
        # @param String - (conditional, string) The base64-encoded contents of the file you want to upload. Required unless using the VaultFile alias input (an advnaced option used when running Choreos in the Temboo Designer).
        ###

        def set_FileContents(value)
          set_input("FileContents", value)
        end
        #### 
        # Set the value of the ContentType input for this Choreo. 
        # 
        # @param String - (required, string) Enter the content type for the file. Currently, the supported content types are: application/pdf, application/rtf, application/msword, application/vnd.ms-excel, text/plain, and text/csv.
        ###

        def set_ContentType(value)
          set_input("ContentType", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) The password for your Google account.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The name for the file you're uploading.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the VaultFile input for this Choreo. 
        # 
        # @param TembooPath - The path to the Vault file to upload. Required unless using the FileContents input variable instead.
        ###

        def set_VaultFile(value)
          set_alias("VaultFile", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the UploadFile Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class UploadFileResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from the Google Documents API.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class UploadFile




  end # module Documents

  module Drive




    module Changes



      ##############################################################################
      #
      # Get
      #
      # Gets a specific change.
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Changes/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ChangeID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the change.
          ###

          def set_ChangeID(value)
            set_input("ChangeID", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # List
      #
      # Lists the changes for a user.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Changes/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the IncludeDeleted input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to include deleted items. (Default: true).
          ###

          def set_IncludeDeleted(value)
            set_input("IncludeDeleted", value)
          end
          #### 
          # Set the value of the IncludeSubscribed input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to include shared files and public files the user opened. If false, the list includes owned files plus any shared or public files the user explictly added to a folder in Drive. (Default: true)
          ###

          def set_IncludeSubscribed(value)
            set_input("IncludeSubscribed", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Maximum number of changes to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) Page token for changes.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the StartChangeID input for this Choreo. 
          # 
          # @param String - (optional, multiline) Change ID to start listing changes from.
          ###

          def set_StartChangeID(value)
            set_input("StartChangeID", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class List




    end # module Changes

    module Children



      ##############################################################################
      #
      # Delete
      #
      # Removes a child for a folder.
      #
      ##############################################################################

      class Delete < Choreography

        ####
        #  Create a new instance of the Delete Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Children/Delete")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteInputSet
        ####
        def new_input_set()
          return DeleteInputSet.new()
        end

        def make_result_set()
          return DeleteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Delete
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ChildID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the child.
          ###

          def set_ChildID(value)
            set_input("ChildID", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FolderID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the folder.
          ###

          def set_FolderID(value)
            set_input("FolderID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Delete Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Delete



      ##############################################################################
      #
      # Get
      #
      # Gets a specific child reference.
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Children/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ChildID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the child.
          ###

          def set_ChildID(value)
            set_input("ChildID", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FolderID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the folder.
          ###

          def set_FolderID(value)
            set_input("FolderID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # Insert
      #
      # Inserts a file into a folder.
      #
      ##############################################################################

      class Insert < Choreography

        ####
        #  Create a new instance of the Insert Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Children/Insert")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertInputSet
        ####
        def new_input_set()
          return InsertInputSet.new()
        end

        def make_result_set()
          return InsertResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Insert
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FolderID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the folder.
          ###

          def set_FolderID(value)
            set_input("FolderID", value)
          end
          #### 
          # Set the value of the ID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the child.
          ###

          def set_ID(value)
            set_input("ID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Insert Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Insert



      ##############################################################################
      #
      # List
      #
      # Lists the children of a specified folder.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Children/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FolderID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the folder. To list all files in the root folder, specify the value "root".
          ###

          def set_FolderID(value)
            set_input("FolderID", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) Maximum number of children to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) Page token for children.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Query input for this Choreo. 
          # 
          # @param String - (optional, string) Query string for searching children.
          ###

          def set_Query(value)
            set_input("Query", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class List




    end # module Children

    module Comments



      ##############################################################################
      #
      # Delete
      #
      # Deletes a comment.
      #
      ##############################################################################

      class Delete < Choreography

        ####
        #  Create a new instance of the Delete Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Comments/Delete")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteInputSet
        ####
        def new_input_set()
          return DeleteInputSet.new()
        end

        def make_result_set()
          return DeleteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Delete
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the CommentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the comment.
          ###

          def set_CommentID(value)
            set_input("CommentID", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Delete Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Delete



      ##############################################################################
      #
      # Get
      #
      # Gets a comment by ID.
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Comments/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the CommentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the comment.
          ###

          def set_CommentID(value)
            set_input("CommentID", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the IncludeDeleted input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) If set, this will succeed when retrieving a deleted comment, and will include any deleted replies. (Default: false)
          ###

          def set_IncludeDeleted(value)
            set_input("IncludeDeleted", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # Insert
      #
      # Creates a new comment on the given file.
      #
      ##############################################################################

      class Insert < Choreography

        ####
        #  Create a new instance of the Insert Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Comments/Insert")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertInputSet
        ####
        def new_input_set()
          return InsertInputSet.new()
        end

        def make_result_set()
          return InsertResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Insert
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertInputSet < Choreography::InputSet

          #### 
          # Set the value of the RequestBody input for this Choreo. 
          # 
          # @param String - (required, json) A JSON representation of fields in a comment resource which shoud contain at least one key for content. See documentation for formatting examples.
          ###

          def set_RequestBody(value)
            set_input("RequestBody", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Insert Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Insert



      ##############################################################################
      #
      # List
      #
      # Lists a file's comments.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Comments/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the IncludeDeleted input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) If set, this will succeed when retrieving a deleted comment, and will include any deleted replies. (Default: false)
          ###

          def set_IncludeDeleted(value)
            set_input("IncludeDeleted", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param String - (optional, string) The maximum number of discussions to include in the response, used for paging. Acceptable values are 0 to 100, inclusive. (Default: 20)
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the UpdatedMIn input for this Choreo. 
          # 
          # @param String - (optional, string) Only discussions that were updated after this timestamp will be returned. Formatted as an RFC 3339 timestamp.
          ###

          def set_UpdatedMIn(value)
            set_input("UpdatedMIn", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class List



      ##############################################################################
      #
      # Update
      #
      # Updates an existing comment.
      #
      ##############################################################################

      class Update < Choreography

        ####
        #  Create a new instance of the Update Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Comments/Update")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return UpdateInputSet
        ####
        def new_input_set()
          return UpdateInputSet.new()
        end

        def make_result_set()
          return UpdateResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = UpdateResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Update
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class UpdateInputSet < Choreography::InputSet

          #### 
          # Set the value of the RequestBody input for this Choreo. 
          # 
          # @param String - (required, json) A JSON representation of fields in a comment resource which shoud contain at least one key for content. See documentation for formatting examples.
          ###

          def set_RequestBody(value)
            set_input("RequestBody", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the CommentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the comment.
          ###

          def set_CommentID(value)
            set_input("CommentID", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Update Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class UpdateResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Update




    end # module Comments

    module Files



      ##############################################################################
      #
      # Copy
      #
      # Creates a copy of the specified file.
      #
      ##############################################################################

      class Copy < Choreography

        ####
        #  Create a new instance of the Copy Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Files/Copy")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return CopyInputSet
        ####
        def new_input_set()
          return CopyInputSet.new()
        end

        def make_result_set()
          return CopyResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = CopyResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Copy
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class CopyInputSet < Choreography::InputSet

          #### 
          # Set the value of the RequestBody input for this Choreo. 
          # 
          # @param String - (optional, json) A JSON representation of fields in a file resource. File metadata information (such as the title) can be set using this input. See documentation for formatting examples.
          ###

          def set_RequestBody(value)
            set_input("RequestBody", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Convert input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to convert this file to the corresponding Google Docs format. (Default: false).
          ###

          def set_Convert(value)
            set_input("Convert", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file to copy.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the OCR input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (Default: false)
          ###

          def set_OCR(value)
            set_input("OCR", value)
          end
          #### 
          # Set the value of the OcrLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
          ###

          def set_OcrLanguage(value)
            set_input("OcrLanguage", value)
          end
          #### 
          # Set the value of the Pinned input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to pin the head revision of the uploaded file. (Default: false).
          ###

          def set_Pinned(value)
            set_input("Pinned", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the SourceLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) The language of the original file to be translated.
          ###

          def set_SourceLanguage(value)
            set_input("SourceLanguage", value)
          end
          #### 
          # Set the value of the TargetLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) Target language to translate the file to. If no sourceLanguage is provided, the API will attempt to detect the language.
          ###

          def set_TargetLanguage(value)
            set_input("TargetLanguage", value)
          end
          #### 
          # Set the value of the TimedTextLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) The language of the timed text.
          ###

          def set_TimedTextLanguage(value)
            set_input("TimedTextLanguage", value)
          end
          #### 
          # Set the value of the TimedTextTrackName input for this Choreo. 
          # 
          # @param String - (optional, string) The timed text track name.
          ###

          def set_TimedTextTrackName(value)
            set_input("TimedTextTrackName", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Copy Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class CopyResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Copy



      ##############################################################################
      #
      # Delete
      #
      # Permanently deletes a file by ID.
      #
      ##############################################################################

      class Delete < Choreography

        ####
        #  Create a new instance of the Delete Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Files/Delete")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteInputSet
        ####
        def new_input_set()
          return DeleteInputSet.new()
        end

        def make_result_set()
          return DeleteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Delete
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file to delete.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Delete Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Delete



      ##############################################################################
      #
      # Get
      #
      # Gets a file's metadata and content by ID.
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Files/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the ExportFormat input for this Choreo. 
          # 
          # @param String - (optional, string) Indicates the download format (i.e. pdf, doc, txt, rtf, odt, etc). When specified, the FileContent output will contain the file's base64 encoded value.
          ###

          def set_ExportFormat(value)
            set_input("ExportFormat", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file to retrieve.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the UpdateViewDate input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to update the view date after successfully retrieving the file. Default value is false.
          ###

          def set_UpdateViewDate(value)
            set_input("UpdateViewDate", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "FileMetadata" output from this Choreo execution
        	#
        	# @return String - (json) The file metadata returned in the response from Google.
        	####
        	def get_FileMetadata()
        	  return @outputs["FileMetadata"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "FileContent" output from this Choreo execution
        	#
        	# @return String - (string) The Base64 encoded file content. Only returned when the optional "Format" parameter is provided.
        	####
        	def get_FileContent()
        	  return @outputs["FileContent"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # Insert
      #
      # Inserts a new file.
      #
      ##############################################################################

      class Insert < Choreography

        ####
        #  Create a new instance of the Insert Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Files/Insert")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertInputSet
        ####
        def new_input_set()
          return InsertInputSet.new()
        end

        def make_result_set()
          return InsertResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Insert
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertInputSet < Choreography::InputSet

          #### 
          # Set the value of the RequestBody input for this Choreo. 
          # 
          # @param String - (conditional, json) A JSON representation of fields in a file resource. File metadata information (such as the title) can be inserted using this input. See documentation for formatting examples.
          ###

          def set_RequestBody(value)
            set_input("RequestBody", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the ContentType input for this Choreo. 
          # 
          # @param String - (conditional, string) The Content-Type of the file that is being uploaded (i.e. image/jpg). Required when specifying the FileContent input.
          ###

          def set_ContentType(value)
            set_input("ContentType", value)
          end
          #### 
          # Set the value of the Convert input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to convert this file to the corresponding Google Docs format. (Default: false).
          ###

          def set_Convert(value)
            set_input("Convert", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileContent input for this Choreo. 
          # 
          # @param String - (conditional, string) The Base64 encoded contents of the file to upload.
          ###

          def set_FileContent(value)
            set_input("FileContent", value)
          end
          #### 
          # Set the value of the OCR input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (Default: false)
          ###

          def set_OCR(value)
            set_input("OCR", value)
          end
          #### 
          # Set the value of the OcrLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
          ###

          def set_OcrLanguage(value)
            set_input("OcrLanguage", value)
          end
          #### 
          # Set the value of the Pinned input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to pin the head revision of the uploaded file. (Default: false).
          ###

          def set_Pinned(value)
            set_input("Pinned", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the SourceLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) The language of the original file to be translated.
          ###

          def set_SourceLanguage(value)
            set_input("SourceLanguage", value)
          end
          #### 
          # Set the value of the TargetLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) Target language to translate the file to. If no sourceLanguage is provided, the API will attempt to detect the language.
          ###

          def set_TargetLanguage(value)
            set_input("TargetLanguage", value)
          end
          #### 
          # Set the value of the TimedTextLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) The language of the timed text.
          ###

          def set_TimedTextLanguage(value)
            set_input("TimedTextLanguage", value)
          end
          #### 
          # Set the value of the TimedTextTrackName input for this Choreo. 
          # 
          # @param String - (optional, string) The timed text track name.
          ###

          def set_TimedTextTrackName(value)
            set_input("TimedTextTrackName", value)
          end
          #### 
          # Set the value of the VaultFile input for this Choreo. 
          # 
          # @param TembooPath - A path to a vault file to upload. This can be used as an alternative to the FileContent input.
          ###

          def set_VaultFile(value)
            set_alias("VaultFile", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Insert Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Insert



      ##############################################################################
      #
      # List
      #
      # Lists the user's files.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Files/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of results to return.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "nextPageToken" found in the response which is used to page through results.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the Query input for this Choreo. 
          # 
          # @param String - (optional, string) A search query combining one or more search clauses (e.g. title='myFile.txt').
          ###

          def set_Query(value)
            set_input("Query", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "FileID" output from this Choreo execution
        	#
        	# @return String - (string) The id of the file returned. This is returned only when using the Query input to search for specific files.
        	####
        	def get_FileID()
        	  return @outputs["FileID"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class List



      ##############################################################################
      #
      # Touch
      #
      # Sets the file's updated time to the current server time.
      #
      ##############################################################################

      class Touch < Choreography

        ####
        #  Create a new instance of the Touch Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Files/Touch")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return TouchInputSet
        ####
        def new_input_set()
          return TouchInputSet.new()
        end

        def make_result_set()
          return TouchResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = TouchResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Touch
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class TouchInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file to update.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Touch Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class TouchResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Touch



      ##############################################################################
      #
      # Trash
      #
      # Moves a file to the trash.
      #
      ##############################################################################

      class Trash < Choreography

        ####
        #  Create a new instance of the Trash Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Files/Trash")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return TrashInputSet
        ####
        def new_input_set()
          return TrashInputSet.new()
        end

        def make_result_set()
          return TrashResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = TrashResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Trash
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class TrashInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file to trash.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Trash Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class TrashResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Trash



      ##############################################################################
      #
      # Untrash
      #
      # Restores a file from the trash.
      #
      ##############################################################################

      class Untrash < Choreography

        ####
        #  Create a new instance of the Untrash Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Files/Untrash")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return UntrashInputSet
        ####
        def new_input_set()
          return UntrashInputSet.new()
        end

        def make_result_set()
          return UntrashResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = UntrashResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Untrash
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class UntrashInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file to untrash.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Untrash Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class UntrashResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Untrash



      ##############################################################################
      #
      # Update
      #
      # Updates the metadata or content of an existing file.
      #
      ##############################################################################

      class Update < Choreography

        ####
        #  Create a new instance of the Update Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Files/Update")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return UpdateInputSet
        ####
        def new_input_set()
          return UpdateInputSet.new()
        end

        def make_result_set()
          return UpdateResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = UpdateResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Update
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class UpdateInputSet < Choreography::InputSet

          #### 
          # Set the value of the RequestBody input for this Choreo. 
          # 
          # @param String - (conditional, json) A JSON representation of fields in a file resource. File metadata information (such as the title) can be updated using this input. See documentation for formatting examples.
          ###

          def set_RequestBody(value)
            set_input("RequestBody", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the ContentType input for this Choreo. 
          # 
          # @param String - (conditional, string) The Content-Type of the file that is being updated (i.e. image/jpeg). Required if modifying the file content.
          ###

          def set_ContentType(value)
            set_input("ContentType", value)
          end
          #### 
          # Set the value of the Convert input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to convert this file to the corresponding Google Docs format. (Default: false).
          ###

          def set_Convert(value)
            set_input("Convert", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying which fields to include in a partial response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileContent input for this Choreo. 
          # 
          # @param String - (conditional, string) The new Base64 encoded contents of the file that is being updated.
          ###

          def set_FileContent(value)
            set_input("FileContent", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The id of the file to update.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the OCR input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to attempt OCR on .jpg, .png, .gif, or .pdf uploads. (Default: false)
          ###

          def set_OCR(value)
            set_input("OCR", value)
          end
          #### 
          # Set the value of the OcrLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) If ocr is true, hints at the language to use. Valid values are ISO 639-1 codes.
          ###

          def set_OcrLanguage(value)
            set_input("OcrLanguage", value)
          end
          #### 
          # Set the value of the Pinned input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to pin the new revision. (Default: false).
          ###

          def set_Pinned(value)
            set_input("Pinned", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the SetModifiedDate input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to set the modified date with the supplied modified date.
          ###

          def set_SetModifiedDate(value)
            set_input("SetModifiedDate", value)
          end
          #### 
          # Set the value of the SourceLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) The language of the original file to be translated.
          ###

          def set_SourceLanguage(value)
            set_input("SourceLanguage", value)
          end
          #### 
          # Set the value of the TargetLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) Target language to translate the file to. If no sourceLanguage is provided, the API will attempt to detect the language.
          ###

          def set_TargetLanguage(value)
            set_input("TargetLanguage", value)
          end
          #### 
          # Set the value of the TimedTextLanguage input for this Choreo. 
          # 
          # @param String - (optional, string) The language of the timed text.
          ###

          def set_TimedTextLanguage(value)
            set_input("TimedTextLanguage", value)
          end
          #### 
          # Set the value of the TimedTextTrackName input for this Choreo. 
          # 
          # @param String - (optional, string) The timed text track name.
          ###

          def set_TimedTextTrackName(value)
            set_input("TimedTextTrackName", value)
          end
          #### 
          # Set the value of the UpdateViewedDate input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to update the view date after successfully updating the file.
          ###

          def set_UpdateViewedDate(value)
            set_input("UpdateViewedDate", value)
          end
          #### 
          # Set the value of the VaultFile input for this Choreo. 
          # 
          # @param TembooPath - A path to a vault file to upload. This can be used as an alternative to the FileContent input.
          ###

          def set_VaultFile(value)
            set_alias("VaultFile", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Update Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class UpdateResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Update




    end # module Files

    module Parents



      ##############################################################################
      #
      # Delete
      #
      # Removes a parent from a file.
      #
      ##############################################################################

      class Delete < Choreography

        ####
        #  Create a new instance of the Delete Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Parents/Delete")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteInputSet
        ####
        def new_input_set()
          return DeleteInputSet.new()
        end

        def make_result_set()
          return DeleteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Delete
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the ParentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the parent.
          ###

          def set_ParentID(value)
            set_input("ParentID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Delete Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Delete



      ##############################################################################
      #
      # Get
      #
      # Gets a specific parent reference.
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Parents/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the ParentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the parent.
          ###

          def set_ParentID(value)
            set_input("ParentID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # Insert
      #
      # Adds a parent folder for a file.
      #
      ##############################################################################

      class Insert < Choreography

        ####
        #  Create a new instance of the Insert Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Parents/Insert")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertInputSet
        ####
        def new_input_set()
          return InsertInputSet.new()
        end

        def make_result_set()
          return InsertResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Insert
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the ParentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the parent.
          ###

          def set_ParentID(value)
            set_input("ParentID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Insert Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Insert



      ##############################################################################
      #
      # List
      #
      # Lists a file's parents.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Parents/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class List




    end # module Parents

    module Permissions



      ##############################################################################
      #
      # Delete
      #
      # Deletes a permission from a file.
      #
      ##############################################################################

      class Delete < Choreography

        ####
        #  Create a new instance of the Delete Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Permissions/Delete")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteInputSet
        ####
        def new_input_set()
          return DeleteInputSet.new()
        end

        def make_result_set()
          return DeleteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Delete
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the PermissionID input for this Choreo. 
          # 
          # @param String - (required, string) The ID for the permission.
          ###

          def set_PermissionID(value)
            set_input("PermissionID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Delete Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Delete



      ##############################################################################
      #
      # Get
      #
      # Gets a permission by ID.
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Permissions/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the PermissionID input for this Choreo. 
          # 
          # @param String - (required, string) The ID for the permission.
          ###

          def set_PermissionID(value)
            set_input("PermissionID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # Insert
      #
      # Inserts a permission for a file.
      #
      ##############################################################################

      class Insert < Choreography

        ####
        #  Create a new instance of the Insert Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Permissions/Insert")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertInputSet
        ####
        def new_input_set()
          return InsertInputSet.new()
        end

        def make_result_set()
          return InsertResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Insert
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertInputSet < Choreography::InputSet

          #### 
          # Set the value of the RequestBody input for this Choreo. 
          # 
          # @param String - (required, json) A JSON representation of fields in a permissions resource. The JSON string must contain keys for role, type, and value. See documentation for formatting examples.
          ###

          def set_RequestBody(value)
            set_input("RequestBody", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the SendNotificationEmails input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) Whether to send notification emails. (Default: true).
          ###

          def set_SendNotificationEmails(value)
            set_input("SendNotificationEmails", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Insert Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Insert



      ##############################################################################
      #
      # List
      #
      # Lists a file's permissions.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Permissions/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class List



      ##############################################################################
      #
      # Update
      #
      # Updates an existing permission.
      #
      ##############################################################################

      class Update < Choreography

        ####
        #  Create a new instance of the Update Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Permissions/Update")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return UpdateInputSet
        ####
        def new_input_set()
          return UpdateInputSet.new()
        end

        def make_result_set()
          return UpdateResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = UpdateResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Update
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class UpdateInputSet < Choreography::InputSet

          #### 
          # Set the value of the RequestBody input for this Choreo. 
          # 
          # @param String - (required, json) A JSON representation of fields in a permissions resource. The JSON string can contain keys for role and additionalRoles. See documentation for formatting examples.
          ###

          def set_RequestBody(value)
            set_input("RequestBody", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the PermissionID input for this Choreo. 
          # 
          # @param String - (required, string) The ID for the permission.
          ###

          def set_PermissionID(value)
            set_input("PermissionID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Update Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class UpdateResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Update




    end # module Permissions
    ##############################################################################
    #
    # RefreshToken
    #
    # Retrieves a new access token when the provided access token is expired.
    #
    ##############################################################################

    class RefreshToken < Choreography

      ####
      #  Create a new instance of the RefreshToken Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Drive/RefreshToken")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RefreshTokenInputSet
      ####
      def new_input_set()
        return RefreshTokenInputSet.new()
      end

      def make_result_set()
        return RefreshTokenResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RefreshTokenResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RefreshToken
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RefreshTokenInputSet < Choreography::InputSet

        #### 
        # Set the value of the ClientId input for this Choreo. 
        # 
        # @param String - (required, string) The client id provided by Google Pacasa when you sign up for an account
        ###

        def set_ClientId(value)
          set_input("ClientId", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The client secret provided by Google Picasa when you sign up for an account
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the Oauth process to be used when your access token expires
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RefreshToken Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RefreshTokenResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (string) The access token that is parsed from the request to refresh the token
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      end

    end # class RefreshToken




    module Replies



      ##############################################################################
      #
      # Delete
      #
      # Deletes a reply.
      #
      ##############################################################################

      class Delete < Choreography

        ####
        #  Create a new instance of the Delete Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Replies/Delete")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteInputSet
        ####
        def new_input_set()
          return DeleteInputSet.new()
        end

        def make_result_set()
          return DeleteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Delete
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the CommentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the comment.
          ###

          def set_CommentID(value)
            set_input("CommentID", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the ReplyID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the reply.
          ###

          def set_ReplyID(value)
            set_input("ReplyID", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Delete Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Delete



      ##############################################################################
      #
      # Get
      #
      # Gets a reply
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Replies/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the CommentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the comment.
          ###

          def set_CommentID(value)
            set_input("CommentID", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the IncludeDeleted input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) If set, this will succeed when retrieving a deleted reply. (Default: false)
          ###

          def set_IncludeDeleted(value)
            set_input("IncludeDeleted", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the ReplyID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the reply.
          ###

          def set_ReplyID(value)
            set_input("ReplyID", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # Insert
      #
      # Creates a new reply to the given comment.
      #
      ##############################################################################

      class Insert < Choreography

        ####
        #  Create a new instance of the Insert Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Replies/Insert")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return InsertInputSet
        ####
        def new_input_set()
          return InsertInputSet.new()
        end

        def make_result_set()
          return InsertResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = InsertResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Insert
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class InsertInputSet < Choreography::InputSet

          #### 
          # Set the value of the RequestBody input for this Choreo. 
          # 
          # @param String - (required, json) A JSON representation of fields in a reply resource. The JSON string must contain a key for content or verb. See documentation for formatting examples.
          ###

          def set_RequestBody(value)
            set_input("RequestBody", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the CommentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the comment.
          ###

          def set_CommentID(value)
            set_input("CommentID", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Insert Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class InsertResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Insert



      ##############################################################################
      #
      # List
      #
      # Lists all of the replies to a comment.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Replies/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the CommentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the comment.
          ###

          def set_CommentID(value)
            set_input("CommentID", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the IncludeDeleted input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) If set, this will succeed when retrieving a deleted reply. (Default: false)
          ###

          def set_IncludeDeleted(value)
            set_input("IncludeDeleted", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of replies to include in the response, used for paging. Acceptable values are 0 to 100, inclusive. (Default: 20).
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The continuation token, used to page through large result sets. To get the next page of results, set this parameter to the value of "nextPageToken" from the previous response.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class List



      ##############################################################################
      #
      # Update
      #
      # Updates an existing reply.
      #
      ##############################################################################

      class Update < Choreography

        ####
        #  Create a new instance of the Update Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Replies/Update")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return UpdateInputSet
        ####
        def new_input_set()
          return UpdateInputSet.new()
        end

        def make_result_set()
          return UpdateResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = UpdateResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Update
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class UpdateInputSet < Choreography::InputSet

          #### 
          # Set the value of the RequestBody input for this Choreo. 
          # 
          # @param String - (required, json) A JSON representation of fields in a reply resource. The JSON string must contain a key for content. See documentation for formatting examples.
          ###

          def set_RequestBody(value)
            set_input("RequestBody", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the CommentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the comment.
          ###

          def set_CommentID(value)
            set_input("CommentID", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the ReplyID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the reply.
          ###

          def set_ReplyID(value)
            set_input("ReplyID", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Update Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class UpdateResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Update




    end # module Replies

    module Revisions



      ##############################################################################
      #
      # Delete
      #
      # Removes a revision.
      #
      ##############################################################################

      class Delete < Choreography

        ####
        #  Create a new instance of the Delete Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Revisions/Delete")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return DeleteInputSet
        ####
        def new_input_set()
          return DeleteInputSet.new()
        end

        def make_result_set()
          return DeleteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = DeleteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Delete
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class DeleteInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the RevisionID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the revision.
          ###

          def set_RevisionID(value)
            set_input("RevisionID", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Delete Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class DeleteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Delete



      ##############################################################################
      #
      # Get
      #
      # Gets a specific revision.
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Revisions/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the RevisionID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the revision.
          ###

          def set_RevisionID(value)
            set_input("RevisionID", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # List
      #
      # Lists a file's revisions.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Revisions/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class List



      ##############################################################################
      #
      # Update
      #
      # Updates a revision.
      #
      ##############################################################################

      class Update < Choreography

        ####
        #  Create a new instance of the Update Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Drive/Revisions/Update")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return UpdateInputSet
        ####
        def new_input_set()
          return UpdateInputSet.new()
        end

        def make_result_set()
          return UpdateResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = UpdateResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Update
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class UpdateInputSet < Choreography::InputSet

          #### 
          # Set the value of the RequestBody input for this Choreo. 
          # 
          # @param String - (required, json) A JSON representation of fields in a reply resource which shoud contain at least one key for pinned, publishAuto, published, or publishedOutsideDomain. See documentation for formatting examples.
          ###

          def set_RequestBody(value)
            set_input("RequestBody", value)
          end
          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the FileID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the file.
          ###

          def set_FileID(value)
            set_input("FileID", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the RevisionID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the revision.
          ###

          def set_RevisionID(value)
            set_input("RevisionID", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Update Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class UpdateResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Update




    end # module Revisions

  end # module Drive

  module Elevation



    ##############################################################################
    #
    # GetLocationElevation
    #
    # Obtain elevation information for a path generated by a set of geo-coordinates.
    #
    ##############################################################################

    class GetLocationElevation < Choreography

      ####
      #  Create a new instance of the GetLocationElevation Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Elevation/GetLocationElevation")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetLocationElevationInputSet
      ####
      def new_input_set()
        return GetLocationElevationInputSet.new()
      end

      def make_result_set()
        return GetLocationElevationResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetLocationElevationResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetLocationElevation
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetLocationElevationInputSet < Choreography::InputSet

        #### 
        # Set the value of the Locations input for this Choreo. 
        # 
        # @param String - (required, string) Enter the location(s) for which elevation data will be obtained.  Input formats: a single latitude/longitude coordinate pair; an array of coordinates separated by a |. A set of encoded coordinates.
        ###

        def set_Locations(value)
          set_input("Locations", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetLocationElevation Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetLocationElevationResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetLocationElevation



    ##############################################################################
    #
    # GetPathElevation
    #
    # Obtain elevation information for a path specified by a set of  geo-coordinates.
    #
    ##############################################################################

    class GetPathElevation < Choreography

      ####
      #  Create a new instance of the GetPathElevation Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Elevation/GetPathElevation")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetPathElevationInputSet
      ####
      def new_input_set()
        return GetPathElevationInputSet.new()
      end

      def make_result_set()
        return GetPathElevationResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetPathElevationResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetPathElevation
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetPathElevationInputSet < Choreography::InputSet

        #### 
        # Set the value of the Path input for this Choreo. 
        # 
        # @param String - (required, string) Specify the path for which elevation data will be obtained.  Input formats: an array of two or more lat/longitude coordinate pairs; A set of encoded coordinates using the Encoded Polyline Algorithm.
        ###

        def set_Path(value)
          set_input("Path", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Samples input for this Choreo. 
        # 
        # @param Integer - (required, integer) Enter the number of sample points.  See API docs for additional information.
        ###

        def set_Samples(value)
          set_input("Samples", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetPathElevation Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetPathElevationResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetPathElevation




  end # module Elevation

  module Geocoding



    ##############################################################################
    #
    # GeocodeByAddress
    #
    # Converts a human-readable address into geographic coordinates.
    #
    ##############################################################################

    class GeocodeByAddress < Choreography

      ####
      #  Create a new instance of the GeocodeByAddress Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Geocoding/GeocodeByAddress")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GeocodeByAddressInputSet
      ####
      def new_input_set()
        return GeocodeByAddressInputSet.new()
      end

      def make_result_set()
        return GeocodeByAddressResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GeocodeByAddressResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GeocodeByAddress
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GeocodeByAddressInputSet < Choreography::InputSet

        #### 
        # Set the value of the Address input for this Choreo. 
        # 
        # @param String - (required, string) The address that you want to geocode.
        ###

        def set_Address(value)
          set_input("Address", value)
        end
        #### 
        # Set the value of the Bounds input for this Choreo. 
        # 
        # @param String - (optional, string) The bounding box of the viewport within which to bias geocode results more prominently.
        ###

        def set_Bounds(value)
          set_input("Bounds", value)
        end
        #### 
        # Set the value of the Language input for this Choreo. 
        # 
        # @param String - (optional, string) The language in which to return results. Defaults to 'en' (English).
        ###

        def set_Language(value)
          set_input("Language", value)
        end
        #### 
        # Set the value of the Region input for this Choreo. 
        # 
        # @param String - (optional, string) The region code, specified as a ccTLD ("top-level domain") two-character value. Defaults to 'us' (United States).
        ###

        def set_Region(value)
          set_input("Region", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are "xml" (the default) and "json".
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the geocoding request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GeocodeByAddress Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GeocodeByAddressResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "Longitude" output from this Choreo execution
      	#
      	# @return String - (decimal) The longitude coordinate associated with the address provided.
      	####
      	def get_Longitude()
      	  return @outputs["Longitude"]
      	end
      	####
      	# Retrieve the value for the "Latitude" output from this Choreo execution
      	#
      	# @return String - (decimal) The latitude coordinate associated with the address provided.
      	####
      	def get_Latitude()
      	  return @outputs["Latitude"]
      	end
      end

    end # class GeocodeByAddress



    ##############################################################################
    #
    # GeocodeByCoordinates
    #
    # Converts latitude and longitude coordinates into a human-readable address.
    #
    ##############################################################################

    class GeocodeByCoordinates < Choreography

      ####
      #  Create a new instance of the GeocodeByCoordinates Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Geocoding/GeocodeByCoordinates")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GeocodeByCoordinatesInputSet
      ####
      def new_input_set()
        return GeocodeByCoordinatesInputSet.new()
      end

      def make_result_set()
        return GeocodeByCoordinatesResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GeocodeByCoordinatesResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GeocodeByCoordinates
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GeocodeByCoordinatesInputSet < Choreography::InputSet

        #### 
        # Set the value of the Bounds input for this Choreo. 
        # 
        # @param String - (optional, string) The bounding box of the viewport within which to bias geocode results more prominently.
        ###

        def set_Bounds(value)
          set_input("Bounds", value)
        end
        #### 
        # Set the value of the Language input for this Choreo. 
        # 
        # @param String - (optional, string) The language in which to return results. Defaults to 'en' (English).
        ###

        def set_Language(value)
          set_input("Language", value)
        end
        #### 
        # Set the value of the Latitude input for this Choreo. 
        # 
        # @param BigDecimal - (required, decimal) The latitude value for which you wish to obtain the closest, human-readable address.
        ###

        def set_Latitude(value)
          set_input("Latitude", value)
        end
        #### 
        # Set the value of the Longitude input for this Choreo. 
        # 
        # @param BigDecimal - (required, decimal) The longitude value for which you wish to obtain the closest, human-readable address.
        ###

        def set_Longitude(value)
          set_input("Longitude", value)
        end
        #### 
        # Set the value of the Region input for this Choreo. 
        # 
        # @param String - (optional, string) The region code, specified as a ccTLD ("top-level domain") two-character value. Defaults to 'us' (United States).
        ###

        def set_Region(value)
          set_input("Region", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are "xml" (the default) and "json".
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the geocoding request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GeocodeByCoordinates Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GeocodeByCoordinatesResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GeocodeByCoordinates




  end # module Geocoding

  module Gmail



    ##############################################################################
    #
    # GetEmail
    #
    # Retrieves a single email message from a Gmail inbox.
    #
    ##############################################################################

    class GetEmail < Choreography

      ####
      #  Create a new instance of the GetEmail Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Gmail/GetEmail")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetEmailInputSet
      ####
      def new_input_set()
        return GetEmailInputSet.new()
      end

      def make_result_set()
        return GetEmailResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetEmailResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetEmail
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetEmailInputSet < Choreography::InputSet

        #### 
        # Set the value of the DeleteAfterRetrieval input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) To delete the message after retrieval, set to 1. Defaults to 0 indicating that the message will not be deleted after retrieval. Note that you will need to adjust Gmail settings to use this feature.
        ###

        def set_DeleteAfterRetrieval(value)
          set_input("DeleteAfterRetrieval", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Gmail password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the SenderAddressFilter input for this Choreo. 
        # 
        # @param String - (optional, string) A string used to filter by a particular sender address.
        ###

        def set_SenderAddressFilter(value)
          set_input("SenderAddressFilter", value)
        end
        #### 
        # Set the value of the SubjectFilter input for this Choreo. 
        # 
        # @param String - (optional, string) A string used to filter by subject.
        ###

        def set_SubjectFilter(value)
          set_input("SubjectFilter", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your Gmail username. Provide the complete email address used for logging into Gmail.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetEmail Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetEmailResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Subject" output from this Choreo execution
      	#
      	# @return String - (string) The subject of the email.
      	####
      	def get_Subject()
      	  return @outputs["Subject"]
      	end
      	####
      	# Retrieve the value for the "MessageBody" output from this Choreo execution
      	#
      	# @return String - (string) The message body of the email.
      	####
      	def get_MessageBody()
      	  return @outputs["MessageBody"]
      	end
      	####
      	# Retrieve the value for the "Message" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Gmail including the message body and message header fields.
      	####
      	def get_Message()
      	  return @outputs["Message"]
      	end
      	####
      	# Retrieve the value for the "Sender" output from this Choreo execution
      	#
      	# @return String - (string) The sender email address.
      	####
      	def get_Sender()
      	  return @outputs["Sender"]
      	end
      	####
      	# Retrieve the value for the "Attachment" output from this Choreo execution
      	#
      	# @return String - (string) If the email has an attachment, the Base64 encoded contents of the attachment are returned in this output variable.
      	####
      	def get_Attachment()
      	  return @outputs["Attachment"]
      	end
      end

    end # class GetEmail



    ##############################################################################
    #
    # GetEmails
    #
    # Retrieves one or more email messages from a Gmail inbox.
    #
    ##############################################################################

    class GetEmails < Choreography

      ####
      #  Create a new instance of the GetEmails Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Gmail/GetEmails")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetEmailsInputSet
      ####
      def new_input_set()
        return GetEmailsInputSet.new()
      end

      def make_result_set()
        return GetEmailsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetEmailsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetEmails
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetEmailsInputSet < Choreography::InputSet

        #### 
        # Set the value of the DeleteAfterRetrieval input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) To delete messages after retrieval, set to 1. Defaults to 0 indicating that the messages will not be deleted after retrieval. Note that you will need to adjust Gmail settings to use this feature.
        ###

        def set_DeleteAfterRetrieval(value)
          set_input("DeleteAfterRetrieval", value)
        end
        #### 
        # Set the value of the MaxMessages input for this Choreo. 
        # 
        # @param String - (optional, string) The max number of email messages to retrieve. Valid values are 1-100. Defaults to 100.
        ###

        def set_MaxMessages(value)
          set_input("MaxMessages", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Gmail password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the SenderAddressFilter input for this Choreo. 
        # 
        # @param String - (optional, string) A string used to filter by a particular sender address.
        ###

        def set_SenderAddressFilter(value)
          set_input("SenderAddressFilter", value)
        end
        #### 
        # Set the value of the SubjectFilter input for this Choreo. 
        # 
        # @param String - (optional, string) A string used to filter by subject.
        ###

        def set_SubjectFilter(value)
          set_input("SubjectFilter", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your Gmail username. Provide the complete email address used for logging into Gmail.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetEmails Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetEmailsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Messages" output from this Choreo execution
      	#
      	# @return String - (xml) A list of the email messages retrieved from Gmail. Each email message will contain the message body and message header fields.
      	####
      	def get_Messages()
      	  return @outputs["Messages"]
      	end
      end

    end # class GetEmails



    ##############################################################################
    #
    # GetUnreadImportantEmail
    #
    # Allows you to access a read-only Gmail feed that contains a list of unread emails that are marked important.
    #
    ##############################################################################

    class GetUnreadImportantEmail < Choreography

      ####
      #  Create a new instance of the GetUnreadImportantEmail Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Gmail/GetUnreadImportantEmail")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetUnreadImportantEmailInputSet
      ####
      def new_input_set()
        return GetUnreadImportantEmailInputSet.new()
      end

      def make_result_set()
        return GetUnreadImportantEmailResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetUnreadImportantEmailResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetUnreadImportantEmail
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetUnreadImportantEmailInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Gmail password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseMode input for this Choreo. 
        # 
        # @param String - (optional, string) Used to simplify the response. Valid values are: simple and verbose. When set to simple, only the message string is returned. Verbose mode returns the full object. Defaults to "simple".
        ###

        def set_ResponseMode(value)
          set_input("ResponseMode", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetUnreadImportantEmail Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetUnreadImportantEmailResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetUnreadImportantEmail



    ##############################################################################
    #
    # GetUnreadMail
    #
    # Allows you to access a read-only Gmail feed that contains a list of unread emails.
    #
    ##############################################################################

    class GetUnreadMail < Choreography

      ####
      #  Create a new instance of the GetUnreadMail Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Gmail/GetUnreadMail")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetUnreadMailInputSet
      ####
      def new_input_set()
        return GetUnreadMailInputSet.new()
      end

      def make_result_set()
        return GetUnreadMailResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetUnreadMailResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetUnreadMail
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetUnreadMailInputSet < Choreography::InputSet

        #### 
        # Set the value of the Label input for this Choreo. 
        # 
        # @param String - (optional, string) The name of a Gmail Label to retrieve messages from (e.g., important, starred, sent, junk-e-mail, all).
        ###

        def set_Label(value)
          set_input("Label", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Gmail password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseMode input for this Choreo. 
        # 
        # @param String - (optional, string) Used to simplify the response. Valid values are: simple and verbose. When set to simple, only the message string is returned. Verbose mode returns the full object. Defaults to "simple".
        ###

        def set_ResponseMode(value)
          set_input("ResponseMode", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetUnreadMail Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetUnreadMailResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "FullCount" output from this Choreo execution
      	#
      	# @return String - (integer) The number of unread messages. This is parsed from the Google XML response. Note that when using the Label input to retrieve messages from a particular Gmail label, the full count element may be 0.
      	####
      	def get_FullCount()
      	  return @outputs["FullCount"]
      	end
      end

    end # class GetUnreadMail



    ##############################################################################
    #
    # GetUnreadMailFromSender
    #
    # Allows you to access a read-only Gmail feed that contains a list of unread emails for the specified sender.
    #
    ##############################################################################

    class GetUnreadMailFromSender < Choreography

      ####
      #  Create a new instance of the GetUnreadMailFromSender Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Gmail/GetUnreadMailFromSender")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetUnreadMailFromSenderInputSet
      ####
      def new_input_set()
        return GetUnreadMailFromSenderInputSet.new()
      end

      def make_result_set()
        return GetUnreadMailFromSenderResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetUnreadMailFromSenderResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetUnreadMailFromSender
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetUnreadMailFromSenderInputSet < Choreography::InputSet

        #### 
        # Set the value of the Label input for this Choreo. 
        # 
        # @param String - (optional, string) The name of a Gmail Label to retrieve messages from (e.g., important, starred, sent, junk-e-mail, all).
        ###

        def set_Label(value)
          set_input("Label", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Gmail password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseMode input for this Choreo. 
        # 
        # @param String - (optional, string) Used to simplify the response. Valid values are: simple and verbose. When set to simple, only the message string is returned. Verbose mode returns the full object. Defaults to "simple".
        ###

        def set_ResponseMode(value)
          set_input("ResponseMode", value)
        end
        #### 
        # Set the value of the SenderEmail input for this Choreo. 
        # 
        # @param String - (required, string) Email address of the sender you wish to filter by.
        ###

        def set_SenderEmail(value)
          set_input("SenderEmail", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetUnreadMailFromSender Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetUnreadMailFromSenderResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "FullCount" output from this Choreo execution
      	#
      	# @return String - (integer) The number of unread messages. This is parsed from the Google XML response. Note that when using the Label input to retrieve messages from a particular Gmail label, the full count element may be 0.
      	####
      	def get_FullCount()
      	  return @outputs["FullCount"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetUnreadMailFromSender



    ##############################################################################
    #
    # GetUnreadMailWithLabel
    #
    # Allows you to access a read-only Gmail feed that contains a list of unread emails with the specified label.
    #
    ##############################################################################

    class GetUnreadMailWithLabel < Choreography

      ####
      #  Create a new instance of the GetUnreadMailWithLabel Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Gmail/GetUnreadMailWithLabel")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return GetUnreadMailWithLabelInputSet
      ####
      def new_input_set()
        return GetUnreadMailWithLabelInputSet.new()
      end

      def make_result_set()
        return GetUnreadMailWithLabelResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = GetUnreadMailWithLabelResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the GetUnreadMailWithLabel
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class GetUnreadMailWithLabelInputSet < Choreography::InputSet

        #### 
        # Set the value of the Label input for this Choreo. 
        # 
        # @param String - (required, string) The name of a Gmail Label to retrieve messages from (e.g., important, starred, sent, junk-e-mail, all).
        ###

        def set_Label(value)
          set_input("Label", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Gmail password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseMode input for this Choreo. 
        # 
        # @param String - (optional, string) Used to simplify the response. Valid values are: simple and verbose. When set to simple, only the message string is returned. Verbose mode returns the full object. Defaults to "simple".
        ###

        def set_ResponseMode(value)
          set_input("ResponseMode", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the GetUnreadMailWithLabel Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class GetUnreadMailWithLabelResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "FullCount" output from this Choreo execution
      	#
      	# @return String - (integer) The number of unread messages. This is parsed from the Google XML response. Note the full count element may be 0 because this Choreography retrieves Gmail messages by a particular Label.
      	####
      	def get_FullCount()
      	  return @outputs["FullCount"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class GetUnreadMailWithLabel



    ##############################################################################
    #
    # InboxFeed
    #
    # Allows you to access a read-only Gmail feed that contains a list of unread emails.
    #
    ##############################################################################

    class InboxFeed < Choreography

      ####
      #  Create a new instance of the InboxFeed Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Gmail/InboxFeed")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return InboxFeedInputSet
      ####
      def new_input_set()
        return InboxFeedInputSet.new()
      end

      def make_result_set()
        return InboxFeedResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = InboxFeedResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the InboxFeed
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class InboxFeedInputSet < Choreography::InputSet

        #### 
        # Set the value of the Label input for this Choreo. 
        # 
        # @param String - (optional, string) The name of a Gmail Label to retrieve messages from (e.g., important, starred, sent, junk-e-mail, all).
        ###

        def set_Label(value)
          set_input("Label", value)
        end
        #### 
        # Set the value of the Mode input for this Choreo. 
        # 
        # @param String - (optional, string) Used when an XPath query is provided. Valid values are "select" or "recursive". Select mode will return the first match of the query. In recursive mode, the XPath query will be applied within a loop.
        ###

        def set_Mode(value)
          set_input("Mode", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Gmail password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format for the response. Valid values are JSON and XML. This will be ignored when providng an XPath query because results are returned as a string or JSON depending on the Mode specified.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the XPath input for this Choreo. 
        # 
        # @param String - (optional, string) An XPATH query to run.
        ###

        def set_XPath(value)
          set_input("XPath", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the InboxFeed Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class InboxFeedResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "FullCount" output from this Choreo execution
      	#
      	# @return String - (integer) The number of unread messages. This is parsed from the Google XML response. Note that when using the Label input to retrieve messages from a particular Gmail label, the full count element may be 0.
      	####
      	def get_FullCount()
      	  return @outputs["FullCount"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google. This will contain the data from the Gmail feed, or if the XPath input is provided, it will contain the result of the XPath query.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class InboxFeed



    ##############################################################################
    #
    # SendEmail
    #
    # Sends an email using a specified Gmail account.
    #
    ##############################################################################

    class SendEmail < Choreography

      ####
      #  Create a new instance of the SendEmail Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Gmail/SendEmail")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return SendEmailInputSet
      ####
      def new_input_set()
        return SendEmailInputSet.new()
      end

      def make_result_set()
        return SendEmailResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = SendEmailResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the SendEmail
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class SendEmailInputSet < Choreography::InputSet

        #### 
        # Set the value of the AttachmentName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the file to attach to the email.
        ###

        def set_AttachmentName(value)
          set_input("AttachmentName", value)
        end
        #### 
        # Set the value of the AttachmentURL input for this Choreo. 
        # 
        # @param String - (optional, string) URL of a hosted file that you wish to add as an attachment.  Use this instead of a normal Attachment.
        ###

        def set_AttachmentURL(value)
          set_input("AttachmentURL", value)
        end
        #### 
        # Set the value of the Attachment input for this Choreo. 
        # 
        # @param String - (optional, string) The Base64 encoded contents of the file to attach to the email.  Use this instead of AttachmentURL.
        ###

        def set_Attachment(value)
          set_input("Attachment", value)
        end
        #### 
        # Set the value of the BCC input for this Choreo. 
        # 
        # @param String - (optional, string) An email address to BCC on the email you're sending. Can be a comma separated list of email addresses.
        ###

        def set_BCC(value)
          set_input("BCC", value)
        end
        #### 
        # Set the value of the CC input for this Choreo. 
        # 
        # @param String - (optional, string) An email address to CC on the email you're sending. Can be a comma separated list of email addresses.
        ###

        def set_CC(value)
          set_input("CC", value)
        end
        #### 
        # Set the value of the FromAddress input for this Choreo. 
        # 
        # @param String - (conditional, string) The name and email address that the message is being sent from.
        ###

        def set_FromAddress(value)
          set_input("FromAddress", value)
        end
        #### 
        # Set the value of the MessageBody input for this Choreo. 
        # 
        # @param String - (required, string) The message body for the email.
        ###

        def set_MessageBody(value)
          set_input("MessageBody", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Gmail password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Subject input for this Choreo. 
        # 
        # @param String - (required, string) The subject line of the email.
        ###

        def set_Subject(value)
          set_input("Subject", value)
        end
        #### 
        # Set the value of the ToAddress input for this Choreo. 
        # 
        # @param String - (required, string) The email address that you want to send an email to. Can be a comma separated list of email addresses.
        ###

        def set_ToAddress(value)
          set_input("ToAddress", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the SendEmail Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class SendEmailResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Success" output from this Choreo execution
      	#
      	# @return String - (boolean) Indicates the result of the SMTP operation. The value will be "true" for a successful request.
      	####
      	def get_Success()
      	  return @outputs["Success"]
      	end
      end

    end # class SendEmail




    module Utils



      ##############################################################################
      #
      # GetAndDeleteEmail
      #
      # 
      #
      ##############################################################################

      class GetAndDeleteEmail < Choreography

        ####
        #  Create a new instance of the GetAndDeleteEmail Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Gmail/Utils/GetAndDeleteEmail")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetAndDeleteEmailInputSet
        ####
        def new_input_set()
          return GetAndDeleteEmailInputSet.new()
        end

        def make_result_set()
          return GetAndDeleteEmailResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetAndDeleteEmailResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetAndDeleteEmail
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetAndDeleteEmailInputSet < Choreography::InputSet

          #### 
          # Set the value of the Password input for this Choreo. 
          # 
          # @param String - (required, string) Your Gmail password.
          ###

          def set_Password(value)
            set_input("Password", value)
          end
          #### 
          # Set the value of the SenderAddressFilter input for this Choreo. 
          # 
          # @param String - (optional, string) A string used to filter by a particular sender address.
          ###

          def set_SenderAddressFilter(value)
            set_input("SenderAddressFilter", value)
          end
          #### 
          # Set the value of the SubjectFilter input for this Choreo. 
          # 
          # @param String - (optional, string) A string used to filter by subject.
          ###

          def set_SubjectFilter(value)
            set_input("SubjectFilter", value)
          end
          #### 
          # Set the value of the Username input for this Choreo. 
          # 
          # @param String - (required, string) Your Gmail username. Provide the complete email address used for logging into Gmail.
          ###

          def set_Username(value)
            set_input("Username", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetAndDeleteEmail Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetAndDeleteEmailResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "AttachmentFolder" output from this Choreo execution
        	#
        	# @return String - 
        	####
        	def get_AttachmentFolder()
        	  return @outputs["AttachmentFolder"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (xml) The response from Gmail including all details about the retrieved email in XML format.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class GetAndDeleteEmail



      ##############################################################################
      #
      # GetEmailNoDelete
      #
      # 
      #
      ##############################################################################

      class GetEmailNoDelete < Choreography

        ####
        #  Create a new instance of the GetEmailNoDelete Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Gmail/Utils/GetEmailNoDelete")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetEmailNoDeleteInputSet
        ####
        def new_input_set()
          return GetEmailNoDeleteInputSet.new()
        end

        def make_result_set()
          return GetEmailNoDeleteResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetEmailNoDeleteResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the GetEmailNoDelete
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetEmailNoDeleteInputSet < Choreography::InputSet

          #### 
          # Set the value of the Password input for this Choreo. 
          # 
          # @param String - (required, string) Your Gmail password.
          ###

          def set_Password(value)
            set_input("Password", value)
          end
          #### 
          # Set the value of the SenderAddressFilter input for this Choreo. 
          # 
          # @param String - (optional, string) A string used to filter by a particular sender address.
          ###

          def set_SenderAddressFilter(value)
            set_input("SenderAddressFilter", value)
          end
          #### 
          # Set the value of the SubjectFilter input for this Choreo. 
          # 
          # @param String - (optional, string) A string used to filter by subject.
          ###

          def set_SubjectFilter(value)
            set_input("SubjectFilter", value)
          end
          #### 
          # Set the value of the Username input for this Choreo. 
          # 
          # @param String - (required, string) Your Gmail username. Provide the complete email address used for logging into Gmail.
          ###

          def set_Username(value)
            set_input("Username", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the GetEmailNoDelete Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetEmailNoDeleteResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (xml) The response from Gmail including all details about the retrieved email in XML format.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "AttachmentFolder" output from this Choreo execution
        	#
        	# @return String - 
        	####
        	def get_AttachmentFolder()
        	  return @outputs["AttachmentFolder"]
        	end
        end

      end # class GetEmailNoDelete



      ##############################################################################
      #
      # RunXPathQuery
      #
      # Executes an XPath query against a specified XML file and returns the result in CSV or JSON format.
      #
      ##############################################################################

      class RunXPathQuery < Choreography

        ####
        #  Create a new instance of the RunXPathQuery Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Gmail/Utils/RunXPathQuery")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return RunXPathQueryInputSet
        ####
        def new_input_set()
          return RunXPathQueryInputSet.new()
        end

        def make_result_set()
          return RunXPathQueryResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = RunXPathQueryResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the RunXPathQuery
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class RunXPathQueryInputSet < Choreography::InputSet

          #### 
          # Set the value of the Mode input for this Choreo. 
          # 
          # @param String - (conditional, string) Valid values are "select" (the default) or "recursive". Recursive mode will iterate using the provided XPath. Select mode will return the first match if there are multiple rows in the XML provided.
          ###

          def set_Mode(value)
            set_input("Mode", value)
          end
          #### 
          # Set the value of the ResponseFormat input for this Choreo. 
          # 
          # @param String - (optional, string) The format that the response should be in. Valid values are: json or csv.
          ###

          def set_ResponseFormat(value)
            set_input("ResponseFormat", value)
          end
          #### 
          # Set the value of the XML input for this Choreo. 
          # 
          # @param String - (required, xml) The XML that contains the elements or attributes you want to retrieve.
          ###

          def set_XML(value)
            set_input("XML", value)
          end
          #### 
          # Set the value of the XPath input for this Choreo. 
          # 
          # @param String - (required, string) The XPath query to run.
          ###

          def set_XPath(value)
            set_input("XPath", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the RunXPathQuery Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class RunXPathQueryResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Result" output from this Choreo execution
        	#
        	# @return String - The XPath query result.
        	####
        	def get_Result()
        	  return @outputs["Result"]
        	end
        end

      end # class RunXPathQuery



      ##############################################################################
      #
      # ValidateEmail
      #
      # Verifies that a given email address matches an expected standard pattern.
      #
      ##############################################################################

      class ValidateEmail < Choreography

        ####
        #  Create a new instance of the ValidateEmail Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Gmail/Utils/ValidateEmail")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ValidateEmailInputSet
        ####
        def new_input_set()
          return ValidateEmailInputSet.new()
        end

        def make_result_set()
          return ValidateEmailResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ValidateEmailResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ValidateEmail
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ValidateEmailInputSet < Choreography::InputSet

          #### 
          # Set the value of the EmailAddress input for this Choreo. 
          # 
          # @param String - (required, string) The email address to validate.
          ###

          def set_EmailAddress(value)
            set_input("EmailAddress", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ValidateEmail Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ValidateEmailResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Match" output from this Choreo execution
        	#
        	# @return String - (string) Contains a string indicating the result of the match -- "valid" or "invalid".
        	####
        	def get_Match()
        	  return @outputs["Match"]
        	end
        end

      end # class ValidateEmail




    end # module Utils

  end # module Gmail

  module OAuth



    ##############################################################################
    #
    # FinalizeOAuth
    #
    # Completes the OAuth process by retrieving a Google access token for a user, after they have visited the authorization URL returned by the InitializeOAuth Choreo and clicked "allow."
    #
    ##############################################################################

    class FinalizeOAuth < Choreography

      ####
      #  Create a new instance of the FinalizeOAuth Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/OAuth/FinalizeOAuth")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return FinalizeOAuthInputSet
      ####
      def new_input_set()
        return FinalizeOAuthInputSet.new()
      end

      def make_result_set()
        return FinalizeOAuthResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = FinalizeOAuthResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the FinalizeOAuth
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class FinalizeOAuthInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccountName input for this Choreo. 
        # 
        # @param String - (optional, string) Deprecated (retained for backward compatibility only).
        ###

        def set_AccountName(value)
          set_input("AccountName", value)
        end
        #### 
        # Set the value of the AppKeyName input for this Choreo. 
        # 
        # @param String - (optional, string) Deprecated (retained for backward compatibility only).
        ###

        def set_AppKeyName(value)
          set_input("AppKeyName", value)
        end
        #### 
        # Set the value of the AppKeyValue input for this Choreo. 
        # 
        # @param String - (optional, string) Deprecated (retained for backward compatibility only).
        ###

        def set_AppKeyValue(value)
          set_input("AppKeyValue", value)
        end
        #### 
        # Set the value of the CallbackID input for this Choreo. 
        # 
        # @param String - (required, string) The callback token returned by the InitializeOAuth Choreo. Used to retrieve the authorization code after the user authorizes.
        ###

        def set_CallbackID(value)
          set_input("CallbackID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (required, string) The Client ID provided by Google after registering your application.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The Client Secret provided by Google after registering your application.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the Timeout input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The amount of time (in seconds) to poll your Temboo callback URL to see if your app's user has allowed or denied the request for access. Defaults to 20. Max is 60.
        ###

        def set_Timeout(value)
          set_input("Timeout", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the FinalizeOAuth Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class FinalizeOAuthResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "RefreshToken" output from this Choreo execution
      	#
      	# @return String - (string) A token that may be used to obtain a new access token when the short-lived access token expires.
      	####
      	def get_RefreshToken()
      	  return @outputs["RefreshToken"]
      	end
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (string) The access token for the user that has granted access to your application.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      	####
      	# Retrieve the value for the "Expires" output from this Choreo execution
      	#
      	# @return String - (integer) The remaining lifetime of the short-lived access token.
      	####
      	def get_Expires()
      	  return @outputs["Expires"]
      	end
      end

    end # class FinalizeOAuth



    ##############################################################################
    #
    # InitializeOAuth
    #
    # Generates an authorization URL that an application can use to complete the first step in the OAuth process.
    #
    ##############################################################################

    class InitializeOAuth < Choreography

      ####
      #  Create a new instance of the InitializeOAuth Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/OAuth/InitializeOAuth")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return InitializeOAuthInputSet
      ####
      def new_input_set()
        return InitializeOAuthInputSet.new()
      end

      def make_result_set()
        return InitializeOAuthResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = InitializeOAuthResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the InitializeOAuth
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class InitializeOAuthInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccountName input for this Choreo. 
        # 
        # @param String - (optional, string) Deprecated (retained for backward compatibility only).
        ###

        def set_AccountName(value)
          set_input("AccountName", value)
        end
        #### 
        # Set the value of the AppKeyName input for this Choreo. 
        # 
        # @param String - (optional, string) Deprecated (retained for backward compatibility only).
        ###

        def set_AppKeyName(value)
          set_input("AppKeyName", value)
        end
        #### 
        # Set the value of the AppKeyValue input for this Choreo. 
        # 
        # @param String - (optional, string) Deprecated (retained for backward compatibility only).
        ###

        def set_AppKeyValue(value)
          set_input("AppKeyValue", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (required, string) The Client ID provided by Google after registering your application.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the CustomCallbackID input for this Choreo. 
        # 
        # @param String - (optional, string) A unique identifier that you can pass to eliminate the need to wait for a Temboo generated CallbackID. Callback identifiers may only contain numbers, letters, periods, and hyphens.
        ###

        def set_CustomCallbackID(value)
          set_input("CustomCallbackID", value)
        end
        #### 
        # Set the value of the ForwardingURL input for this Choreo. 
        # 
        # @param String - (optional, string) The URL that Temboo will redirect your users to after they grant access to your application. This should include the "https://" or "http://" prefix and be a fully qualified URL.
        ###

        def set_ForwardingURL(value)
          set_input("ForwardingURL", value)
        end
        #### 
        # Set the value of the Scope input for this Choreo. 
        # 
        # @param String - (required, string) A space-delimited list of scopes to requests access for (e.g., https://www.googleapis.com/auth/drive).
        ###

        def set_Scope(value)
          set_input("Scope", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the InitializeOAuth Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class InitializeOAuthResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "CallbackID" output from this Choreo execution
      	#
      	# @return String - (string) An ID used to retrieve the callback data that Temboo stores once your application's user authorizes.
      	####
      	def get_CallbackID()
      	  return @outputs["CallbackID"]
      	end
      	####
      	# Retrieve the value for the "AuthorizationURL" output from this Choreo execution
      	#
      	# @return String - (string) The authorization URL that the application's user needs to go to in order to grant access to your application.
      	####
      	def get_AuthorizationURL()
      	  return @outputs["AuthorizationURL"]
      	end
      end

    end # class InitializeOAuth




  end # module OAuth

  module Picasa



    ##############################################################################
    #
    # AddCommentToPhoto
    #
    # Adds a comment to a specified photo in Google Picasa.
    #
    ##############################################################################

    class AddCommentToPhoto < Choreography

      ####
      #  Create a new instance of the AddCommentToPhoto Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/AddCommentToPhoto")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return AddCommentToPhotoInputSet
      ####
      def new_input_set()
        return AddCommentToPhotoInputSet.new()
      end

      def make_result_set()
        return AddCommentToPhotoResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = AddCommentToPhotoResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the AddCommentToPhoto
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class AddCommentToPhotoInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the AlbumID input for this Choreo. 
        # 
        # @param Integer - (required, integer) The id of the album which contains the photo you want to add a comment to.
        ###

        def set_AlbumID(value)
          set_input("AlbumID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the Comment input for this Choreo. 
        # 
        # @param String - (required, string) The comment that you want to add to a photo.
        ###

        def set_Comment(value)
          set_input("Comment", value)
        end
        #### 
        # Set the value of the PhotoID input for this Choreo. 
        # 
        # @param Integer - (required, integer) The id of the photo you want to add a comment to.
        ###

        def set_PhotoID(value)
          set_input("PhotoID", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to 'default' which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the AddCommentToPhoto Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class AddCommentToPhotoResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class AddCommentToPhoto



    ##############################################################################
    #
    # CreateAlbum
    #
    # Creates a photo album in a Google Picasa account.
    #
    ##############################################################################

    class CreateAlbum < Choreography

      ####
      #  Create a new instance of the CreateAlbum Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/CreateAlbum")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return CreateAlbumInputSet
      ####
      def new_input_set()
        return CreateAlbumInputSet.new()
      end

      def make_result_set()
        return CreateAlbumResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = CreateAlbumResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the CreateAlbum
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class CreateAlbumInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the Keywords input for this Choreo. 
        # 
        # @param String - (optional, string) Keywords to associate with the album you are creating separated by commas.
        ###

        def set_Keywords(value)
          set_input("Keywords", value)
        end
        #### 
        # Set the value of the PhotoAccess input for this Choreo. 
        # 
        # @param String - (optional, string) The perssion level to specify for photo access. Defaults to 'public'.
        ###

        def set_PhotoAccess(value)
          set_input("PhotoAccess", value)
        end
        #### 
        # Set the value of the PhotoLocation input for this Choreo. 
        # 
        # @param String - (optional, string) The location to associate with the photo (i.e. Italy).
        ###

        def set_PhotoLocation(value)
          set_input("PhotoLocation", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the Summary input for this Choreo. 
        # 
        # @param String - (optional, string) The album summary.
        ###

        def set_Summary(value)
          set_input("Summary", value)
        end
        #### 
        # Set the value of the Timestamp input for this Choreo. 
        # 
        # @param String - (optional, date) The timestamp to associate with the photo.  Defaults to the current timestamp. Should be an epoch timestamp in milliseconds.
        ###

        def set_Timestamp(value)
          set_input("Timestamp", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The title of the album.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to 'default' which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the CreateAlbum Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class CreateAlbumResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class CreateAlbum



    ##############################################################################
    #
    # DeleteAlbum
    #
    # Deletes an album in Google Picasa with a specified album Id.
    #
    ##############################################################################

    class DeleteAlbum < Choreography

      ####
      #  Create a new instance of the DeleteAlbum Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/DeleteAlbum")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DeleteAlbumInputSet
      ####
      def new_input_set()
        return DeleteAlbumInputSet.new()
      end

      def make_result_set()
        return DeleteAlbumResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DeleteAlbumResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DeleteAlbum
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DeleteAlbumInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the AlbumID input for this Choreo. 
        # 
        # @param Integer - (required, integer) The album id. Note that this can be retrieved by running the ListAlbums Choreo.
        ###

        def set_AlbumID(value)
          set_input("AlbumID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to 'default' which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DeleteAlbum Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DeleteAlbumResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class DeleteAlbum



    ##############################################################################
    #
    # DeleteTag
    #
    # Removes a tag from a specified photo in Google Picasa.
    #
    ##############################################################################

    class DeleteTag < Choreography

      ####
      #  Create a new instance of the DeleteTag Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/DeleteTag")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DeleteTagInputSet
      ####
      def new_input_set()
        return DeleteTagInputSet.new()
      end

      def make_result_set()
        return DeleteTagResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DeleteTagResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DeleteTag
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DeleteTagInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the AlbumId input for this Choreo. 
        # 
        # @param Integer - (required, integer) The id for the album which has the tagged photo. Note that this can be retrieved by running the ListAlbums Choreo.
        ###

        def set_AlbumId(value)
          set_input("AlbumId", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the PhotoID input for this Choreo. 
        # 
        # @param Integer - (required, integer) The id for the photo that has a tag to delete.
        ###

        def set_PhotoID(value)
          set_input("PhotoID", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the TagID input for this Choreo. 
        # 
        # @param String - (required, string) The Id (or tag name) for the tag that you want to delete.
        ###

        def set_TagID(value)
          set_input("TagID", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to 'default' which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DeleteTag Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DeleteTagResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class DeleteTag



    ##############################################################################
    #
    # ListAlbums
    #
    # List all albums created in a Google Picasa account.
    #
    ##############################################################################

    class ListAlbums < Choreography

      ####
      #  Create a new instance of the ListAlbums Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/ListAlbums")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return ListAlbumsInputSet
      ####
      def new_input_set()
        return ListAlbumsInputSet.new()
      end

      def make_result_set()
        return ListAlbumsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = ListAlbumsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the ListAlbums
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class ListAlbumsInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to 'default' which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the ListAlbums Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class ListAlbumsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class ListAlbums



    ##############################################################################
    #
    # ListPhotosByAlbum
    #
    # Lists all photos in a specified Google Picasa album.
    #
    ##############################################################################

    class ListPhotosByAlbum < Choreography

      ####
      #  Create a new instance of the ListPhotosByAlbum Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/ListPhotosByAlbum")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return ListPhotosByAlbumInputSet
      ####
      def new_input_set()
        return ListPhotosByAlbumInputSet.new()
      end

      def make_result_set()
        return ListPhotosByAlbumResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = ListPhotosByAlbumResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the ListPhotosByAlbum
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class ListPhotosByAlbumInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the AlbumID input for this Choreo. 
        # 
        # @param Integer - (required, integer) The album id. Note that this can be retrieved by running the ListAlbums Choreo.
        ###

        def set_AlbumID(value)
          set_input("AlbumID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to 'default' which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the ListPhotosByAlbum Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class ListPhotosByAlbumResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class ListPhotosByAlbum



    ##############################################################################
    #
    # PostPhoto
    #
    # Uploads a photo to Google Picasa.
    #
    ##############################################################################

    class PostPhoto < Choreography

      ####
      #  Create a new instance of the PostPhoto Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/PostPhoto")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return PostPhotoInputSet
      ####
      def new_input_set()
        return PostPhotoInputSet.new()
      end

      def make_result_set()
        return PostPhotoResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = PostPhotoResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the PostPhoto
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class PostPhotoInputSet < Choreography::InputSet

        #### 
        # Set the value of the FileContents input for this Choreo. 
        # 
        # @param String - (conditional, string) The base64 encoded file contents of the photo you want to upload.
        ###

        def set_FileContents(value)
          set_input("FileContents", value)
        end
        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the AlbumID input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The id of the album that you want to upload the photo to. Defaults to 'default' which means the photo will be uploaded to the dropbox album.
        ###

        def set_AlbumID(value)
          set_input("AlbumID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the ImageName input for this Choreo. 
        # 
        # @param String - (required, string) The name of the image you want to upload.
        ###

        def set_ImageName(value)
          set_input("ImageName", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to "default" which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end
        #### 
        # Set the value of the VaultFile input for this Choreo. 
        # 
        # @param TembooPath - (vault file) The path to the vault file you want to upload. Required unless using the FileContents input.
        ###

        def set_VaultFile(value)
          set_alias("VaultFile", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the PostPhoto Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class PostPhotoResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class PostPhoto



    ##############################################################################
    #
    # RefreshToken
    #
    # Retrieves a new access token when the provided access token is expired.
    #
    ##############################################################################

    class RefreshToken < Choreography

      ####
      #  Create a new instance of the RefreshToken Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/RefreshToken")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RefreshTokenInputSet
      ####
      def new_input_set()
        return RefreshTokenInputSet.new()
      end

      def make_result_set()
        return RefreshTokenResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RefreshTokenResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RefreshToken
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RefreshTokenInputSet < Choreography::InputSet

        #### 
        # Set the value of the ClientId input for this Choreo. 
        # 
        # @param String - (required, string) The client id provided by Google Pacasa when you sign up for an account
        ###

        def set_ClientId(value)
          set_input("ClientId", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The client secret provided by Google Picasa when you sign up for an account
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the Oauth process to be used when your access token expires
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RefreshToken Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RefreshTokenResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (string) The access token that is parsed from the request to refresh the token
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      end

    end # class RefreshToken



    ##############################################################################
    #
    # RetrieveComments
    #
    # Returns a feed of the photo comments for a specified user.
    #
    ##############################################################################

    class RetrieveComments < Choreography

      ####
      #  Create a new instance of the RetrieveComments Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/RetrieveComments")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveCommentsInputSet
      ####
      def new_input_set()
        return RetrieveCommentsInputSet.new()
      end

      def make_result_set()
        return RetrieveCommentsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveCommentsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveComments
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveCommentsInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the MaxResults input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The max number of comments to return. Defaults to 10.
        ###

        def set_MaxResults(value)
          set_input("MaxResults", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to 'default' which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveComments Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveCommentsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class RetrieveComments



    ##############################################################################
    #
    # RetrieveTagsByUser
    #
    # Returns a feed of the photo tags for a specified user.
    #
    ##############################################################################

    class RetrieveTagsByUser < Choreography

      ####
      #  Create a new instance of the RetrieveTagsByUser Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/RetrieveTagsByUser")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveTagsByUserInputSet
      ####
      def new_input_set()
        return RetrieveTagsByUserInputSet.new()
      end

      def make_result_set()
        return RetrieveTagsByUserResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveTagsByUserResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveTagsByUser
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveTagsByUserInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to 'default' which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveTagsByUser Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveTagsByUserResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      end

    end # class RetrieveTagsByUser



    ##############################################################################
    #
    # SearchPhotosByTag
    #
    # Searches photos using tags that you specify.
    #
    ##############################################################################

    class SearchPhotosByTag < Choreography

      ####
      #  Create a new instance of the SearchPhotosByTag Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/SearchPhotosByTag")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return SearchPhotosByTagInputSet
      ####
      def new_input_set()
        return SearchPhotosByTagInputSet.new()
      end

      def make_result_set()
        return SearchPhotosByTagResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = SearchPhotosByTagResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the SearchPhotosByTag
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class SearchPhotosByTagInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the Tag input for this Choreo. 
        # 
        # @param String - (required, string) A photo tag to search by. Multiple tags can be separated by commas.
        ###

        def set_Tag(value)
          set_input("Tag", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to 'default' which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the SearchPhotosByTag Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class SearchPhotosByTagResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class SearchPhotosByTag



    ##############################################################################
    #
    # TagPhoto
    #
    # Creates a tag for a specified photo in Google Picasa.
    #
    ##############################################################################

    class TagPhoto < Choreography

      ####
      #  Create a new instance of the TagPhoto Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Picasa/TagPhoto")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return TagPhotoInputSet
      ####
      def new_input_set()
        return TagPhotoInputSet.new()
      end

      def make_result_set()
        return TagPhotoResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = TagPhotoResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the TagPhoto
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class TagPhotoInputSet < Choreography::InputSet

        #### 
        # Set the value of the AccessToken input for this Choreo. 
        # 
        # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
        ###

        def set_AccessToken(value)
          set_input("AccessToken", value)
        end
        #### 
        # Set the value of the AlbumID input for this Choreo. 
        # 
        # @param Integer - (required, integer) The id of the album which contains the photo you want to tag.
        ###

        def set_AlbumID(value)
          set_input("AlbumID", value)
        end
        #### 
        # Set the value of the ClientID input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientID(value)
          set_input("ClientID", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the PhotoID input for this Choreo. 
        # 
        # @param Integer - (required, integer) The id of the photo you want to tag.
        ###

        def set_PhotoID(value)
          set_input("PhotoID", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end
        #### 
        # Set the value of the Tag input for this Choreo. 
        # 
        # @param String - (required, string) The text for the photo tag.
        ###

        def set_Tag(value)
          set_input("Tag", value)
        end
        #### 
        # Set the value of the UserID input for this Choreo. 
        # 
        # @param String - (optional, string) Google Picasa username. Defaults to "default" which means the server will use the UserID of the user whose access token was specified.
        ###

        def set_UserID(value)
          set_input("UserID", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the TagPhoto Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class TagPhotoResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
      	#
      	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
      	####
      	def get_NewAccessToken()
      	  return @outputs["NewAccessToken"]
      	end
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google Picasa.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class TagPhoto




  end # module Picasa

  module Places



    ##############################################################################
    #
    # DeletePlace
    #
    # Delete a new Place from Google Places.
    #
    ##############################################################################

    class DeletePlace < Choreography

      ####
      #  Create a new instance of the DeletePlace Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Places/DeletePlace")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DeletePlaceInputSet
      ####
      def new_input_set()
        return DeletePlaceInputSet.new()
      end

      def make_result_set()
        return DeletePlaceResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DeletePlaceResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DeletePlace
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DeletePlaceInputSet < Choreography::InputSet

        #### 
        # Set the value of the Key input for this Choreo. 
        # 
        # @param String - (required, string) Enter your Google API key.
        ###

        def set_Key(value)
          set_input("Key", value)
        end
        #### 
        # Set the value of the PlaceReference input for this Choreo. 
        # 
        # @param String - (required, string) The unique place reference. This is returned in the PlaceSearch Choreo.
        ###

        def set_PlaceReference(value)
          set_input("PlaceReference", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DeletePlace Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DeletePlaceResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class DeletePlace



    ##############################################################################
    #
    # PlaceCheckInRequests
    #
    # Specify whether a user has checked into a place.
    #
    ##############################################################################

    class PlaceCheckInRequests < Choreography

      ####
      #  Create a new instance of the PlaceCheckInRequests Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Places/PlaceCheckInRequests")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return PlaceCheckInRequestsInputSet
      ####
      def new_input_set()
        return PlaceCheckInRequestsInputSet.new()
      end

      def make_result_set()
        return PlaceCheckInRequestsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = PlaceCheckInRequestsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the PlaceCheckInRequests
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class PlaceCheckInRequestsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Key input for this Choreo. 
        # 
        # @param String - (required, string) Enter your Google API key.
        ###

        def set_Key(value)
          set_input("Key", value)
        end
        #### 
        # Set the value of the PlaceReference input for this Choreo. 
        # 
        # @param String - (required, string) The unique place reference. This is returned in the PlaceSearch Choreo.
        ###

        def set_PlaceReference(value)
          set_input("PlaceReference", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the PlaceCheckInRequests Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class PlaceCheckInRequestsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class PlaceCheckInRequests



    ##############################################################################
    #
    # PlaceDetails
    #
    # Retrieve detailed information about places retrieved by the PlaceSearch Choreo.
    #
    ##############################################################################

    class PlaceDetails < Choreography

      ####
      #  Create a new instance of the PlaceDetails Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Places/PlaceDetails")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return PlaceDetailsInputSet
      ####
      def new_input_set()
        return PlaceDetailsInputSet.new()
      end

      def make_result_set()
        return PlaceDetailsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = PlaceDetailsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the PlaceDetails
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class PlaceDetailsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Key input for this Choreo. 
        # 
        # @param String - (required, string) Enter your Google API key.
        ###

        def set_Key(value)
          set_input("Key", value)
        end
        #### 
        # Set the value of the Language input for this Choreo. 
        # 
        # @param String - (optional, string) Set the language in which to return restults.  A list of supported languages is available here: https://spreadsheets.google.com/pub?key=p9pdwsai2hDMsLkXsoM05KQ&gid=1
        ###

        def set_Language(value)
          set_input("Language", value)
        end
        #### 
        # Set the value of the Reference input for this Choreo. 
        # 
        # @param String - (required, string) Enter a textual identifier that uniquely identidies a place obtained from the PlaceSearch Choreo.
        ###

        def set_Reference(value)
          set_input("Reference", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the PlaceDetails Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class PlaceDetailsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class PlaceDetails



    ##############################################################################
    #
    # PlaceSearch
    #
    # Search for places based on latitude/longitude coordinates, keywords, and distance.
    #
    ##############################################################################

    class PlaceSearch < Choreography

      ####
      #  Create a new instance of the PlaceSearch Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Places/PlaceSearch")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return PlaceSearchInputSet
      ####
      def new_input_set()
        return PlaceSearchInputSet.new()
      end

      def make_result_set()
        return PlaceSearchResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = PlaceSearchResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the PlaceSearch
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class PlaceSearchInputSet < Choreography::InputSet

        #### 
        # Set the value of the Key input for this Choreo. 
        # 
        # @param String - (required, string) Enter your Google API key.
        ###

        def set_Key(value)
          set_input("Key", value)
        end
        #### 
        # Set the value of the Keyword input for this Choreo. 
        # 
        # @param String - (optional, string) Enter a keyword (term, address, type, customer review, etc.) to be matched against all results retrieved for this Place.
        ###

        def set_Keyword(value)
          set_input("Keyword", value)
        end
        #### 
        # Set the value of the Language input for this Choreo. 
        # 
        # @param String - (optional, string) Set the language in which to return restults.  A list of supported languages is available here: https://spreadsheets.google.com/pub?key=p9pdwsai2hDMsLkXsoM05KQ&gid=1
        ###

        def set_Language(value)
          set_input("Language", value)
        end
        #### 
        # Set the value of the Latitude input for this Choreo. 
        # 
        # @param String - (required, string) Specify a latitude point around which Places results will be retrieved.
        ###

        def set_Latitude(value)
          set_input("Latitude", value)
        end
        #### 
        # Set the value of the Longitude input for this Choreo. 
        # 
        # @param String - (required, string) Specify a longitude point around which Places results will be retrieved.
        ###

        def set_Longitude(value)
          set_input("Longitude", value)
        end
        #### 
        # Set the value of the Name input for this Choreo. 
        # 
        # @param String - (optional, string) Enter a name to be matched when results are retrieved for this specified Place.
        ###

        def set_Name(value)
          set_input("Name", value)
        end
        #### 
        # Set the value of the Radius input for this Choreo. 
        # 
        # @param Integer - (optional, integer) Specify the radius in meters, for which Places results will be returned. Maximum radius is limited to 50,000 meters. If rankby=distance, then radius must not be specified.
        ###

        def set_Radius(value)
          set_input("Radius", value)
        end
        #### 
        # Set the value of the RankBy input for this Choreo. 
        # 
        # @param String - (optional, string) Specify how results are listed. Values include: prominence (default); distance - sorts results by distance from specified location. Radius must not be used, and Keyword, Name, or Types are required).
        ###

        def set_RankBy(value)
          set_input("RankBy", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end
        #### 
        # Set the value of the Types input for this Choreo. 
        # 
        # @param String - (optional, string) Filter results by types, such as: bar, dentist.  Multiple types must be separated by the pipe ("|") symbol: bar|dentist||airport.
        ###

        def set_Types(value)
          set_input("Types", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the PlaceSearch Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class PlaceSearchResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class PlaceSearch



    ##############################################################################
    #
    # UserPlaceReports
    #
    # Add a new Place to Google Places.
    #
    ##############################################################################

    class UserPlaceReports < Choreography

      ####
      #  Create a new instance of the UserPlaceReports Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Places/UserPlaceReports")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return UserPlaceReportsInputSet
      ####
      def new_input_set()
        return UserPlaceReportsInputSet.new()
      end

      def make_result_set()
        return UserPlaceReportsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = UserPlaceReportsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the UserPlaceReports
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class UserPlaceReportsInputSet < Choreography::InputSet

        #### 
        # Set the value of the POSTForm input for this Choreo. 
        # 
        # @param String - (required, any) Enter the required POST parameter, reference in the body of this JSON form.
        ###

        def set_POSTForm(value)
          set_input("POSTForm", value)
        end
        #### 
        # Set the value of the Key input for this Choreo. 
        # 
        # @param String - (required, string) Enter your Google API key.
        ###

        def set_Key(value)
          set_input("Key", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that response should be in. Can be set to xml or json. Defaults to json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Sensor input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Indicates whether or not the directions request is from a device with a location sensor. Value must be either 1 or 0. Defaults to 0 (false).
        ###

        def set_Sensor(value)
          set_input("Sensor", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the UserPlaceReports Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class UserPlaceReportsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (xml) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class UserPlaceReports




  end # module Places

  module Plus




    module Activities



      ##############################################################################
      #
      # Get
      #
      # Retrieves a given activity.
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Plus/Activities/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ActivityID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the activity to get.
          ###

          def set_ActivityID(value)
            set_input("ActivityID", value)
          end
          #### 
          # Set the value of the Callback input for this Choreo. 
          # 
          # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
          ###

          def set_Callback(value)
            set_input("Callback", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the PrettyPrint input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) A flag used to pretty print the json response to make it more readable. Defaults to "true".
          ###

          def set_PrettyPrint(value)
            set_input("PrettyPrint", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the UserIP input for this Choreo. 
          # 
          # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
          ###

          def set_UserIP(value)
            set_input("UserIP", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # List
      #
      #  Returns a list of all activities in the specified collection for a particular user.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Plus/Activities/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the Callback input for this Choreo. 
          # 
          # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
          ###

          def set_Callback(value)
            set_input("Callback", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Collection input for this Choreo. 
          # 
          # @param String - (required, string) The collection of activities to list. Defaults to "public".
          ###

          def set_Collection(value)
            set_input("Collection", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of people to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the PrettyPrint input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) A flag used to pretty print the json response to make it more readable. Defaults to "true".
          ###

          def set_PrettyPrint(value)
            set_input("PrettyPrint", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the UserID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the person to get the profile for. The value "me" is set as the default to indicate the authenticated user.
          ###

          def set_UserID(value)
            set_input("UserID", value)
          end
          #### 
          # Set the value of the UserIP input for this Choreo. 
          # 
          # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
          ###

          def set_UserIP(value)
            set_input("UserIP", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class List



      ##############################################################################
      #
      # Search
      #
      # Searches all public activities.
      #
      ##############################################################################

      class Search < Choreography

        ####
        #  Create a new instance of the Search Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Plus/Activities/Search")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return SearchInputSet
        ####
        def new_input_set()
          return SearchInputSet.new()
        end

        def make_result_set()
          return SearchResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = SearchResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Search
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class SearchInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the Callback input for this Choreo. 
          # 
          # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
          ###

          def set_Callback(value)
            set_input("Callback", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Language input for this Choreo. 
          # 
          # @param String - (optional, string) Indicates the preferred language to search with. Defaults to "en-US".
          ###

          def set_Language(value)
            set_input("Language", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of people to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the OrderBy input for this Choreo. 
          # 
          # @param String - (optional, string) Specifies how to order search results. Valid values are: "best" (Sort activities by relevance to the user) or "recent" (Sort activities by published date). Default is "recent".
          ###

          def set_OrderBy(value)
            set_input("OrderBy", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the PrettyPrint input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) A flag used to pretty print the json response to make it more readable. Defaults to "true".
          ###

          def set_PrettyPrint(value)
            set_input("PrettyPrint", value)
          end
          #### 
          # Set the value of the Query input for this Choreo. 
          # 
          # @param String - (required, string) Full-text search query string.
          ###

          def set_Query(value)
            set_input("Query", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the UserIP input for this Choreo. 
          # 
          # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
          ###

          def set_UserIP(value)
            set_input("UserIP", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Search Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class SearchResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Search




    end # module Activities

    module Comments



      ##############################################################################
      #
      # Get
      #
      # Retrieves a given comment.
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Plus/Comments/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the Callback input for this Choreo. 
          # 
          # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
          ###

          def set_Callback(value)
            set_input("Callback", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the CommentID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the comment to get.
          ###

          def set_CommentID(value)
            set_input("CommentID", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the PrettyPrint input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) A flag used to pretty print the json response to make it more readable. Defaults to "true".
          ###

          def set_PrettyPrint(value)
            set_input("PrettyPrint", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the UserIP input for this Choreo. 
          # 
          # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
          ###

          def set_UserIP(value)
            set_input("UserIP", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # List
      #
      # Retrieves a list all of the comments for a given activity.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Plus/Comments/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ActivityID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the activity to get.
          ###

          def set_ActivityID(value)
            set_input("ActivityID", value)
          end
          #### 
          # Set the value of the Callback input for this Choreo. 
          # 
          # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
          ###

          def set_Callback(value)
            set_input("Callback", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of people to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the PrettyPrint input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) A flag used to pretty print the json response to make it more readable. Defaults to "true".
          ###

          def set_PrettyPrint(value)
            set_input("PrettyPrint", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the SortOrder input for this Choreo. 
          # 
          # @param String - (optional, string) The order in which to sort the list of comments. Valid values are: "ascending" (Sort oldest comments first, the default) and "descending" (Sort newest comments first).
          ###

          def set_SortOrder(value)
            set_input("SortOrder", value)
          end
          #### 
          # Set the value of the UserIP input for this Choreo. 
          # 
          # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
          ###

          def set_UserIP(value)
            set_input("UserIP", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class List




    end # module Comments

    module Domains




      module Activities



        ##############################################################################
        #
        # Get
        #
        # Retrieves a specific activity.
        #
        ##############################################################################

        class Get < Choreography

          ####
          #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Activities/Get")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return GetInputSet
          ####
          def new_input_set()
            return GetInputSet.new()
          end

          def make_result_set()
            return GetResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = GetResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the Get
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class GetInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the ActivityID input for this Choreo. 
            # 
            # @param String - (required, string) The ID of the activity to get.
            ###

            def set_ActivityID(value)
              set_input("ActivityID", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the Get Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class GetResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          end

        end # class Get



        ##############################################################################
        #
        # Insert
        #
        # Inserts a new activity into a user's stream.
        #
        ##############################################################################

        class Insert < Choreography

          ####
          #  Create a new instance of the Insert Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Activities/Insert")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return InsertInputSet
          ####
          def new_input_set()
            return InsertInputSet.new()
          end

          def make_result_set()
            return InsertResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = InsertResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the Insert
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class InsertInputSet < Choreography::InputSet

            #### 
            # Set the value of the ActivityResource input for this Choreo. 
            # 
            # @param String - (optional, string) A JSON-formatted string containing the activity properties you wish to set. This can be used as an alternative to setting individual inputs representing resource properties.
            ###

            def set_ActivityResource(value)
              set_input("ActivityResource", value)
            end
            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Content input for this Choreo. 
            # 
            # @param String - (required, string) Content to post to your stream.
            ###

            def set_Content(value)
              set_input("Content", value)
            end
            #### 
            # Set the value of the Description input for this Choreo. 
            # 
            # @param String - (optional, string) A description for the new activity being created.
            ###

            def set_Description(value)
              set_input("Description", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the Preview input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) If "true", extract the potential media attachments for a URL. The response will include all possible attachments for a URL, including video, photos, and articles based on the content of the page.
            ###

            def set_Preview(value)
              set_input("Preview", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the ShareWithDomain input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) Set to 1 to share this activity with the entire Domain.
            ###

            def set_ShareWithDomain(value)
              set_input("ShareWithDomain", value)
            end
            #### 
            # Set the value of the ShareWithExtendedCircles input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) Set to 1 to share this activity your circles plus all the people in their circles.
            ###

            def set_ShareWithExtendedCircles(value)
              set_input("ShareWithExtendedCircles", value)
            end
            #### 
            # Set the value of the ShareWithMyCircles input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) Set to 1 to share this activity with everyone in your Circles.
            ###

            def set_ShareWithMyCircles(value)
              set_input("ShareWithMyCircles", value)
            end
            #### 
            # Set the value of the ShareWithPublic input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) Set to 1 to share this activity with everyone on the web.
            ###

            def set_ShareWithPublic(value)
              set_input("ShareWithPublic", value)
            end
            #### 
            # Set the value of the ShareWithTheseCircles input for this Choreo. 
            # 
            # @param String - (optional, string) Comma-seperated list of up to 10 IDs of the circles you want to share this activity with.
            ###

            def set_ShareWithTheseCircles(value)
              set_input("ShareWithTheseCircles", value)
            end
            #### 
            # Set the value of the ShareWithThesePeople input for this Choreo. 
            # 
            # @param String - (optional, string) Comma-seperated list of up to 10 IDs of persons you want to share this activity with.
            ###

            def set_ShareWithThesePeople(value)
              set_input("ShareWithThesePeople", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to create a circle for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the Insert Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class InsertResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class Insert



        ##############################################################################
        #
        # List
        #
        # Lists all of the activities in the specified collection for a particular user.
        #
        ##############################################################################

        class List < Choreography

          ####
          #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Activities/List")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return ListInputSet
          ####
          def new_input_set()
            return ListInputSet.new()
          end

          def make_result_set()
            return ListResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = ListResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the List
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class ListInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Collection input for this Choreo. 
            # 
            # @param String - (required, string) The collection of activities to list.  Valid values are: "user". Defaults to "user".
            ###

            def set_Collection(value)
              set_input("Collection", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the MaxResults input for this Choreo. 
            # 
            # @param Integer - (optional, integer) The maximum number of circles to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
            ###

            def set_MaxResults(value)
              set_input("MaxResults", value)
            end
            #### 
            # Set the value of the OrderBy input for this Choreo. 
            # 
            # @param String - (optional, string) The order to return results in. Valid values are: alphabetical and best.
            ###

            def set_OrderBy(value)
              set_input("OrderBy", value)
            end
            #### 
            # Set the value of the PageToken input for this Choreo. 
            # 
            # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
            ###

            def set_PageToken(value)
              set_input("PageToken", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to get circles for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the List Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class ListResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class List




      end # module Activities

      module Audiences



        ##############################################################################
        #
        # List
        #
        # Lists all of the audiences with which a user can share.
        #
        ##############################################################################

        class List < Choreography

          ####
          #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Audiences/List")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return ListInputSet
          ####
          def new_input_set()
            return ListInputSet.new()
          end

          def make_result_set()
            return ListResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = ListResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the List
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class ListInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the MaxResults input for this Choreo. 
            # 
            # @param Integer - (optional, integer) The maximum number of circles to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
            ###

            def set_MaxResults(value)
              set_input("MaxResults", value)
            end
            #### 
            # Set the value of the OrderBy input for this Choreo. 
            # 
            # @param String - (optional, string) The order to return results in. Valid values are: alphabetical and best.
            ###

            def set_OrderBy(value)
              set_input("OrderBy", value)
            end
            #### 
            # Set the value of the PageToken input for this Choreo. 
            # 
            # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
            ###

            def set_PageToken(value)
              set_input("PageToken", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to get circles for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the List Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class ListResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          end

        end # class List




      end # module Audiences

      module Circles



        ##############################################################################
        #
        # AddPeople
        #
        # Adds people to a circle.
        #
        ##############################################################################

        class AddPeople < Choreography

          ####
          #  Create a new instance of the AddPeople Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Circles/AddPeople")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return AddPeopleInputSet
          ####
          def new_input_set()
            return AddPeopleInputSet.new()
          end

          def make_result_set()
            return AddPeopleResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = AddPeopleResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the AddPeople
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class AddPeopleInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the CircleID input for this Choreo. 
            # 
            # @param String - (conditional, string) The ID of the circle to update.
            ###

            def set_CircleID(value)
              set_input("CircleID", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Email input for this Choreo. 
            # 
            # @param String - (conditional, string) Comma-seperated list of up to 10 email addresses to add. Required unless providing a value for UserID.
            ###

            def set_Email(value)
              set_input("Email", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (conditional, string) Comma-seperated list of up to 10 User IDs to add. Required unless providing a value for Email.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the AddPeople Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class AddPeopleResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          end

        end # class AddPeople



        ##############################################################################
        #
        # Delete
        #
        # Deletes the specified circle.
        #
        ##############################################################################

        class Delete < Choreography

          ####
          #  Create a new instance of the Delete Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Circles/Delete")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return DeleteInputSet
          ####
          def new_input_set()
            return DeleteInputSet.new()
          end

          def make_result_set()
            return DeleteResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = DeleteResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the Delete
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class DeleteInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the CircleID input for this Choreo. 
            # 
            # @param String - (required, string) The ID of the circle to delete
            ###

            def set_CircleID(value)
              set_input("CircleID", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the Delete Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class DeleteResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "ResponseStatusCode" output from this Choreo execution
          	#
          	# @return String - (integer) The response status code returned from Google.
          	####
          	def get_ResponseStatusCode()
          	  return @outputs["ResponseStatusCode"]
          	end
          end

        end # class Delete



        ##############################################################################
        #
        # Get
        #
        # Retrieves a specific circle.
        #
        ##############################################################################

        class Get < Choreography

          ####
          #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Circles/Get")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return GetInputSet
          ####
          def new_input_set()
            return GetInputSet.new()
          end

          def make_result_set()
            return GetResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = GetResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the Get
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class GetInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the CircleID input for this Choreo. 
            # 
            # @param String - (required, string) The ID of the circle to get.
            ###

            def set_CircleID(value)
              set_input("CircleID", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the Get Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class GetResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          end

        end # class Get



        ##############################################################################
        #
        # Insert
        #
        # Creates a new circle for the authenticated user.
        #
        ##############################################################################

        class Insert < Choreography

          ####
          #  Create a new instance of the Insert Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Circles/Insert")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return InsertInputSet
          ####
          def new_input_set()
            return InsertInputSet.new()
          end

          def make_result_set()
            return InsertResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = InsertResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the Insert
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class InsertInputSet < Choreography::InputSet

            #### 
            # Set the value of the CircleResource input for this Choreo. 
            # 
            # @param String - (optional, string) A JSON-formatted string containing the circle properties you wish to set. This can be used as an alternative to setting individual inputs representing resource properties.
            ###

            def set_CircleResource(value)
              set_input("CircleResource", value)
            end
            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Description input for this Choreo. 
            # 
            # @param String - (optional, string) A description for the new circle being created.
            ###

            def set_Description(value)
              set_input("Description", value)
            end
            #### 
            # Set the value of the DisplayName input for this Choreo. 
            # 
            # @param String - (required, string) The circle name.
            ###

            def set_DisplayName(value)
              set_input("DisplayName", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to create a circle for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the Insert Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class InsertResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class Insert



        ##############################################################################
        #
        # List
        #
        # Lists a user's circles.
        #
        ##############################################################################

        class List < Choreography

          ####
          #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Circles/List")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return ListInputSet
          ####
          def new_input_set()
            return ListInputSet.new()
          end

          def make_result_set()
            return ListResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = ListResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the List
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class ListInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the MaxResults input for this Choreo. 
            # 
            # @param Integer - (optional, integer) The maximum number of circles to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
            ###

            def set_MaxResults(value)
              set_input("MaxResults", value)
            end
            #### 
            # Set the value of the OrderBy input for this Choreo. 
            # 
            # @param String - (optional, string) The order to return results in. Valid values are: alphabetical and best.
            ###

            def set_OrderBy(value)
              set_input("OrderBy", value)
            end
            #### 
            # Set the value of the PageToken input for this Choreo. 
            # 
            # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
            ###

            def set_PageToken(value)
              set_input("PageToken", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to get circles for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the List Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class ListResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class List



        ##############################################################################
        #
        # RemovePeople
        #
        # Removes a person from a circle.
        #
        ##############################################################################

        class RemovePeople < Choreography

          ####
          #  Create a new instance of the RemovePeople Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Circles/RemovePeople")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return RemovePeopleInputSet
          ####
          def new_input_set()
            return RemovePeopleInputSet.new()
          end

          def make_result_set()
            return RemovePeopleResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = RemovePeopleResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the RemovePeople
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class RemovePeopleInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the CircleID input for this Choreo. 
            # 
            # @param String - (conditional, string) The ID of the circle to update.
            ###

            def set_CircleID(value)
              set_input("CircleID", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Email input for this Choreo. 
            # 
            # @param String - (conditional, string) Comma-seperated list of up to 10 email addresses of users to remove. Required unless providing a value for UserID.
            ###

            def set_Email(value)
              set_input("Email", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (conditional, string) Comma-seperated list of up to 10 User IDs to remove. Required unless providing a value for Email.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the RemovePeople Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class RemovePeopleResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "ResponseStatusCode" output from this Choreo execution
          	#
          	# @return String - (integer) The response status code returned from Google.
          	####
          	def get_ResponseStatusCode()
          	  return @outputs["ResponseStatusCode"]
          	end
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class RemovePeople



        ##############################################################################
        #
        # Update
        #
        # Updates a specified circle.
        #
        ##############################################################################

        class Update < Choreography

          ####
          #  Create a new instance of the Update Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Circles/Update")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return UpdateInputSet
          ####
          def new_input_set()
            return UpdateInputSet.new()
          end

          def make_result_set()
            return UpdateResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = UpdateResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the Update
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class UpdateInputSet < Choreography::InputSet

            #### 
            # Set the value of the CircleResource input for this Choreo. 
            # 
            # @param String - (optional, string) A JSON-formatted string containing the circle properties you wish to set. This can be used as an alternative to setting individual inputs representing resource properties.
            ###

            def set_CircleResource(value)
              set_input("CircleResource", value)
            end
            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the CircleID input for this Choreo. 
            # 
            # @param String - (conditional, string) The ID of the circle to update.
            ###

            def set_CircleID(value)
              set_input("CircleID", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Description input for this Choreo. 
            # 
            # @param String - (optional, string) A description for the new circle being created.
            ###

            def set_Description(value)
              set_input("Description", value)
            end
            #### 
            # Set the value of the DisplayName input for this Choreo. 
            # 
            # @param String - (required, string) The circle name.
            ###

            def set_DisplayName(value)
              set_input("DisplayName", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to create a circle for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the Update Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class UpdateResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class Update




      end # module Circles

      module Comments



        ##############################################################################
        #
        # Get
        #
        # Retrieves the specified comment.
        #
        ##############################################################################

        class Get < Choreography

          ####
          #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Comments/Get")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return GetInputSet
          ####
          def new_input_set()
            return GetInputSet.new()
          end

          def make_result_set()
            return GetResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = GetResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the Get
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class GetInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the CommentID input for this Choreo. 
            # 
            # @param String - (required, string) The ID of the comment to get.
            ###

            def set_CommentID(value)
              set_input("CommentID", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the Get Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class GetResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          end

        end # class Get



        ##############################################################################
        #
        # Insert
        #
        # Creates a new comment in reply to an activity.
        #
        ##############################################################################

        class Insert < Choreography

          ####
          #  Create a new instance of the Insert Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Comments/Insert")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return InsertInputSet
          ####
          def new_input_set()
            return InsertInputSet.new()
          end

          def make_result_set()
            return InsertResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = InsertResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the Insert
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class InsertInputSet < Choreography::InputSet

            #### 
            # Set the value of the CommentResource input for this Choreo. 
            # 
            # @param String - (optional, string) A JSON-formatted string containing the comment properties you wish to set. This can be used as an alternative to setting individual inputs representing resource properties.
            ###

            def set_CommentResource(value)
              set_input("CommentResource", value)
            end
            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the ActivityID input for this Choreo. 
            # 
            # @param String - (required, string) The ID of the activity to reply to.
            ###

            def set_ActivityID(value)
              set_input("ActivityID", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Content input for this Choreo. 
            # 
            # @param String - (required, string) The comment text.
            ###

            def set_Content(value)
              set_input("Content", value)
            end
            #### 
            # Set the value of the Description input for this Choreo. 
            # 
            # @param String - (optional, string) A description for the new circle being created.
            ###

            def set_Description(value)
              set_input("Description", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to create a circle for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the Insert Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class InsertResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class Insert



        ##############################################################################
        #
        # List
        #
        # Lists all of the comments for an activity.
        #
        ##############################################################################

        class List < Choreography

          ####
          #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Comments/List")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return ListInputSet
          ####
          def new_input_set()
            return ListInputSet.new()
          end

          def make_result_set()
            return ListResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = ListResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the List
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class ListInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the ActivityID input for this Choreo. 
            # 
            # @param String - (required, string) ID of the activity to retrieve comments for.
            ###

            def set_ActivityID(value)
              set_input("ActivityID", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the MaxResults input for this Choreo. 
            # 
            # @param Integer - (optional, integer) The maximum number of circles to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
            ###

            def set_MaxResults(value)
              set_input("MaxResults", value)
            end
            #### 
            # Set the value of the OrderBy input for this Choreo. 
            # 
            # @param String - (optional, string) The order to return results in. Valid values are: alphabetical and best.
            ###

            def set_OrderBy(value)
              set_input("OrderBy", value)
            end
            #### 
            # Set the value of the PageToken input for this Choreo. 
            # 
            # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
            ###

            def set_PageToken(value)
              set_input("PageToken", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to get circles for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the List Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class ListResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class List




      end # module Comments

      module Media



        ##############################################################################
        #
        # Insert
        #
        # Adds a new media item to an album. 
        #
        ##############################################################################

        class Insert < Choreography

          ####
          #  Create a new instance of the Insert Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/Media/Insert")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return InsertInputSet
          ####
          def new_input_set()
            return InsertInputSet.new()
          end

          def make_result_set()
            return InsertResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = InsertResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the Insert
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class InsertInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth2 process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Collection input for this Choreo. 
            # 
            # @param String - (optional, string) Currently the acceptable values are "cloud".  (Upload the media to share on Google+).
            ###

            def set_Collection(value)
              set_input("Collection", value)
            end
            #### 
            # Set the value of the ContentType input for this Choreo. 
            # 
            # @param String - (conditional, string) The Content-Type of the file that is being uploaded (i.e. image/jpg). Required when specifying the FileContent input.
            ###

            def set_ContentType(value)
              set_input("ContentType", value)
            end
            #### 
            # Set the value of the DisplayName input for this Choreo. 
            # 
            # @param String - (optional, string) The display name for the media. If this parameter is not provided, Google assigns a GUID to the media resource.
            ###

            def set_DisplayName(value)
              set_input("DisplayName", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Selector specifying a subset of fields to include in the response.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the FileContent input for this Choreo. 
            # 
            # @param String - (conditional, string) The Base64 encoded contents of the file to upload.
            ###

            def set_FileContent(value)
              set_input("FileContent", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth refresh token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to create the activity on behalf of.  The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the VaultFile input for this Choreo. 
            # 
            # @param TembooPath - A path to a vault file to upload. This can be used as an alternative to the FileContent input.
            ###

            def set_VaultFile(value)
              set_alias("VaultFile", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the Insert Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class InsertResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class Insert




      end # module Media

      module People



        ##############################################################################
        #
        # Get
        #
        # Retrieves a person's profile.
        #
        ##############################################################################

        class Get < Choreography

          ####
          #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/People/Get")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return GetInputSet
          ####
          def new_input_set()
            return GetInputSet.new()
          end

          def make_result_set()
            return GetResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = GetResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the Get
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class GetInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (required, string) The ID of the user to get. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the Get Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class GetResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class Get



        ##############################################################################
        #
        # List
        #
        # Lists all of the people in the specified collection.
        #
        ##############################################################################

        class List < Choreography

          ####
          #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/People/List")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return ListInputSet
          ####
          def new_input_set()
            return ListInputSet.new()
          end

          def make_result_set()
            return ListResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = ListResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the List
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class ListInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Collection input for this Choreo. 
            # 
            # @param String - (required, string) The collection to list people for. Currently the only allowed value for this parameter is: "circled".
            ###

            def set_Collection(value)
              set_input("Collection", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the MaxResults input for this Choreo. 
            # 
            # @param Integer - (optional, integer) The maximum number of circles to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
            ###

            def set_MaxResults(value)
              set_input("MaxResults", value)
            end
            #### 
            # Set the value of the OrderBy input for this Choreo. 
            # 
            # @param String - (optional, string) The order to return results in. Valid values are: alphabetical and best.
            ###

            def set_OrderBy(value)
              set_input("OrderBy", value)
            end
            #### 
            # Set the value of the PageToken input for this Choreo. 
            # 
            # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
            ###

            def set_PageToken(value)
              set_input("PageToken", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to get circles for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the List Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class ListResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class List



        ##############################################################################
        #
        # ListByActivity
        #
        # Lists all of the people in the specified collection for a particular activity.
        #
        ##############################################################################

        class ListByActivity < Choreography

          ####
          #  Create a new instance of the ListByActivity Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/People/ListByActivity")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return ListByActivityInputSet
          ####
          def new_input_set()
            return ListByActivityInputSet.new()
          end

          def make_result_set()
            return ListByActivityResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = ListByActivityResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the ListByActivity
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class ListByActivityInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the ActivityID input for this Choreo. 
            # 
            # @param String - (conditional, string) The ID of the activity to get the list of people for.
            ###

            def set_ActivityID(value)
              set_input("ActivityID", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Collection input for this Choreo. 
            # 
            # @param String - (required, string) The collection of people to list.  Acceptable values are: "plusoners","resharers", "sharedto":
            ###

            def set_Collection(value)
              set_input("Collection", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the MaxResults input for this Choreo. 
            # 
            # @param Integer - (optional, integer) The maximum number of circles to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
            ###

            def set_MaxResults(value)
              set_input("MaxResults", value)
            end
            #### 
            # Set the value of the OrderBy input for this Choreo. 
            # 
            # @param String - (optional, string) The order to return results in. Valid values are: alphabetical and best.
            ###

            def set_OrderBy(value)
              set_input("OrderBy", value)
            end
            #### 
            # Set the value of the PageToken input for this Choreo. 
            # 
            # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
            ###

            def set_PageToken(value)
              set_input("PageToken", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to get circles for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the ListByActivity Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class ListByActivityResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          end

        end # class ListByActivity



        ##############################################################################
        #
        # ListByCircle
        #
        # Lists all of the people who are members of a circle.
        #
        ##############################################################################

        class ListByCircle < Choreography

          ####
          #  Create a new instance of the ListByCircle Choreo. A TembooSession object, containing a valid
          #  set of Temboo credentials, must be supplied.
          ####
          def initialize(session)
            super(session, "/Library/Google/Plus/Domains/People/ListByCircle")
          end

          #### 
          # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
          #
          # @return ListByCircleInputSet
          ####
          def new_input_set()
            return ListByCircleInputSet.new()
          end

          def make_result_set()
            return ListByCircleResultSet.new()
          end

          ####
          # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
          # and return a ResultSet containing the execution results.
          # @param choreoInputs
          # @return
          # @throws TembooException
          ####
          def execute(input_set = nil)
            resp = super(input_set)
            results = ListByCircleResultSet.new(resp)
            return results
          end

          ####
          # An InputSet with methods appropriate for specifying the inputs to the ListByCircle
          # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
          ####
          class ListByCircleInputSet < Choreography::InputSet

            #### 
            # Set the value of the AccessToken input for this Choreo. 
            # 
            # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
            ###

            def set_AccessToken(value)
              set_input("AccessToken", value)
            end
            #### 
            # Set the value of the Callback input for this Choreo. 
            # 
            # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
            ###

            def set_Callback(value)
              set_input("Callback", value)
            end
            #### 
            # Set the value of the CircleID input for this Choreo. 
            # 
            # @param String - (required, string) ID of the Circle to list people by.
            ###

            def set_CircleID(value)
              set_input("CircleID", value)
            end
            #### 
            # Set the value of the ClientID input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientID(value)
              set_input("ClientID", value)
            end
            #### 
            # Set the value of the ClientSecret input for this Choreo. 
            # 
            # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
            ###

            def set_ClientSecret(value)
              set_input("ClientSecret", value)
            end
            #### 
            # Set the value of the Fields input for this Choreo. 
            # 
            # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
            ###

            def set_Fields(value)
              set_input("Fields", value)
            end
            #### 
            # Set the value of the MaxResults input for this Choreo. 
            # 
            # @param Integer - (optional, integer) The maximum number of circles to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
            ###

            def set_MaxResults(value)
              set_input("MaxResults", value)
            end
            #### 
            # Set the value of the OrderBy input for this Choreo. 
            # 
            # @param String - (optional, string) The order to return results in. Valid values are: alphabetical and best.
            ###

            def set_OrderBy(value)
              set_input("OrderBy", value)
            end
            #### 
            # Set the value of the PageToken input for this Choreo. 
            # 
            # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
            ###

            def set_PageToken(value)
              set_input("PageToken", value)
            end
            #### 
            # Set the value of the PrettyPrint input for this Choreo. 
            # 
            # @param Boolean - (optional, boolean) A flag used to pretty print the JSON response to make it more readable. Defaults to "true".
            ###

            def set_PrettyPrint(value)
              set_input("PrettyPrint", value)
            end
            #### 
            # Set the value of the RefreshToken input for this Choreo. 
            # 
            # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
            ###

            def set_RefreshToken(value)
              set_input("RefreshToken", value)
            end
            #### 
            # Set the value of the UserID input for this Choreo. 
            # 
            # @param String - (optional, string) The ID of the user to get circles for. The value "me" is set as the default to indicate the authenticated user.
            ###

            def set_UserID(value)
              set_input("UserID", value)
            end
            #### 
            # Set the value of the UserIP input for this Choreo. 
            # 
            # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
            ###

            def set_UserIP(value)
              set_input("UserIP", value)
            end

          end

          ####
          # A ResultSet with methods tailored to the values returned by the ListByCircle Choreo.
          # The ResultSet object is used to retrieve the results of a Choreo execution.
          ####
          class ListByCircleResultSet < Choreography::ResultSet
          	####
          	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
          	#
          	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
          	####
          	def get_NewAccessToken()
          	  return @outputs["NewAccessToken"]
          	end
          	####
          	# Retrieve the value for the "Response" output from this Choreo execution
          	#
          	# @return String - (json) The response from Google.
          	####
          	def get_Response()
          	  return @outputs["Response"]
          	end
          end

        end # class ListByCircle




      end # module People
      ##############################################################################
      #
      # RefreshToken
      #
      # Retrieves a new access token when the provided access token is expired.
      #
      ##############################################################################

      class RefreshToken < Choreography

        ####
        #  Create a new instance of the RefreshToken Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Plus/Domains/RefreshToken")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return RefreshTokenInputSet
        ####
        def new_input_set()
          return RefreshTokenInputSet.new()
        end

        def make_result_set()
          return RefreshTokenResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = RefreshTokenResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the RefreshToken
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class RefreshTokenInputSet < Choreography::InputSet

          #### 
          # Set the value of the ClientIdD input for this Choreo. 
          # 
          # @param String - (required, string) The client ID provided by Google when you sign up for an account.
          ###

          def set_ClientIdD(value)
            set_input("ClientIdD", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (required, string) The client secret provided by Google when you sign up for an account.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (required, string) The refresh token retrieved in the OAuth process to be used when your access token expires.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the RefreshToken Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class RefreshTokenResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "AccessToken" output from this Choreo execution
        	#
        	# @return String - (string) The access token that is parsed from the request to refresh the token.
        	####
        	def get_AccessToken()
        	  return @outputs["AccessToken"]
        	end
        end

      end # class RefreshToken




    end # module Domains

    module People



      ##############################################################################
      #
      # Get
      #
      # Retrieves a person's profile.
      #
      ##############################################################################

      class Get < Choreography

        ####
        #  Create a new instance of the Get Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Plus/People/Get")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return GetInputSet
        ####
        def new_input_set()
          return GetInputSet.new()
        end

        def make_result_set()
          return GetResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = GetResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Get
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class GetInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the Callback input for this Choreo. 
          # 
          # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
          ###

          def set_Callback(value)
            set_input("Callback", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the PrettyPrint input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) A flag used to pretty print the json response to make it more readable. Defaults to "true".
          ###

          def set_PrettyPrint(value)
            set_input("PrettyPrint", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the UserID input for this Choreo. 
          # 
          # @param String - (optional, string) The ID of the person to get the profile for. The value "me" is set as the default to indicate the authenticated user.
          ###

          def set_UserID(value)
            set_input("UserID", value)
          end
          #### 
          # Set the value of the UserIP input for this Choreo. 
          # 
          # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
          ###

          def set_UserIP(value)
            set_input("UserIP", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Get Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class GetResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class Get



      ##############################################################################
      #
      # List
      #
      # Returns all of the people who the authenticated user has added to one or more circles.
      #
      ##############################################################################

      class List < Choreography

        ####
        #  Create a new instance of the List Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Plus/People/List")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListInputSet
        ####
        def new_input_set()
          return ListInputSet.new()
        end

        def make_result_set()
          return ListResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the List
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the Callback input for this Choreo. 
          # 
          # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
          ###

          def set_Callback(value)
            set_input("Callback", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of people to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the OrderBy input for this Choreo. 
          # 
          # @param String - (optional, string) The order to return people in. Valid values are: alphabetical and best.
          ###

          def set_OrderBy(value)
            set_input("OrderBy", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the PrettyPrint input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) A flag used to pretty print the json response to make it more readable. Defaults to "true".
          ###

          def set_PrettyPrint(value)
            set_input("PrettyPrint", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the UserID input for this Choreo. 
          # 
          # @param String - (optional, string) The ID of the person to get the collection of people for. The value "me" is set as the default to indicate the authenticated user.
          ###

          def set_UserID(value)
            set_input("UserID", value)
          end
          #### 
          # Set the value of the UserIP input for this Choreo. 
          # 
          # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
          ###

          def set_UserIP(value)
            set_input("UserIP", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the List Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class List



      ##############################################################################
      #
      # ListByActivity
      #
      #  Returns all of the people in the specified collection for a particular activity.
      #
      ##############################################################################

      class ListByActivity < Choreography

        ####
        #  Create a new instance of the ListByActivity Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Plus/People/ListByActivity")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return ListByActivityInputSet
        ####
        def new_input_set()
          return ListByActivityInputSet.new()
        end

        def make_result_set()
          return ListByActivityResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = ListByActivityResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the ListByActivity
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class ListByActivityInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the ActivityID input for this Choreo. 
          # 
          # @param String - (required, string) The ID of the activity to get the list of people for. ActiviyIDs can be retrieved by running the Google.Plus.Activities.Search Choreo.
          ###

          def set_ActivityID(value)
            set_input("ActivityID", value)
          end
          #### 
          # Set the value of the Callback input for this Choreo. 
          # 
          # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
          ###

          def set_Callback(value)
            set_input("Callback", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Collection input for this Choreo. 
          # 
          # @param String - (required, string) Valid values are: "plusoners" (lists all people who have +1'd this activity) and "resharers" (lists all people who have reshared this activity).
          ###

          def set_Collection(value)
            set_input("Collection", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of people to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the PrettyPrint input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) A flag used to pretty print the json response to make it more readable. Defaults to "true".
          ###

          def set_PrettyPrint(value)
            set_input("PrettyPrint", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the UserIP input for this Choreo. 
          # 
          # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
          ###

          def set_UserIP(value)
            set_input("UserIP", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the ListByActivity Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class ListByActivityResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        end

      end # class ListByActivity



      ##############################################################################
      #
      # Search
      #
      # Searches all public profiles.
      #
      ##############################################################################

      class Search < Choreography

        ####
        #  Create a new instance of the Search Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Plus/People/Search")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return SearchInputSet
        ####
        def new_input_set()
          return SearchInputSet.new()
        end

        def make_result_set()
          return SearchResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = SearchResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the Search
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class SearchInputSet < Choreography::InputSet

          #### 
          # Set the value of the AccessToken input for this Choreo. 
          # 
          # @param String - (optional, string) A valid access token retrieved during the OAuth process. This is required unless you provide the ClientID, ClientSecret, and RefreshToken to generate a new access token.
          ###

          def set_AccessToken(value)
            set_input("AccessToken", value)
          end
          #### 
          # Set the value of the Callback input for this Choreo. 
          # 
          # @param String - (optional, string) Specifies a JavaScript function that will be passed the response data for using the API with JSONP.
          ###

          def set_Callback(value)
            set_input("Callback", value)
          end
          #### 
          # Set the value of the ClientID input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client ID provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientID(value)
            set_input("ClientID", value)
          end
          #### 
          # Set the value of the ClientSecret input for this Choreo. 
          # 
          # @param String - (conditional, string) The Client Secret provided by Google. Required unless providing a valid AccessToken.
          ###

          def set_ClientSecret(value)
            set_input("ClientSecret", value)
          end
          #### 
          # Set the value of the Fields input for this Choreo. 
          # 
          # @param String - (optional, string) Used to specify fields to include in a partial response. This can be used to reduce the amount of data returned. See documentation for syntax rules.
          ###

          def set_Fields(value)
            set_input("Fields", value)
          end
          #### 
          # Set the value of the Language input for this Choreo. 
          # 
          # @param String - (optional, string) Indicates the preferred language to search with. Defaults to "en-US".
          ###

          def set_Language(value)
            set_input("Language", value)
          end
          #### 
          # Set the value of the MaxResults input for this Choreo. 
          # 
          # @param Integer - (optional, integer) The maximum number of people to include in the response. Used for paging through results. Valid values are: 1 to 20. Default is 10.
          ###

          def set_MaxResults(value)
            set_input("MaxResults", value)
          end
          #### 
          # Set the value of the PageToken input for this Choreo. 
          # 
          # @param String - (optional, string) The "NextPageToken" returned in the Choreo output. Used to page through large result sets.
          ###

          def set_PageToken(value)
            set_input("PageToken", value)
          end
          #### 
          # Set the value of the PrettyPrint input for this Choreo. 
          # 
          # @param Boolean - (optional, boolean) A flag used to pretty print the json response to make it more readable. Defaults to "true".
          ###

          def set_PrettyPrint(value)
            set_input("PrettyPrint", value)
          end
          #### 
          # Set the value of the Query input for this Choreo. 
          # 
          # @param String - (required, string) A query string for full text search of public text in all profiles.
          ###

          def set_Query(value)
            set_input("Query", value)
          end
          #### 
          # Set the value of the RefreshToken input for this Choreo. 
          # 
          # @param String - (conditional, string) An OAuth Refresh Token used to generate a new access token when the original token is expired. Required unless providing a valid AccessToken.
          ###

          def set_RefreshToken(value)
            set_input("RefreshToken", value)
          end
          #### 
          # Set the value of the UserIP input for this Choreo. 
          # 
          # @param String - (optional, string) Identifies the IP address of the end user for whom the API call is being made. Used to enforce per-user quotas.
          ###

          def set_UserIP(value)
            set_input("UserIP", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the Search Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class SearchResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Response" output from this Choreo execution
        	#
        	# @return String - (json) The response from Google.
        	####
        	def get_Response()
        	  return @outputs["Response"]
        	end
        	####
        	# Retrieve the value for the "NewAccessToken" output from this Choreo execution
        	#
        	# @return String - (string) Contains a new AccessToken when the RefreshToken is provided.
        	####
        	def get_NewAccessToken()
        	  return @outputs["NewAccessToken"]
        	end
        end

      end # class Search




    end # module People
    ##############################################################################
    #
    # RefreshToken
    #
    # Retrieves a new access token when the provided access token is expired.
    #
    ##############################################################################

    class RefreshToken < Choreography

      ####
      #  Create a new instance of the RefreshToken Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Plus/RefreshToken")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RefreshTokenInputSet
      ####
      def new_input_set()
        return RefreshTokenInputSet.new()
      end

      def make_result_set()
        return RefreshTokenResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RefreshTokenResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RefreshToken
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RefreshTokenInputSet < Choreography::InputSet

        #### 
        # Set the value of the ClientIdD input for this Choreo. 
        # 
        # @param String - (required, string) The client ID provided by Google when you sign up for an account.
        ###

        def set_ClientIdD(value)
          set_input("ClientIdD", value)
        end
        #### 
        # Set the value of the ClientSecret input for this Choreo. 
        # 
        # @param String - (required, string) The client secret provided by Google when you sign up for an account.
        ###

        def set_ClientSecret(value)
          set_input("ClientSecret", value)
        end
        #### 
        # Set the value of the RefreshToken input for this Choreo. 
        # 
        # @param String - (required, string) The refresh token retrieved in the OAuth process to be used when your access token expires.
        ###

        def set_RefreshToken(value)
          set_input("RefreshToken", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RefreshToken Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RefreshTokenResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AccessToken" output from this Choreo execution
      	#
      	# @return String - (string) The access token that is parsed from the request to refresh the token.
      	####
      	def get_AccessToken()
      	  return @outputs["AccessToken"]
      	end
      end

    end # class RefreshToken




  end # module Plus

  module Spreadsheets



    ##############################################################################
    #
    # AddListRows
    #
    # Adds one or more rows to a worksheet in a Google spreadsheet using a simple XML file you provide.
    #
    ##############################################################################

    class AddListRows < Choreography

      ####
      #  Create a new instance of the AddListRows Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/AddListRows")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return AddListRowsInputSet
      ####
      def new_input_set()
        return AddListRowsInputSet.new()
      end

      def make_result_set()
        return AddListRowsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = AddListRowsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the AddListRows
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class AddListRowsInputSet < Choreography::InputSet

        #### 
        # Set the value of the RowsetXML input for this Choreo. 
        # 
        # @param String - (required, xml) The rows of data that you want to add to a worksheet in XML format. Your XML needs to be in the rowset/row schema described in the Choreo documentation.
        ###

        def set_RowsetXML(value)
          set_input("RowsetXML", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key of the spreadsheet that contains the worksheet you want to add rows to.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID of the worksheet that you want to add rows to.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the AddListRows Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class AddListRowsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class AddListRows



    ##############################################################################
    #
    # AddWorksheet
    #
    # Creates a new worksheet within an existing spreadsheet.
    #
    ##############################################################################

    class AddWorksheet < Choreography

      ####
      #  Create a new instance of the AddWorksheet Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/AddWorksheet")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return AddWorksheetInputSet
      ####
      def new_input_set()
        return AddWorksheetInputSet.new()
      end

      def make_result_set()
        return AddWorksheetResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = AddWorksheetResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the AddWorksheet
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class AddWorksheetInputSet < Choreography::InputSet

        #### 
        # Set the value of the ColumnCount input for this Choreo. 
        # 
        # @param Integer - (required, integer) The number of columns that you want to specify for the new worksheet.
        ###

        def set_ColumnCount(value)
          set_input("ColumnCount", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the RowCount input for this Choreo. 
        # 
        # @param Integer - (required, integer) The number of rows that you want to specify for the new worksheet.
        ###

        def set_RowCount(value)
          set_input("RowCount", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key associated with the spreadsheet that you want to add a worksheet to.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The title of the new worksheet.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the AddWorksheet Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class AddWorksheetResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class AddWorksheet



    ##############################################################################
    #
    # AppendRow
    #
    # Appends a simple comma-separated row of data to a given Google Spreadsheet.
    #
    ##############################################################################

    class AppendRow < Choreography

      ####
      #  Create a new instance of the AppendRow Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/AppendRow")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return AppendRowInputSet
      ####
      def new_input_set()
        return AppendRowInputSet.new()
      end

      def make_result_set()
        return AppendRowResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = AppendRowResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the AppendRow
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class AppendRowInputSet < Choreography::InputSet

        #### 
        # Set the value of the RowData input for this Choreo. 
        # 
        # @param String - (required, string) A comma separated list of items to be added as a new row to the spreadsheet.
        ###

        def set_RowData(value)
          set_input("RowData", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the SheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the sheet to write to. If not specified, rows are written to the first sheet.
        ###

        def set_SheetName(value)
          set_input("SheetName", value)
        end
        #### 
        # Set the value of the SpreadsheetTitle input for this Choreo. 
        # 
        # @param String - (required, string) The title of the spreadsheet that you want to write rows to.
        ###

        def set_SpreadsheetTitle(value)
          set_input("SpreadsheetTitle", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the AppendRow Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class AppendRowResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (string) Returns the string "success" if no error occurs.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class AppendRow



    ##############################################################################
    #
    # CellRangeQuery
    #
    # Retrieves a range of cells from a specified Google worksheet.
    #
    ##############################################################################

    class CellRangeQuery < Choreography

      ####
      #  Create a new instance of the CellRangeQuery Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/CellRangeQuery")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return CellRangeQueryInputSet
      ####
      def new_input_set()
        return CellRangeQueryInputSet.new()
      end

      def make_result_set()
        return CellRangeQueryResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = CellRangeQueryResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the CellRangeQuery
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class CellRangeQueryInputSet < Choreography::InputSet

        #### 
        # Set the value of the MaxColumn input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The maximum column number for the cell range that you want to retrieve.
        ###

        def set_MaxColumn(value)
          set_input("MaxColumn", value)
        end
        #### 
        # Set the value of the MaxRow input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The maximum row number for the cell range that you want to retrieve.
        ###

        def set_MaxRow(value)
          set_input("MaxRow", value)
        end
        #### 
        # Set the value of the MinColumn input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The minimum column number for the cell range you want to retrieve.
        ###

        def set_MinColumn(value)
          set_input("MinColumn", value)
        end
        #### 
        # Set the value of the MinRow input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The minimum row number for the cell range you want to retrieve.
        ###

        def set_MinRow(value)
          set_input("MinRow", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key of the spreadsheet associated with the cells you want to retrieve.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your Google username.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID of the worksheet associated with the cells you want to retrieve.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the CellRangeQuery Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class CellRangeQueryResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class CellRangeQuery



    ##############################################################################
    #
    # ClientLoginAuthentication
    #
    # Request an authorization token for Google Documents.
    #
    ##############################################################################

    class ClientLoginAuthentication < Choreography

      ####
      #  Create a new instance of the ClientLoginAuthentication Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/ClientLoginAuthentication")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return ClientLoginAuthenticationInputSet
      ####
      def new_input_set()
        return ClientLoginAuthenticationInputSet.new()
      end

      def make_result_set()
        return ClientLoginAuthenticationResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = ClientLoginAuthenticationResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the ClientLoginAuthentication
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class ClientLoginAuthenticationInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Service input for this Choreo. 
        # 
        # @param String - (required, string) The service that you are requesting an authorization token for. Defaults to 'wise' for Spreadsheets API.
        ###

        def set_Service(value)
          set_input("Service", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the ClientLoginAuthentication Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class ClientLoginAuthenticationResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AuthorizationKey" output from this Choreo execution
      	#
      	# @return String - (string) The auth token parsed from the Google login response
      	####
      	def get_AuthorizationKey()
      	  return @outputs["AuthorizationKey"]
      	end
      end

    end # class ClientLoginAuthentication



    ##############################################################################
    #
    # ClientLoginAuthenticationForDocuments
    #
    # Request an authorization token for Google Documents.
    #
    ##############################################################################

    class ClientLoginAuthenticationForDocuments < Choreography

      ####
      #  Create a new instance of the ClientLoginAuthenticationForDocuments Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/ClientLoginAuthenticationForDocuments")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return ClientLoginAuthenticationForDocumentsInputSet
      ####
      def new_input_set()
        return ClientLoginAuthenticationForDocumentsInputSet.new()
      end

      def make_result_set()
        return ClientLoginAuthenticationForDocumentsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = ClientLoginAuthenticationForDocumentsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the ClientLoginAuthenticationForDocuments
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class ClientLoginAuthenticationForDocumentsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, string) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your Google email address.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the ClientLoginAuthenticationForDocuments Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class ClientLoginAuthenticationForDocumentsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "AuthorizationKey" output from this Choreo execution
      	#
      	# @return String - (string) The authorization token parsed from the Google login response.
      	####
      	def get_AuthorizationKey()
      	  return @outputs["AuthorizationKey"]
      	end
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (string) Stores the response from Google login.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class ClientLoginAuthenticationForDocuments



    ##############################################################################
    #
    # CreateSpreadsheet
    #
    # Creates a Google spreadsheet from a CSV file.
    #
    ##############################################################################

    class CreateSpreadsheet < Choreography

      ####
      #  Create a new instance of the CreateSpreadsheet Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/CreateSpreadsheet")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return CreateSpreadsheetInputSet
      ####
      def new_input_set()
        return CreateSpreadsheetInputSet.new()
      end

      def make_result_set()
        return CreateSpreadsheetResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = CreateSpreadsheetResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the CreateSpreadsheet
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class CreateSpreadsheetInputSet < Choreography::InputSet

        #### 
        # Set the value of the UploadFile input for this Choreo. 
        # 
        # @param String - (conditional, multiline) The data to be written to the Google spreadsheet. Should be in CSV format.
        ###

        def set_UploadFile(value)
          set_input("UploadFile", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The name of the new document.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the VaultCSVFile input for this Choreo. 
        # 
        # @param TembooPath - (optional, vault file) The path to a CSV file stored in the vault. This is required unless you are using the UploadFile input variable. 
        ###

        def set_VaultCSVFile(value)
          set_alias("VaultCSVFile", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the CreateSpreadsheet Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class CreateSpreadsheetResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - Response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class CreateSpreadsheet



    ##############################################################################
    #
    # DeleteListRow
    #
    # Deletes a specified worksheet row from a Google spreadsheet.
    #
    ##############################################################################

    class DeleteListRow < Choreography

      ####
      #  Create a new instance of the DeleteListRow Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/DeleteListRow")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DeleteListRowInputSet
      ####
      def new_input_set()
        return DeleteListRowInputSet.new()
      end

      def make_result_set()
        return DeleteListRowResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DeleteListRowResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DeleteListRow
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DeleteListRowInputSet < Choreography::InputSet

        #### 
        # Set the value of the EditLink input for this Choreo. 
        # 
        # @param String - (optional, string) Deprecated (retained for backward compatibility only).
        ###

        def set_EditLink(value)
          set_input("EditLink", value)
        end
        #### 
        # Set the value of the Link input for this Choreo. 
        # 
        # @param String - (optional, string) The entry's resource URL found in the link element of the entry. Can be retrieved by running RetrieveListFeed Choreo. When this is provided, SpreadsheetKey, WorksheetId, and RowId are not needed.
        ###

        def set_Link(value)
          set_input("Link", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the RowId input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique ID of the row you want to delete. Required unless providing the Link input.
        ###

        def set_RowId(value)
          set_input("RowId", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique key of the spreadsheet associated with the row you want to delete. Required unless providing the Link input.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique ID of the worksheet associated with the row you want to delete. Required unless providing the Link input.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DeleteListRow Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DeleteListRowResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class DeleteListRow



    ##############################################################################
    #
    # DeleteWorksheet
    #
    # Deletes a specified worksheet from an existing spreadsheet.
    #
    ##############################################################################

    class DeleteWorksheet < Choreography

      ####
      #  Create a new instance of the DeleteWorksheet Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/DeleteWorksheet")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DeleteWorksheetInputSet
      ####
      def new_input_set()
        return DeleteWorksheetInputSet.new()
      end

      def make_result_set()
        return DeleteWorksheetResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DeleteWorksheetResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DeleteWorksheet
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DeleteWorksheetInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key associated with the spreadsheet that contains a worksheet you want to delete.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID associated with the worksheet that you want to delete.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DeleteWorksheet Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DeleteWorksheetResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class DeleteWorksheet



    ##############################################################################
    #
    # DownloadBase64EncodedSpreadsheet
    #
    # Downloads a document with the title you specify, and returns the content as Base64 encoded data.
    #
    ##############################################################################

    class DownloadBase64EncodedSpreadsheet < Choreography

      ####
      #  Create a new instance of the DownloadBase64EncodedSpreadsheet Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/DownloadBase64EncodedSpreadsheet")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return DownloadBase64EncodedSpreadsheetInputSet
      ####
      def new_input_set()
        return DownloadBase64EncodedSpreadsheetInputSet.new()
      end

      def make_result_set()
        return DownloadBase64EncodedSpreadsheetResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = DownloadBase64EncodedSpreadsheetResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the DownloadBase64EncodedSpreadsheet
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class DownloadBase64EncodedSpreadsheetInputSet < Choreography::InputSet

        #### 
        # Set the value of the Format input for this Choreo. 
        # 
        # @param String - (optional, string) The format you want to export the spreadsheet to, such as "txt" or "pdf". The default download format is "txt".
        ###

        def set_Format(value)
          set_input("Format", value)
        end
        #### 
        # Set the value of the Link input for this Choreo. 
        # 
        # @param String - (optional, string) The entry's resource URL found in the link element of the entry. Required if Title is not specified.
        ###

        def set_Link(value)
          set_input("Link", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google account password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (conditional, string) The title of the document to download. Required if the source Link is not specifed.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the DownloadBase64EncodedSpreadsheet Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class DownloadBase64EncodedSpreadsheetResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "FileContents" output from this Choreo execution
      	#
      	# @return String - (string) The Base64 encoded file content of the downloaded file.
      	####
      	def get_FileContents()
      	  return @outputs["FileContents"]
      	end
      end

    end # class DownloadBase64EncodedSpreadsheet



    ##############################################################################
    #
    # RetrieveCellFeed
    #
    # Retrieves a list of cell names and values in a specified Google worksheet.
    #
    ##############################################################################

    class RetrieveCellFeed < Choreography

      ####
      #  Create a new instance of the RetrieveCellFeed Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveCellFeed")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveCellFeedInputSet
      ####
      def new_input_set()
        return RetrieveCellFeedInputSet.new()
      end

      def make_result_set()
        return RetrieveCellFeedResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveCellFeedResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveCellFeed
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveCellFeedInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key of the spreadsheet associated with the cells you want to retrieve.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID of the worksheet associated with the cells you want to retrieve.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveCellFeed Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveCellFeedResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class RetrieveCellFeed



    ##############################################################################
    #
    # RetrieveCellList
    #
    # Retrieves a list of cell values using the specified cell locations.
    #
    ##############################################################################

    class RetrieveCellList < Choreography

      ####
      #  Create a new instance of the RetrieveCellList Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveCellList")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveCellListInputSet
      ####
      def new_input_set()
        return RetrieveCellListInputSet.new()
      end

      def make_result_set()
        return RetrieveCellListResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveCellListResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveCellList
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveCellListInputSet < Choreography::InputSet

        #### 
        # Set the value of the CellLocations input for this Choreo. 
        # 
        # @param String - (required, string) A comma-separated list of cell locations to retrieve (e.g. A2,B4,C3).
        ###

        def set_CellLocations(value)
          set_input("CellLocations", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique key of the spreadsheet associated with the cells you want to retrieve. Required unless SpreadsheetName and WorksheetName are supplied.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the SpreadsheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the spreadsheet containing the cells to retrieve. This and WorksheetName can be used as an alternative to SpreadsheetKey and WorksheetId to lookup spreadsheet details by name.
        ###

        def set_SpreadsheetName(value)
          set_input("SpreadsheetName", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique ID of the worksheet associated with the cells you want to retrieve. Required unless SpreadsheetName and WorksheetName are supplied.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end
        #### 
        # Set the value of the WorksheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the worksheet containing the cells to retrieve. This and SpreadsheetName can be used as an alternative to SpreadsheetKey and WorksheetId to lookup the spreadsheet details by name.
        ###

        def set_WorksheetName(value)
          set_input("WorksheetName", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveCellList Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveCellListResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "CellValues" output from this Choreo execution
      	#
      	# @return String - (json) 
      	####
      	def get_CellValues()
      	  return @outputs["CellValues"]
      	end
      end

    end # class RetrieveCellList



    ##############################################################################
    #
    # RetrieveCellValue
    #
    # Retrieves the value of given cell.
    #
    ##############################################################################

    class RetrieveCellValue < Choreography

      ####
      #  Create a new instance of the RetrieveCellValue Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveCellValue")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveCellValueInputSet
      ####
      def new_input_set()
        return RetrieveCellValueInputSet.new()
      end

      def make_result_set()
        return RetrieveCellValueResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveCellValueResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveCellValue
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveCellValueInputSet < Choreography::InputSet

        #### 
        # Set the value of the CellLocation input for this Choreo. 
        # 
        # @param String - (required, string) The location of the cell that should be retrieved (e.g. A2).
        ###

        def set_CellLocation(value)
          set_input("CellLocation", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique key of the spreadsheet associated with the cell you want to retrieve. Required unless SpreadsheetName and WorksheetName are supplied.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the SpreadsheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the spreadsheet containing the cell to retrieve. This and WorksheetName can be used as an alternative to SpreadsheetKey and WorksheetId to lookup spreadsheet details by name.
        ###

        def set_SpreadsheetName(value)
          set_input("SpreadsheetName", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique ID of the worksheet associated with the cell you want to retrieve. Required unless SpreadsheetName and WorksheetName are supplied.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end
        #### 
        # Set the value of the WorksheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the worksheet containing the cell to retrieve. This and SpreadsheetName can be used as an alternative to SpreadsheetKey and WorksheetId to lookup the spreadsheet details by name.
        ###

        def set_WorksheetName(value)
          set_input("WorksheetName", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveCellValue Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveCellValueResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "CellValue" output from this Choreo execution
      	#
      	# @return String - (string) The value of the cell.
      	####
      	def get_CellValue()
      	  return @outputs["CellValue"]
      	end
      end

    end # class RetrieveCellValue



    ##############################################################################
    #
    # RetrieveLastColumnValue
    #
    # Returns the value of the last cell in a specified column.
    #
    ##############################################################################

    class RetrieveLastColumnValue < Choreography

      ####
      #  Create a new instance of the RetrieveLastColumnValue Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveLastColumnValue")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveLastColumnValueInputSet
      ####
      def new_input_set()
        return RetrieveLastColumnValueInputSet.new()
      end

      def make_result_set()
        return RetrieveLastColumnValueResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveLastColumnValueResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveLastColumnValue
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveLastColumnValueInputSet < Choreography::InputSet

        #### 
        # Set the value of the ColumnName input for this Choreo. 
        # 
        # @param String - (required, string) The name of the column that the cell value is in. This should be the value in row 1 of the column you wish to search.
        ###

        def set_ColumnName(value)
          set_input("ColumnName", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique key of the spreadsheet to query. Required unless SpreadsheetName and WorksheetName are supplied.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the SpreadsheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the spreadsheet to query. This and WorksheetName can be used as an alternative to SpreadsheetKey and WorksheetId to lookup spreadsheet details by name.
        ###

        def set_SpreadsheetName(value)
          set_input("SpreadsheetName", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique ID of the worksheet to query. Required unless SpreadsheetName and WorksheetName are supplied.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end
        #### 
        # Set the value of the WorksheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the worksheet to query. This and SpreadsheetName can be used as an alternative to SpreadsheetKey and WorksheetId to lookup the spreadsheet details by name.
        ###

        def set_WorksheetName(value)
          set_input("WorksheetName", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveLastColumnValue Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveLastColumnValueResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Row" output from this Choreo execution
      	#
      	# @return String - (integer) The row number of the returned cell.
      	####
      	def get_Row()
      	  return @outputs["Row"]
      	end
      	####
      	# Retrieve the value for the "CellValue" output from this Choreo execution
      	#
      	# @return String - The value of the last cell in the specified column.
      	####
      	def get_CellValue()
      	  return @outputs["CellValue"]
      	end
      	####
      	# Retrieve the value for the "Column" output from this Choreo execution
      	#
      	# @return String - (integer) The column number for the returned cell.
      	####
      	def get_Column()
      	  return @outputs["Column"]
      	end
      end

    end # class RetrieveLastColumnValue



    ##############################################################################
    #
    # RetrieveListFeed
    #
    # Retrieves a list-based feed containing data in your Google spreadsheet.
    #
    ##############################################################################

    class RetrieveListFeed < Choreography

      ####
      #  Create a new instance of the RetrieveListFeed Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveListFeed")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveListFeedInputSet
      ####
      def new_input_set()
        return RetrieveListFeedInputSet.new()
      end

      def make_result_set()
        return RetrieveListFeedResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveListFeedResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveListFeed
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveListFeedInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key of the spreadsheet associated with the feed you want to retrieve.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID of the worksheet associated with the feed you want to retrieve.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveListFeed Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveListFeedResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class RetrieveListFeed



    ##############################################################################
    #
    # RetrieveListRow
    #
    # Retrieves a specified worksheet row from a Google spreadsheet.
    #
    ##############################################################################

    class RetrieveListRow < Choreography

      ####
      #  Create a new instance of the RetrieveListRow Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveListRow")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveListRowInputSet
      ####
      def new_input_set()
        return RetrieveListRowInputSet.new()
      end

      def make_result_set()
        return RetrieveListRowResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveListRowResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveListRow
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveListRowInputSet < Choreography::InputSet

        #### 
        # Set the value of the Link input for this Choreo. 
        # 
        # @param String - (optional, string) The entry's resource URL found in the link element of the entry. Can be retrieved by running RetrieveListFeed Choreo. When this is provided, SpreadsheetKey, WorksheetId, and RowId are not needed.
        ###

        def set_Link(value)
          set_input("Link", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the RowId input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique ID of the row you want to retrieve. Required unless providing the Link input.
        ###

        def set_RowId(value)
          set_input("RowId", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique key of the spreadsheet associated with the row you want to retrieve. Required unless providing the Link input.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique ID of the worksheet associated with the row you want to retrieve. Required unless providing the Link input.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveListRow Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveListRowResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class RetrieveListRow



    ##############################################################################
    #
    # RetrieveSpecificRowsOrColumns
    #
    # Retrieves specific rows or columns based on a specified range.
    #
    ##############################################################################

    class RetrieveSpecificRowsOrColumns < Choreography

      ####
      #  Create a new instance of the RetrieveSpecificRowsOrColumns Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveSpecificRowsOrColumns")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveSpecificRowsOrColumnsInputSet
      ####
      def new_input_set()
        return RetrieveSpecificRowsOrColumnsInputSet.new()
      end

      def make_result_set()
        return RetrieveSpecificRowsOrColumnsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveSpecificRowsOrColumnsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveSpecificRowsOrColumns
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveSpecificRowsOrColumnsInputSet < Choreography::InputSet

        #### 
        # Set the value of the MaxColumn input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The max column number to return.
        ###

        def set_MaxColumn(value)
          set_input("MaxColumn", value)
        end
        #### 
        # Set the value of the MaxRow input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The max row number to return.
        ###

        def set_MaxRow(value)
          set_input("MaxRow", value)
        end
        #### 
        # Set the value of the MinColumn input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The minimum column number to return.
        ###

        def set_MinColumn(value)
          set_input("MinColumn", value)
        end
        #### 
        # Set the value of the MinRow input for this Choreo. 
        # 
        # @param Integer - (optional, integer) The minimum row number to return.
        ###

        def set_MinRow(value)
          set_input("MinRow", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key of the spreadsheet associated w.ith the feed you want to retrieve.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID of the worksheet associated with the feed you want to retrieve.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveSpecificRowsOrColumns Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveSpecificRowsOrColumnsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class RetrieveSpecificRowsOrColumns



    ##############################################################################
    #
    # RetrieveSpreadsheetDetailsByName
    #
    # Retrieves spreadsheet and worksheet IDs with a given spreadsheet name.
    #
    ##############################################################################

    class RetrieveSpreadsheetDetailsByName < Choreography

      ####
      #  Create a new instance of the RetrieveSpreadsheetDetailsByName Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveSpreadsheetDetailsByName")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveSpreadsheetDetailsByNameInputSet
      ####
      def new_input_set()
        return RetrieveSpreadsheetDetailsByNameInputSet.new()
      end

      def make_result_set()
        return RetrieveSpreadsheetDetailsByNameResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveSpreadsheetDetailsByNameResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveSpreadsheetDetailsByName
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveSpreadsheetDetailsByNameInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the SpreadsheetName input for this Choreo. 
        # 
        # @param String - (required, string) The title of the spreadsheet you want to retrieve details for.
        ###

        def set_SpreadsheetName(value)
          set_input("SpreadsheetName", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveSpreadsheetDetailsByName Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveSpreadsheetDetailsByNameResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "SpreadsheetDetails" output from this Choreo execution
      	#
      	# @return String - The spreadsheet details including spreadsheet name and key. Worksheet names and IDs associated with the spreadsheet are also included.
      	####
      	def get_SpreadsheetDetails()
      	  return @outputs["SpreadsheetDetails"]
      	end
      end

    end # class RetrieveSpreadsheetDetailsByName



    ##############################################################################
    #
    # RetrieveSpreadsheets
    #
    # Retrieves a list of spreadsheets that exist in your Google account.
    #
    ##############################################################################

    class RetrieveSpreadsheets < Choreography

      ####
      #  Create a new instance of the RetrieveSpreadsheets Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveSpreadsheets")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveSpreadsheetsInputSet
      ####
      def new_input_set()
        return RetrieveSpreadsheetsInputSet.new()
      end

      def make_result_set()
        return RetrieveSpreadsheetsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveSpreadsheetsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveSpreadsheets
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveSpreadsheetsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveSpreadsheets Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveSpreadsheetsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class RetrieveSpreadsheets



    ##############################################################################
    #
    # RetrieveWorksheet
    #
    # Retrieves a specified worksheet from a Google spreadsheet in CSV, XML, or JSON format.
    #
    ##############################################################################

    class RetrieveWorksheet < Choreography

      ####
      #  Create a new instance of the RetrieveWorksheet Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveWorksheet")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveWorksheetInputSet
      ####
      def new_input_set()
        return RetrieveWorksheetInputSet.new()
      end

      def make_result_set()
        return RetrieveWorksheetResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveWorksheetResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveWorksheet
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveWorksheetInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: csv (the default), xml, and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key of the spreadsheet associated with the worksheet you want to retrieve. Required unless SpreadsheetName and WorksheetName are supplied.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the SpreadsheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the spreadsheet to retrieve. This and WorksheetName can be used as an alternative to SpreadsheetKey and WorksheetId to lookup spreadsheet details by name.
        ###

        def set_SpreadsheetName(value)
          set_input("SpreadsheetName", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID of the worksheet that you want to retrieve. Required unless SpreadsheetName and WorksheetName are supplied.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end
        #### 
        # Set the value of the WorksheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the worksheet to retrieve. This and SpreadsheetName can be used as an alternative to SpreadsheetKey and WorksheetId to lookup spreadsheet details by name.
        ###

        def set_WorksheetName(value)
          set_input("WorksheetName", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveWorksheet Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveWorksheetResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - (multiline) The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class RetrieveWorksheet



    ##############################################################################
    #
    # RetrieveWorksheets
    #
    # Retrieves a list of worksheets in a given Google spreadsheet.
    #
    ##############################################################################

    class RetrieveWorksheets < Choreography

      ####
      #  Create a new instance of the RetrieveWorksheets Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/RetrieveWorksheets")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return RetrieveWorksheetsInputSet
      ####
      def new_input_set()
        return RetrieveWorksheetsInputSet.new()
      end

      def make_result_set()
        return RetrieveWorksheetsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = RetrieveWorksheetsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the RetrieveWorksheets
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class RetrieveWorksheetsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key of the spreadsheet associated with the worksheet(s) you want to retrieve.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the RetrieveWorksheets Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class RetrieveWorksheetsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class RetrieveWorksheets



    ##############################################################################
    #
    # SearchColumn
    #
    # Searches a column for a specified value.
    #
    ##############################################################################

    class SearchColumn < Choreography

      ####
      #  Create a new instance of the SearchColumn Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/SearchColumn")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return SearchColumnInputSet
      ####
      def new_input_set()
        return SearchColumnInputSet.new()
      end

      def make_result_set()
        return SearchColumnResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = SearchColumnResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the SearchColumn
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class SearchColumnInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ReturnMatches input for this Choreo. 
        # 
        # @param Boolean - (optional, boolean) Set to true to return all matches of the query. When set to true, an array of cell values that meet the query criteria is returned in the Results output. Defaults to true.
        ###

        def set_ReturnMatches(value)
          set_input("ReturnMatches", value)
        end
        #### 
        # Set the value of the SearchColumn input for this Choreo. 
        # 
        # @param String - (required, string) The name of the column to search. This should be the value in row 1 of the column you wish to search.
        ###

        def set_SearchColumn(value)
          set_input("SearchColumn", value)
        end
        #### 
        # Set the value of the SearchOperator input for this Choreo. 
        # 
        # @param String - (required, string) The operator to use in the query. Allowed operators are: >, <, >=, >=, =, contains, and starts_with.
        ###

        def set_SearchOperator(value)
          set_input("SearchOperator", value)
        end
        #### 
        # Set the value of the SearchValue input for this Choreo. 
        # 
        # @param String - (required, any) The value to search for in the specified column.
        ###

        def set_SearchValue(value)
          set_input("SearchValue", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique key of the spreadsheet to query. Required unless SpreadsheetName and WorksheetName are supplied.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the SpreadsheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the spreadsheet to query. This and WorksheetName can be used as an alternative to SpreadsheetKey and WorksheetId to lookup spreadsheet details by name.
        ###

        def set_SpreadsheetName(value)
          set_input("SpreadsheetName", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique ID of the worksheet to query. Required unless SpreadsheetName and WorksheetName are supplied.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end
        #### 
        # Set the value of the WorksheetName input for this Choreo. 
        # 
        # @param String - (optional, string) The name of the worksheet to query. This and SpreadsheetName can be used as an alternative to SpreadsheetKey and WorksheetId to lookup the spreadsheet details by name.
        ###

        def set_WorksheetName(value)
          set_input("WorksheetName", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the SearchColumn Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class SearchColumnResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Count" output from this Choreo execution
      	#
      	# @return String - (integer) The count of matched results. This is only returned when ReturnMatches is set to true.
      	####
      	def get_Count()
      	  return @outputs["Count"]
      	end
      	####
      	# Retrieve the value for the "MatchFound" output from this Choreo execution
      	#
      	# @return String - (boolean) Whether or not a matched result was found.
      	####
      	def get_MatchFound()
      	  return @outputs["MatchFound"]
      	end
      	####
      	# Retrieve the value for the "Results" output from this Choreo execution
      	#
      	# @return String - (json) Contains an array of the matched cell values. This is only returned when ReturnMatches is set to true.
      	####
      	def get_Results()
      	  return @outputs["Results"]
      	end
      end

    end # class SearchColumn



    ##############################################################################
    #
    # StructuredQuery
    #
    # Retrieves a list-based feed containing data in your Google spreadsheet that meets a specified criteria.
    #
    ##############################################################################

    class StructuredQuery < Choreography

      ####
      #  Create a new instance of the StructuredQuery Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/StructuredQuery")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return StructuredQueryInputSet
      ####
      def new_input_set()
        return StructuredQueryInputSet.new()
      end

      def make_result_set()
        return StructuredQueryResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = StructuredQueryResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the StructuredQuery
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class StructuredQueryInputSet < Choreography::InputSet

        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the Query input for this Choreo. 
        # 
        # @param String - (required, string) A valid structured query (i.e. id>4).
        ###

        def set_Query(value)
          set_input("Query", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key of the spreadsheet associated with the feed you want to retrieve.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID of the worksheet associated with the feed you want to retrieve.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the StructuredQuery Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class StructuredQueryResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class StructuredQuery



    ##############################################################################
    #
    # UpdateCells
    #
    # Updates a specified cell in a Google worksheet.
    #
    ##############################################################################

    class UpdateCells < Choreography

      ####
      #  Create a new instance of the UpdateCells Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/UpdateCells")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return UpdateCellsInputSet
      ####
      def new_input_set()
        return UpdateCellsInputSet.new()
      end

      def make_result_set()
        return UpdateCellsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = UpdateCellsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the UpdateCells
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class UpdateCellsInputSet < Choreography::InputSet

        #### 
        # Set the value of the Column input for this Choreo. 
        # 
        # @param Integer - (required, integer) The column number of the cell location that you want to update (for example, column A = 1, columnB = 2, etc).
        ###

        def set_Column(value)
          set_input("Column", value)
        end
        #### 
        # Set the value of the InputValue input for this Choreo. 
        # 
        # @param String - (required, string) The new value for the cell.
        ###

        def set_InputValue(value)
          set_input("InputValue", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the Row input for this Choreo. 
        # 
        # @param Integer - (required, integer) The row number of the cell location that you want to update.
        ###

        def set_Row(value)
          set_input("Row", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key of the spreadsheet associated with the cell you want to update.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID of the worksheet associated with the cell you want to update.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the UpdateCells Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class UpdateCellsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class UpdateCells



    ##############################################################################
    #
    # UpdateListRows
    #
    # Updates a worksheet row in a Google spreadsheet using a simple XML file you provide.
    #
    ##############################################################################

    class UpdateListRows < Choreography

      ####
      #  Create a new instance of the UpdateListRows Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/UpdateListRows")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return UpdateListRowsInputSet
      ####
      def new_input_set()
        return UpdateListRowsInputSet.new()
      end

      def make_result_set()
        return UpdateListRowsResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = UpdateListRowsResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the UpdateListRows
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class UpdateListRowsInputSet < Choreography::InputSet

        #### 
        # Set the value of the RowsetXML input for this Choreo. 
        # 
        # @param String - (required, xml) The row of data that you want to update in XML format. Your XML needs to be in the rowset/row schema described in the Choreo documentation.
        ###

        def set_RowsetXML(value)
          set_input("RowsetXML", value)
        end
        #### 
        # Set the value of the Link input for this Choreo. 
        # 
        # @param String - (optional, string) The entry's resource URL found in the link element of the entry. Can be retrieved by running RetrieveListFeed Choreo. When this is provided, SpreadsheetKey, WorksheetId, and RowId are not needed.
        ###

        def set_Link(value)
          set_input("Link", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the RowId input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique id of the row you want to update. Required unless providing the Link input.
        ###

        def set_RowId(value)
          set_input("RowId", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique key of the spreadsheet that contains the worksheet you want to update. Required unless providing the Link input.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (conditional, string) The unique ID of the worksheet that you want to update. Required unless providing the Link input.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the UpdateListRows Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class UpdateListRowsResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - The response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class UpdateListRows



    ##############################################################################
    #
    # UpdateWorksheet
    #
    # Updates existing worksheet metadata such as: Title, Row Count, and Column Count.
    #
    ##############################################################################

    class UpdateWorksheet < Choreography

      ####
      #  Create a new instance of the UpdateWorksheet Choreo. A TembooSession object, containing a valid
      #  set of Temboo credentials, must be supplied.
      ####
      def initialize(session)
        super(session, "/Library/Google/Spreadsheets/UpdateWorksheet")
      end

      #### 
      # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
      #
      # @return UpdateWorksheetInputSet
      ####
      def new_input_set()
        return UpdateWorksheetInputSet.new()
      end

      def make_result_set()
        return UpdateWorksheetResultSet.new()
      end

      ####
      # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
      # and return a ResultSet containing the execution results.
      # @param choreoInputs
      # @return
      # @throws TembooException
      ####
      def execute(input_set = nil)
        resp = super(input_set)
        results = UpdateWorksheetResultSet.new(resp)
        return results
      end

      ####
      # An InputSet with methods appropriate for specifying the inputs to the UpdateWorksheet
      # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
      ####
      class UpdateWorksheetInputSet < Choreography::InputSet

        #### 
        # Set the value of the ColumnCount input for this Choreo. 
        # 
        # @param Integer - (required, integer) The number of columns that you want to specify for the worksheet.
        ###

        def set_ColumnCount(value)
          set_input("ColumnCount", value)
        end
        #### 
        # Set the value of the Password input for this Choreo. 
        # 
        # @param String - (required, password) Your Google password.
        ###

        def set_Password(value)
          set_input("Password", value)
        end
        #### 
        # Set the value of the ResponseFormat input for this Choreo. 
        # 
        # @param String - (optional, string) The format that the response should be in. Valid values are: xml (the default) and json.
        ###

        def set_ResponseFormat(value)
          set_input("ResponseFormat", value)
        end
        #### 
        # Set the value of the RowCount input for this Choreo. 
        # 
        # @param Integer - (required, integer) The number of rows that you want to specify for the worksheet.
        ###

        def set_RowCount(value)
          set_input("RowCount", value)
        end
        #### 
        # Set the value of the SpreadsheetKey input for this Choreo. 
        # 
        # @param String - (required, string) The unique key associated with the spreadsheet that contains a worksheet you want to update.
        ###

        def set_SpreadsheetKey(value)
          set_input("SpreadsheetKey", value)
        end
        #### 
        # Set the value of the Title input for this Choreo. 
        # 
        # @param String - (required, string) The new title of the worksheet.
        ###

        def set_Title(value)
          set_input("Title", value)
        end
        #### 
        # Set the value of the Username input for this Choreo. 
        # 
        # @param String - (required, string) Your full Google email address e.g., martha.temboo@gmail.com.
        ###

        def set_Username(value)
          set_input("Username", value)
        end
        #### 
        # Set the value of the WorksheetId input for this Choreo. 
        # 
        # @param String - (required, string) The unique ID associated with the worksheet that you want to update.
        ###

        def set_WorksheetId(value)
          set_input("WorksheetId", value)
        end

      end

      ####
      # A ResultSet with methods tailored to the values returned by the UpdateWorksheet Choreo.
      # The ResultSet object is used to retrieve the results of a Choreo execution.
      ####
      class UpdateWorksheetResultSet < Choreography::ResultSet
      	####
      	# Retrieve the value for the "Response" output from this Choreo execution
      	#
      	# @return String - Response from Google.
      	####
      	def get_Response()
      	  return @outputs["Response"]
      	end
      end

    end # class UpdateWorksheet




    module Utils



      ##############################################################################
      #
      # CellFeedCSVHelper
      #
      # 
      #
      ##############################################################################

      class CellFeedCSVHelper < Choreography

        ####
        #  Create a new instance of the CellFeedCSVHelper Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Spreadsheets/Utils/CellFeedCSVHelper")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return CellFeedCSVHelperInputSet
        ####
        def new_input_set()
          return CellFeedCSVHelperInputSet.new()
        end

        def make_result_set()
          return CellFeedCSVHelperResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = CellFeedCSVHelperResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the CellFeedCSVHelper
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class CellFeedCSVHelperInputSet < Choreography::InputSet

          #### 
          # Set the value of the Feed input for this Choreo. 
          # 
          # @param String - (conditional, xml) 
          ###

          def set_Feed(value)
            set_input("Feed", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the CellFeedCSVHelper Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class CellFeedCSVHelperResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "CSV" output from this Choreo execution
        	#
        	# @return String - 
        	####
        	def get_CSV()
        	  return @outputs["CSV"]
        	end
        end

      end # class CellFeedCSVHelper



      ##############################################################################
      #
      # IteratorHelper
      #
      # 
      #
      ##############################################################################

      class IteratorHelper < Choreography

        ####
        #  Create a new instance of the IteratorHelper Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Spreadsheets/Utils/IteratorHelper")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return IteratorHelperInputSet
        ####
        def new_input_set()
          return IteratorHelperInputSet.new()
        end

        def make_result_set()
          return IteratorHelperResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = IteratorHelperResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the IteratorHelper
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class IteratorHelperInputSet < Choreography::InputSet

          #### 
          # Set the value of the Count input for this Choreo. 
          # 
          # @param String - (conditional, any) 
          ###

          def set_Count(value)
            set_input("Count", value)
          end
          #### 
          # Set the value of the XML input for this Choreo. 
          # 
          # @param String - (conditional, any) 
          ###

          def set_XML(value)
            set_input("XML", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the IteratorHelper Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class IteratorHelperResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "CurrentValue" output from this Choreo execution
        	#
        	# @return String - 
        	####
        	def get_CurrentValue()
        	  return @outputs["CurrentValue"]
        	end
        	####
        	# Retrieve the value for the "CurrentName" output from this Choreo execution
        	#
        	# @return String - 
        	####
        	def get_CurrentName()
        	  return @outputs["CurrentName"]
        	end
        end

      end # class IteratorHelper



      ##############################################################################
      #
      # KeyHelper
      #
      # 
      #
      ##############################################################################

      class KeyHelper < Choreography

        ####
        #  Create a new instance of the KeyHelper Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Spreadsheets/Utils/KeyHelper")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return KeyHelperInputSet
        ####
        def new_input_set()
          return KeyHelperInputSet.new()
        end

        def make_result_set()
          return KeyHelperResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = KeyHelperResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the KeyHelper
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class KeyHelperInputSet < Choreography::InputSet

          #### 
          # Set the value of the Column input for this Choreo. 
          # 
          # @param String - (conditional, any) 
          ###

          def set_Column(value)
            set_input("Column", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the KeyHelper Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class KeyHelperResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "Key" output from this Choreo execution
        	#
        	# @return String - 
        	####
        	def get_Key()
        	  return @outputs["Key"]
        	end
        end

      end # class KeyHelper



      ##############################################################################
      #
      # XMLToCSVHelper
      #
      # Converts an XML file to CSV format.
      #
      ##############################################################################

      class XMLToCSVHelper < Choreography

        ####
        #  Create a new instance of the XMLToCSVHelper Choreo. A TembooSession object, containing a valid
        #  set of Temboo credentials, must be supplied.
        ####
        def initialize(session)
          super(session, "/Library/Google/Spreadsheets/Utils/XMLToCSVHelper")
        end

        #### 
        # Obtain an InputSet object, used to define inputs for an execution of this Choreo.
        #
        # @return XMLToCSVHelperInputSet
        ####
        def new_input_set()
          return XMLToCSVHelperInputSet.new()
        end

        def make_result_set()
          return XMLToCSVHelperResultSet.new()
        end

        ####
        # Execute the Choreo using the specified InputSet as parameters, wait for the Choreo to complete 
        # and return a ResultSet containing the execution results.
        # @param choreoInputs
        # @return
        # @throws TembooException
        ####
        def execute(input_set = nil)
          resp = super(input_set)
          results = XMLToCSVHelperResultSet.new(resp)
          return results
        end

        ####
        # An InputSet with methods appropriate for specifying the inputs to the XMLToCSVHelper
        # Choreo. The InputSet object is used to specify input parameters when executing this Choreo.
        ####
        class XMLToCSVHelperInputSet < Choreography::InputSet

          #### 
          # Set the value of the XML input for this Choreo. 
          # 
          # @param String - (required, xml) The XML file to convert to CSV data.
          ###

          def set_XML(value)
            set_input("XML", value)
          end
          #### 
          # Set the value of the Path input for this Choreo. 
          # 
          # @param String - (optional, string) If your XML is not in "/rowset/row/column_name" format, specify a path to the rows. See documentation for examples.
          ###

          def set_Path(value)
            set_input("Path", value)
          end

        end

        ####
        # A ResultSet with methods tailored to the values returned by the XMLToCSVHelper Choreo.
        # The ResultSet object is used to retrieve the results of a Choreo execution.
        ####
        class XMLToCSVHelperResultSet < Choreography::ResultSet
        	####
        	# Retrieve the value for the "CSV" output from this Choreo execution
        	#
        	# @return String - (multiline) The CSV data generated from the XML input.
        	####
        	def get_CSV()
        	  return @outputs["CSV"]
        	end
        end

      end # class XMLToCSVHelper




    end # module Utils

  end # module Spreadsheets

end # module Google